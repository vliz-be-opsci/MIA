{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AACA,2CAAsC;AAEtC;;;;;;;;GAQG;AACH,SAAgB,WAAW,CAAoC,MAAqB;IAClF,MAAM,KAAK,GAA4C,qBAAQ,CAAC,aAAa,EAAE,CAAC;IAChF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;SACzD,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;SACnB,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC;AALD,kCAKC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { RdfStore } from 'rdf-stores';\n\n/**\n * Import all quads in the given stream into a new RDF store.\n *\n * The whole stream will be consumed for this,\n * and the promise will resolve once the stream's end event is emitted.\n *\n * @param {Stream<Q extends BaseQuad>} stream An RDF stream containing the quads to import into the store.\n * @return {Promise<Store<Q extends BaseQuad>>} A promise resolving to an RDF store.\n */\nexport function storeStream<Q extends RDF.BaseQuad = RDF.Quad>(stream: RDF.Stream<Q>): Promise<RDF.Store<Q>> {\n  const store: RDF.Store<Q> = <RDF.Store<Q>> <RDF.Store> RdfStore.createDefault();\n  return new Promise((resolve, reject) => store.import(stream)\n    .on('error', reject)\n    .once('end', () => resolve(store)));\n}\n"]}