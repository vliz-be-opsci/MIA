{"version":3,"file":"ActorQueryResultSerializeJson.js","sourceRoot":"","sources":["ActorQueryResultSerializeJson.ts"],"names":[],"mappings":";;;AAKA,qFAAgG;AAOhG,iDAAqC;AACrC,wCAAwC;AACxC,qDAA2C;AAE3C;;GAEG;AACH,MAAa,6BAA8B,SAAQ,qEAAwC;IACzF;;;;;;;;OAQG;IACH,YAAmB,IAAmD;QACpE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEe,KAAK,CAAC,iBAAiB,CAAC,MAA8B,EAAE,QAAwB;QAC9F,IAAI,CAAC,CAAE,UAAU,EAAE,OAAO,EAAE,SAAS,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9D,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;QAC1E,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,UAAkB,EAAE,QAAwB;QAEjG,MAAM,IAAI,GAAG,IAAI,0BAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,aAAa;QACf,CAAC,CAAC;QAEF,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC1D,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;gBACvC,IAAA,oBAAI,EAAkC,MAAO,CAAC,cAAc,CAAC;qBAC1D,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAE,GAAG,OAAO,CAAE;qBAC7D,GAAG,CAAC,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAAE,EAAE,CAAC,CAAE,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/E,IAAA,oBAAI,EAA+B,MAAO,CAAC,UAAU,CAAC;qBACnD,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAEzE,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC9B,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,KAAK,CAAC;gBACd,OAAO,GAAG,CAAC;YACb,CAAC,CAAC,CAAC,OAAO,CAAC,CAAE,GAAG,CAAE,CAAC,CAAC,MAAM,CAAC,CAAE,OAAO,CAAE,CAAC,CAAC;YAExC,IAAI,CAAC,IAAI,CAAO,MAAM,CAAC,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,IAAI,CAAC;gBACH,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAsC,MAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;gBAC1F,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC;YAAC,OAAO,KAAc,EAAE,CAAC;gBACxB,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC;QAED,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AAvDD,sEAuDC","sourcesContent":["import type {\n  IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput,\n} from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type {\n  IActionContext,\n  IQueryOperationResultBindings,\n  IQueryOperationResultBoolean,\n  IQueryOperationResultQuads,\n} from '@comunica/types';\nimport { wrap } from 'asynciterator';\nimport * as RdfString from 'rdf-string';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica JSON Query Result Serialize Actor.\n */\nexport class ActorQueryResultSerializeJson extends ActorQueryResultSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/json\": 1.0\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/json\": \"https://comunica.linkeddatafragments.org/#results_JSON\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public override async testHandleChecked(action: IActionSparqlSerialize, _context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads', 'boolean' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings or quad streams.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, _mediaType: string, _context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    if (action.type === 'bindings' || action.type === 'quads') {\n      let stream = action.type === 'bindings' ?\n        wrap((<IQueryOperationResultBindings> action).bindingsStream)\n          .map(element => JSON.stringify(Object.fromEntries([ ...element ]\n            .map(([ key, value ]) => [ key.value, RdfString.termToString(value) ])))) :\n        wrap((<IQueryOperationResultQuads> action).quadStream)\n          .map(element => JSON.stringify(RdfString.quadToStringQuad(element)));\n\n      let empty = true;\n      stream = stream.map((element) => {\n        const ret = `${empty ? '' : ','}\\n${element}`;\n        empty = false;\n        return ret;\n      }).prepend([ '[' ]).append([ '\\n]\\n' ]);\n\n      data.wrap(<any> stream);\n    } else {\n      try {\n        data.push(`${JSON.stringify(await (<IQueryOperationResultBoolean> action).execute())}\\n`);\n        data.push(null);\n      } catch (error: unknown) {\n        setTimeout(() => data.emit('error', error));\n      }\n    }\n\n    return { data };\n  }\n}\n"]}