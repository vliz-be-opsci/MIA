{"version":3,"file":"SimpleSclParser.js","sourceRoot":"","sources":["SimpleSclParser.ts"],"names":[],"mappings":";;;AACA,qDAA4C;AAE5C,mDAAgD;AAEhD;;;;;GAKG;AACH,MAAa,eAAe;IAGnB,KAAK,CAAC,aAAqB,EAAE,OAAgB;QAClD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAEhB,MAAM,gBAAgB,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;QAEzE,6BAA6B;QAC7B,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QACrC,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QAEpD,mDAAmD;QACnD,MAAM,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACjE,IAAI,MAAqC,CAAC;QAC1C,IAAI,UAAU,IAAI,CAAC,EAAE,CAAC;YACpB,+EAA+E;YAC/E,MAAM,cAAc,GAAG,aAAa,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC;YAC1E,MAAM,GAAuB,IAAA,2BAAS,EAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAEzE,qDAAqD;YACrD,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QACrD,CAAC;QAED,6BAA6B;QAC7B,MAAM,MAAM,GAAG,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,kBAAkB,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAEpE,4EAA4E;QAC5E,MAAM,WAAW,GAAG,oBAAoB,kBAAkB,IAAI,CAAC;QAC/D,MAAM,YAAY,GAAsB,IAAA,2BAAS,EAAC,WAAW,EAAE,gBAAgB,CAAE,CAAC,KAAK,CAAC;QAExF,OAAO,IAAI,6BAAa,CAAC,YAAY,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAC5D,CAAC;IAES,gBAAgB,CAAC,aAAqB;QAC9C,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,OAAO,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;YACrD,MAAM,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,QAAQ,IAAI,EAAE,CAAC;gBACb,KAAK,GAAG;oBACN,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;wBACnE,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;wBACjB,MAAM,GAAG,IAAI,CAAC;oBAChB,CAAC;yBAAM,CAAC;wBACN,MAAM,IAAI,KAAK,CAAC,uDAAuD,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;oBAC/H,CAAC;oBACD,MAAM;gBACR,KAAK,GAAG,CAAC;gBACT,KAAK,IAAI,CAAC;gBACV,KAAK,IAAI;oBACP,IAAI,CAAC,MAAM,EAAE,CAAC;oBACd,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CAAC,mDAAmD,IAAI,+BAA+B,CAAC,CAAC;YAC5G,CAAC;QACH,CAAC;IACH,CAAC;IAES,aAAa,CAAC,aAAqB;QAC3C,MAAM,SAAS,GAAgB,EAAE,CAAC;QAClC,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC;QACvB,IAAI,iBAAiB,GAAG,CAAC,CAAC,CAAC;QAC3B,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,OAAO,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;YACxD,MAAM,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,QAAQ,IAAI,EAAE,CAAC;gBACb,KAAK,GAAG;oBACN,sBAAsB;oBACtB,IAAI,aAAa,IAAI,CAAC,EAAE,CAAC;wBACvB,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;oBAClF,CAAC;oBACD,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC5B,MAAM;gBACR,KAAK,GAAG;oBACN,6BAA6B;oBAC7B,IAAI,iBAAiB,IAAI,CAAC,EAAE,CAAC;wBAC3B,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;oBACvG,CAAC;oBACD,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC;oBAChC,MAAM;gBACR,KAAK,GAAG,CAAC;gBACT,KAAK,IAAI;oBACP,oBAAoB;oBACpB,IAAI,aAAa,IAAI,CAAC,EAAE,CAAC;wBACvB,MAAM,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;wBACjE,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;4BACtB,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;wBACvF,CAAC;wBACD,IAAI,YAAY,GAAG,KAAK,CAAC;wBAEzB,4CAA4C;wBAC5C,IAAI,iBAAiB,IAAI,CAAC,EAAE,CAAC;4BAC3B,oCAAoC;4BACpC,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,KAAK,gBAAgB,EAAE,CAAC;gCAChF,MAAM,IAAI,KAAK,CAAC,6FAA6F,CAAC,CAAC;4BACjH,CAAC;4BACD,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;4BAClB,YAAY,GAAG,IAAI,CAAC;4BACpB,iBAAiB,GAAG,CAAC,CAAC,CAAC;wBACzB,CAAC;wBAED,oBAAoB;wBACpB,SAAS,CAAC,IAAI,CAAC;4BACb,IAAI;4BACJ,YAAY;yBACb,CAAC,CAAC;wBACH,aAAa,GAAG,CAAC,CAAC,CAAC;oBACrB,CAAC;oBACD,qCAAqC;oBACrC,MAAM;gBACR,KAAK,GAAG;oBACN,yBAAyB;oBACzB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;gBAC7D,KAAK,GAAG;oBACN,kEAAkE;oBAClE,SAAS,GAAG,IAAI,CAAC;oBACjB,MAAM;gBACR;oBACE,IAAI,aAAa,IAAI,CAAC,IAAI,iBAAiB,IAAI,CAAC,EAAE,CAAC;wBACjD,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;oBAC5F,CAAC;YACL,CAAC;YAED,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC;QACD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;QAChF,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAtID,0CAsIC","sourcesContent":["import type { Algebra } from 'sparqlalgebrajs';\nimport { translate } from 'sparqlalgebrajs';\nimport type { IVariable } from './ContentPolicy';\nimport { ContentPolicy } from './ContentPolicy';\n\n/**\n * A simple SCL parser that builds on top of SPARQL.js and SPARQLAlgebraJS.\n *\n * This is not an optimal implementation, and may fail in edge-cases\n * (such as when 'INCLUDE' is used in an IRI or string in the graph pattern).\n */\nexport class SimpleSclParser {\n  protected cursor: number;\n\n  public parse(contentPolicy: string, baseIRI?: string): ContentPolicy {\n    this.cursor = 0;\n\n    const translateOptions = { quads: true, baseIRI, blankToVariable: true };\n\n    // Parse FOLLOW and variables\n    this.readFollowClause(contentPolicy);\n    const variables = this.readVariables(contentPolicy);\n\n    // Check if we have an INCLUDE clause for filtering\n    const includePos = contentPolicy.indexOf('INCLUDE', this.cursor);\n    let filter: Algebra.Construct | undefined;\n    if (includePos >= 0) {\n      // Simulate a SPARQL CONSTRUCT query around our include clause for easy parsing\n      const constructQuery = `CONSTRUCT ${contentPolicy.slice(includePos + 7)}`;\n      filter = <Algebra.Construct> translate(constructQuery, translateOptions);\n\n      // Chop off the include clause for further processing\n      contentPolicy = contentPolicy.slice(0, includePos);\n    }\n\n    // Parse FOLLOW graph pattern\n    const endPos = contentPolicy.lastIndexOf('}');\n    if (endPos < 0) {\n      throw new Error(`Missing '}' at the end of the policy`);\n    }\n    const graphPatternString = contentPolicy.slice(this.cursor, endPos);\n\n    // Simulate a SPARQL SELECT query around our graph pattern for easy parsing.\n    const sparqlQuery = `SELECT * WHERE { ${graphPatternString} }`;\n    const graphPattern = (<Algebra.Project> translate(sparqlQuery, translateOptions)).input;\n\n    return new ContentPolicy(graphPattern, variables, filter);\n  }\n\n  protected readFollowClause(contentPolicy: string): void {\n    let follow = false;\n    while (this.cursor < contentPolicy.length && !follow) {\n      const char = contentPolicy[this.cursor];\n      switch (char) {\n        case 'F':\n          if (contentPolicy.slice(this.cursor, this.cursor + 6) === 'FOLLOW') {\n            this.cursor += 6;\n            follow = true;\n          } else {\n            throw new Error(`Content policy must start with 'FOLLOW', but found '${contentPolicy.slice(this.cursor, this.cursor + 6)}'`);\n          }\n          break;\n        case ' ':\n        case '\\n':\n        case '\\t':\n          this.cursor++;\n          break;\n        default:\n          throw new Error(`Content policy starting with illegal character '${char}', while 'FOLLOW' is expected`);\n      }\n    }\n  }\n\n  protected readVariables(contentPolicy: string): IVariable[] {\n    const variables: IVariable[] = [];\n    let variableStart = -1;\n    let policyClauseStart = -1;\n    let breakLoop = false;\n    while (this.cursor < contentPolicy.length && !breakLoop) {\n      const char = contentPolicy[this.cursor];\n      switch (char) {\n        case '?':\n          // Start of a variable\n          if (variableStart >= 0) {\n            throw new Error(`Invalid variable clause: a variable can only contain one '?'`);\n          }\n          variableStart = this.cursor;\n          break;\n        case '(':\n          // Start of a policies clause\n          if (policyClauseStart >= 0) {\n            throw new Error(`Invalid variable clause: a variable with policies clause can only contain one '('`);\n          }\n          policyClauseStart = this.cursor;\n          break;\n        case ' ':\n        case '\\t':\n          // End of a variable\n          if (variableStart >= 0) {\n            const name = contentPolicy.slice(variableStart + 1, this.cursor);\n            if (name.length === 0) {\n              throw new Error(`Invalid variable clause: a variable must define a label after '?'`);\n            }\n            let withPolicies = false;\n\n            // Check if we expect a WITH POLICIES clause\n            if (policyClauseStart >= 0) {\n              // Wait for the policy clause to end\n              if (contentPolicy.slice(this.cursor + 1, this.cursor + 15) !== 'WITH POLICIES)') {\n                throw new Error(`Invalid variable clause: expected variables to be in the form of '(?varName WITH POLICIES)'`);\n              }\n              this.cursor += 14;\n              withPolicies = true;\n              policyClauseStart = -1;\n            }\n\n            // Save the variable\n            variables.push({\n              name,\n              withPolicies,\n            });\n            variableStart = -1;\n          }\n          // Otherwise, ignore blank characters\n          break;\n        case ')':\n          // End of a policy clause\n          throw new Error(`Invalid variable clause: Unexpected ')'`);\n        case '{':\n          // Start of the FOLLOW graph pattern, terminate our variables loop\n          breakLoop = true;\n          break;\n        default:\n          if (variableStart <= 0 && policyClauseStart <= 0) {\n            throw new Error(`Invalid variable clause: Missing '?' or '(' before variable definition`);\n          }\n      }\n\n      this.cursor++;\n    }\n    if (variables.length === 0) {\n      throw new Error(`Invalid variable clause: No followed variables are defined`);\n    }\n    return variables;\n  }\n}\n"]}