import type { ActorInitQueryBase } from '@comunica/actor-init-query';
import { QueryEngineBase } from '@comunica/actor-init-query';
import type { IActionExtractLinks, IActorExtractLinksOutput } from '@comunica/bus-extract-links';
import { ActorExtractLinks } from '@comunica/bus-extract-links';
import type { IActorArgs, IActorTest } from '@comunica/core';
import { ActionContextKey } from '@comunica/core';
import type { IActionContext } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
import type { Algebra } from 'sparqlalgebrajs';
import type { ContentPolicy } from './ContentPolicy';
/**
 * A comunica Traverse Content Policies RDF Metadata Extract Actor.
 */
export declare class ActorExtractLinksContentPolicies extends ActorExtractLinks implements IActorExtractLinksContentPoliciesArgs {
    private readonly sclParser;
    readonly actorInitQuery: ActorInitQueryBase;
    readonly traverseConditional: boolean;
    readonly queryEngine: QueryEngineBase;
    constructor(args: IActorExtractLinksContentPoliciesArgs);
    test(_action: IActionExtractLinks): Promise<IActorTest>;
    static getContentPolicies(context: IActionContext): ContentPolicy[];
    protected getContentPoliciesFromDocument(documentIri: string, store: RDF.Store): Promise<ContentPolicy[]>;
    static getCurrentQuadPattern(context: IActionContext): Algebra.Pattern | undefined;
    static isContentPolicyApplicableForPattern(policy: ContentPolicy, queryingPattern?: Algebra.Pattern): boolean;
    run(action: IActionExtractLinks): Promise<IActorExtractLinksOutput>;
}
export interface IActorExtractLinksContentPoliciesArgs extends IActorArgs<IActionExtractLinks, IActorTest, IActorExtractLinksOutput> {
    /**
     * An init query actor that is used to query all links to follow from a stream.
     * @default {<urn:comunica:default:init/actors#query>}
     */
    actorInitQuery: ActorInitQueryBase;
    /**
     * If true (default), then content policies will be applied on links that are being detected by some other actor,
     * if false, then links detected by content policies will forcefully be added to the link queue.
     * @default {true}
     */
    traverseConditional: boolean;
}
export declare const KEY_CONTEXT_POLICIES: ActionContextKey<ContentPolicy[]>;
export declare const KEY_CONTEXT_WITHPOLICIES: ActionContextKey<boolean>;
