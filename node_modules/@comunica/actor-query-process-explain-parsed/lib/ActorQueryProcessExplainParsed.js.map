{"version":3,"file":"ActorQueryProcessExplainParsed.js","sourceRoot":"","sources":["ActorQueryProcessExplainParsed.ts"],"names":[],"mappings":";;;AAMA,mEAEqC;AACrC,+DAA0D;AAE1D,yCAAkD;AAElD;;GAEG;AACH,MAAa,8BAA+B,SAAQ,qCAAiB;IAGnE,YAAmB,IAAyC;QAC1D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA2B;QAC3C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,OAAO,CAAC;YAC5C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,uBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;YACpE,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,qCAAqC,CAAC,CAAC;QACrE,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,kBAAkB;QAClB,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAEpF,OAAO;YACL,MAAM,EAAE;gBACN,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,SAAS;aAChB;SACF,CAAC;IACJ,CAAC;CACF;AA3BD,wEA2BC","sourcesContent":["import type {\n  IActionQueryProcess,\n  IActorQueryProcessOutput,\n  IActorQueryProcessArgs,\n  IQueryProcessSequential,\n} from '@comunica/bus-query-process';\nimport {\n  ActorQueryProcess,\n} from '@comunica/bus-query-process';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest } from '@comunica/core';\nimport { ActionContextKey } from '@comunica/core';\n\n/**\n * A comunica Explain Parsed Query Process Actor.\n */\nexport class ActorQueryProcessExplainParsed extends ActorQueryProcess {\n  public readonly queryProcessor: IQueryProcessSequential;\n\n  public constructor(args: IActorQueryProcessExplainParsedArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionQueryProcess): Promise<IActorTest> {\n    if ((action.context.get(KeysInitQuery.explain) ||\n      action.context.get(new ActionContextKey('explain'))) !== 'parsed') {\n      throw new Error(`${this.name} can only explain in 'parsed' mode.`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionQueryProcess): Promise<IActorQueryProcessOutput> {\n    // Parse the query\n    const { operation } = await this.queryProcessor.parse(action.query, action.context);\n\n    return {\n      result: {\n        explain: true,\n        type: 'parsed',\n        data: operation,\n      },\n    };\n  }\n}\n\nexport interface IActorQueryProcessExplainParsedArgs extends IActorQueryProcessArgs {\n  queryProcessor: IQueryProcessSequential;\n}\n"]}