{"version":3,"file":"ActorAbstractMediaTypedFixed.js","sourceRoot":"","sources":["ActorAbstractMediaTypedFixed.ts"],"names":[],"mappings":";;;AAEA,uEAAoE;AAEpE,MAAsB,4BAAyC,SAAQ,iDAAmC;IAKxG,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,MAAM,KAAK,GAAW,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9F,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,KAAK,MAAM,CAAE,MAAM,EAAE,CAAE,GAAG,EAAE,KAAK,CAAE,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC3F,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;YAChD,CAAC;QACH,CAAC;QACD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACnE,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC/D,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,MAAU,EAAE,SAA6B,EAAE,OAAuB;QACxF,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC;YAC3D,MAAM,IAAI,KAAK,CAAC,4BAA4B,SAAS,EAAE,CAAC,CAAC;QAC3D,CAAC;QACD,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACvD,CAAC;IAWM,KAAK,CAAC,aAAa,CAAC,QAAwB;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,QAAwB;QACjD,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAEM,KAAK,CAAC,oBAAoB,CAAC,QAAwB;QACxD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,mBAAmB,CAAC,QAAwB;QACvD,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;CACF;AAhDD,oEAgDC","sourcesContent":["import type { IActionContext } from '@comunica/types';\nimport type { IActorArgsMediaTyped } from './ActorAbstractMediaTyped';\nimport { ActorAbstractMediaTyped } from './ActorAbstractMediaTyped';\n\nexport abstract class ActorAbstractMediaTypedFixed<HI, HT, HO> extends ActorAbstractMediaTyped<HI, HT, HO> {\n  public readonly mediaTypePriorities: Record<string, number>;\n  public readonly mediaTypeFormats: Record<string, string>;\n  public readonly priorityScale: number;\n\n  public constructor(args: IActorArgsMediaTypedFixed<HI, HT, HO>) {\n    super(args);\n    const scale: number = this.priorityScale || this.priorityScale === 0 ? this.priorityScale : 1;\n    if (this.mediaTypePriorities) {\n      for (const [ _index, [ key, value ]] of Object.entries(this.mediaTypePriorities).entries()) {\n        this.mediaTypePriorities[key] = scale * value;\n      }\n    }\n    this.mediaTypePriorities = Object.freeze(this.mediaTypePriorities);\n    this.mediaTypeFormats = Object.freeze(this.mediaTypeFormats);\n  }\n\n  public async testHandle(action: HI, mediaType: string | undefined, context: IActionContext): Promise<HT> {\n    if (!mediaType || !(mediaType in this.mediaTypePriorities)) {\n      throw new Error(`Unrecognized media type: ${mediaType}`);\n    }\n    return await this.testHandleChecked(action, context);\n  }\n\n  /**\n   * Check to see if this actor can handle the given action.\n   * The media type has already been checked before this is called.\n   *\n   * @param {ActionContext} context An optional context.\n   * @param {HI} action The action to test.\n   */\n  public abstract testHandleChecked(action: HI, context: IActionContext): Promise<HT>;\n\n  public async testMediaType(_context: IActionContext): Promise<boolean> {\n    return true;\n  }\n\n  public async getMediaTypes(_context: IActionContext): Promise<Record<string, number>> {\n    return this.mediaTypePriorities;\n  }\n\n  public async testMediaTypeFormats(_context: IActionContext): Promise<boolean> {\n    return true;\n  }\n\n  public async getMediaTypeFormats(_context: IActionContext): Promise<Record<string, string>> {\n    return this.mediaTypeFormats;\n  }\n}\n\nexport interface IActorArgsMediaTypedFixed<HI, HT, HO> extends IActorArgsMediaTyped<HI, HT, HO> {\n  /**\n   * A record of media types, with media type name as key, and its priority as value.\n   * Priorities are numbers between [0, 1].\n   * @range {json}\n   */\n  mediaTypePriorities: Record<string, number>;\n  /**\n   * A record of media types, with media type name as key, and its format IRI as value.\n   * @range {json}\n   */\n  mediaTypeFormats: Record<string, string>;\n  /**\n   * A multiplier for media type priorities.\n   * This can be used for keeping the original media types in place,\n   * but scaling all of their scores with a certain value.\n   * @range {double}\n   */\n  priorityScale?: number;\n}\n"]}