{"version":3,"file":"ActorQueryOperationUnion.js","sourceRoot":"","sources":["ActorQueryOperationUnion.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { MediatorRdfMetadataAccumulate } from '@comunica/bus-rdf-metadata-accumulate';\nimport type { IActorTest } from '@comunica/core';\nimport { MetadataValidationState } from '@comunica/metadata';\nimport type {\n  BindingsStream,\n  IQueryOperationResultBindings,\n  IActionContext,\n  IQueryOperationResult,\n  MetadataBindings,\n  MetadataQuads,\n  IQueryOperationResultQuads,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { UnionIterator } from 'asynciterator';\nimport { uniqTerms } from 'rdf-terms';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Union Query Operation Actor.\n */\nexport class ActorQueryOperationUnion extends ActorQueryOperationTypedMediated<Algebra.Union> {\n  public readonly mediatorRdfMetadataAccumulate: MediatorRdfMetadataAccumulate;\n\n  public constructor(args: IActorQueryOperationUnionArgs) {\n    super(args, 'union');\n  }\n\n  /**\n   * Takes the union of the given double array variables.\n   * Uniqueness is guaranteed.\n   * @param {string[][]} variables Double array of variables to take the union of.\n   * @return {string[]} The union of the given variables.\n   */\n  public static unionVariables(variables: RDF.Variable[][]): RDF.Variable[] {\n    return uniqTerms(variables.flat());\n  }\n\n  /**\n   * Takes the union of the given metadata array.\n   * It will ensure that the cardinality metadata value is properly calculated.\n   * @param {{[p: string]: any}[]} metadatas Array of metadata.\n   * @param bindings If the union of the variables field should also be taken.\n   * @param context The action context\n   * @param mediatorRdfMetadataAccumulate Mediator for metadata accumulation\n   * @return {{[p: string]: any}} Union of the metadata.\n   */\n  public static async unionMetadata<\n    Bindings extends boolean,\n    M extends (Bindings extends true ? MetadataBindings : MetadataQuads),\n  >(\n    metadatas: M[],\n    bindings: Bindings,\n    context: IActionContext,\n    mediatorRdfMetadataAccumulate: MediatorRdfMetadataAccumulate,\n    // eslint-disable-next-line function-paren-newline\n  ): Promise<M> {\n    let accumulatedMetadata: M = <M> (await mediatorRdfMetadataAccumulate\n      .mediate({ mode: 'initialize', context })).metadata;\n\n    // Accumulate cardinality\n    for (const appendingMetadata of metadatas) {\n      accumulatedMetadata = <any> {\n        ...appendingMetadata,\n        ...(await mediatorRdfMetadataAccumulate\n          .mediate({\n            mode: 'append',\n            accumulatedMetadata: <any> accumulatedMetadata,\n            appendingMetadata: <any> appendingMetadata,\n            context,\n          })).metadata,\n      };\n    }\n\n    // Create new metadata state\n    accumulatedMetadata.state = new MetadataValidationState();\n\n    // Propagate metadata invalidations\n    const invalidateListener = (): void => accumulatedMetadata.state.invalidate();\n    for (const metadata of metadatas) {\n      metadata.state.addInvalidateListener(invalidateListener);\n    }\n\n    // Union variables\n    if (bindings) {\n      accumulatedMetadata.variables = ActorQueryOperationUnion\n        .unionVariables(metadatas.map(metadata => metadata.variables));\n    }\n\n    return accumulatedMetadata;\n  }\n\n  public async testOperation(_operation: Algebra.Union, _context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Union, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    // Determine the type over which we are taking a union\n    const outputsRaw = await Promise.all(operation.input\n      .map(subOperation => this.mediatorQueryOperation.mediate({ operation: subOperation, context })));\n    let outputType: string | undefined;\n    for (const output of outputsRaw) {\n      if (outputType === undefined) {\n        outputType = output.type;\n      } else if (outputType !== output.type) {\n        throw new Error(`Unable to union ${outputType} and ${output.type}`);\n      }\n    }\n\n    // Handle bindings\n    if (outputType === 'bindings' || operation.input.length === 0) {\n      const outputs: IQueryOperationResultBindings[] = outputsRaw.map(ActorQueryOperation.getSafeBindings);\n\n      const bindingsStream: BindingsStream = new UnionIterator(outputs.map(\n        (output: IQueryOperationResultBindings) => output.bindingsStream,\n      ), { autoStart: false });\n\n      const metadata: () => Promise<MetadataBindings> = () => Promise.all(outputs.map(output => output.metadata()))\n        .then(subMeta => ActorQueryOperationUnion\n          .unionMetadata(subMeta, true, context, this.mediatorRdfMetadataAccumulate));\n      return { type: 'bindings', bindingsStream, metadata };\n    }\n\n    // Handle quads\n    if (outputType === 'quads') {\n      const outputs: IQueryOperationResultQuads[] = outputsRaw.map(ActorQueryOperation.getSafeQuads);\n\n      const quadStream = new UnionIterator(outputs.map(\n        (output: IQueryOperationResultQuads) => output.quadStream,\n      ), { autoStart: false });\n\n      const metadata: () => Promise<MetadataQuads> = () => Promise.all(outputs.map(output => output.metadata()))\n        .then(subMeta => ActorQueryOperationUnion\n          .unionMetadata(subMeta, false, context, this.mediatorRdfMetadataAccumulate));\n      return { type: 'quads', quadStream, metadata };\n    }\n\n    // Throw otherwise\n    throw new Error(`Unable to union ${outputType}`);\n  }\n}\n\nexport interface IActorQueryOperationUnionArgs extends IActorQueryOperationTypedMediatedArgs {\n  mediatorRdfMetadataAccumulate: MediatorRdfMetadataAccumulate;\n}\n"]}