import type { IActionOptimizeQueryOperation, IActorOptimizeQueryOperationOutput } from '@comunica/bus-optimize-query-operation';
import { ActorOptimizeQueryOperation } from '@comunica/bus-optimize-query-operation';
import type { MediatorQuerySourceIdentify } from '@comunica/bus-query-source-identify';
import type { IActorArgs, IActorTest } from '@comunica/core';
import { Algebra } from 'sparqlalgebrajs';
/**
 * A comunica Set Seed Sources Quadpattern IRIs Optimize Query Operation Actor.
 */
export declare class ActorOptimizeQueryOperationSetSeedSourcesQuadpatternIris extends ActorOptimizeQueryOperation {
    readonly mediatorQuerySourceIdentify: MediatorQuerySourceIdentify;
    private readonly extractSubjects;
    private readonly extractPredicates;
    private readonly extractObjects;
    private readonly extractGraphs;
    private readonly extractVocabIris;
    constructor(args: IActorOptimizeQueryOperationSetSeedSourcesQuadpatternIrisArgs);
    test(_action: IActionOptimizeQueryOperation): Promise<IActorTest>;
    run(action: IActionOptimizeQueryOperation): Promise<IActorOptimizeQueryOperationOutput>;
    extractIrisFromOperation(operation: Algebra.Operation): string[];
}
export interface IActorOptimizeQueryOperationSetSeedSourcesQuadpatternIrisArgs extends IActorArgs<IActionOptimizeQueryOperation, IActorTest, IActorOptimizeQueryOperationOutput> {
    /**
     * Mediator for identifying query sources.
     */
    mediatorQuerySourceIdentify: MediatorQuerySourceIdentify;
    /**
     * If IRIs should be extracted from subject positions.
     * @default {true}
     */
    extractSubjects: boolean;
    /**
     * If IRIs should be extracted from predicate positions.
     * @default {false}
     */
    extractPredicates: boolean;
    /**
     * If IRIs should be extracted from object positions.
     * @default {true}
     */
    extractObjects: boolean;
    /**
     * If IRIs should be extracted from graph positions.
     * @default {true}
     */
    extractGraphs: boolean;
    /**
     * If object IRIs should be extracted if the predicate is rdf:type.
     * @default {false}
     */
    extractVocabIris: boolean;
}
