{"version":3,"file":"XmlSerializer.js","sourceRoot":"","sources":["XmlSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * A very simple XML serializer\n */\nexport class XmlSerializer {\n  private readonly stack: string[] = [];\n\n  public static header = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n`;\n\n  public constructor() {}\n\n  /**\n   *\n   * @param name should be a valid XML tag name\n   * @param attributes keys should be valid attribute names\n   */\n  public open(name: string, attributes?: Record<string, string>): string {\n    const res = `${this.identation() + this.formatTag(name, attributes, 'open')}\\n`;\n    this.stack.push(name);\n    return res;\n  }\n\n  public close(): string {\n    const name = this.stack.pop();\n    if (name === undefined) {\n      throw new Error('There is no tag left to close');\n    }\n    return `${this.identation() + this.formatTag(name, {}, 'close')}\\n`;\n  }\n\n  public serializeNode(node: IXmlNode): string {\n    if (node.children === undefined) {\n      return `${this.identation() + this.formatTag(node.name, node.attributes, 'self-closing')}\\n`;\n    }\n    if (typeof node.children === 'string') {\n      return `${this.identation() + this.formatTag(node.name, node.attributes, 'open') + this.escape(node.children) + this.formatTag(node.name, {}, 'close')}\\n`;\n    }\n    const parts = [];\n    parts.push(`${this.identation() + this.formatTag(node.name, node.attributes, 'open')}\\n`);\n    this.stack.push(node.name);\n    for (const child of node.children) {\n      parts.push(this.serializeNode(child));\n    }\n    this.stack.pop();\n    parts.push(`${this.identation() + this.formatTag(node.name, {}, 'close')}\\n`);\n    return parts.join('');\n  }\n\n  private identation(): string {\n    return this.stack.map(_ => '  ').join('');\n  }\n\n  private formatTag(\n    name: string,\n    attributes: Record<string, string> | undefined,\n    state: 'open' | 'close' | 'self-closing',\n  ): string {\n    // eslint-disable-next-line ts/restrict-template-expressions\n    return `<${state === 'close' ? '/' : ''}${name}${Object.entries(attributes ?? {}).map(attr => ` ${attr[0]}=\"${this.escape(attr[1])}\"`)}${state === 'self-closing' ? '/' : ''}>`;\n  }\n\n  private escape(text: string): string {\n    return text.replaceAll(/[\"&'<>]/gu, <(substring: string) => string> ((char: '\"' | '&' | '\\'' | '<' | '>') => {\n      switch (char) {\n        case '<': return '&lt;';\n        case '>': return '&gt;';\n        case '&': return '&amp;';\n        case '\\'': return '&apos;';\n        case '\"': return '&quot;';\n      }\n    }));\n  }\n}\n\nexport interface IXmlNode {\n  name: string;\n  attributes?: Record<string, string>;\n  children?: (IXmlNode[]) | string;\n}\n"]}