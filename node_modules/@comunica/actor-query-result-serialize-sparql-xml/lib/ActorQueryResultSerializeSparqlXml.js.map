{"version":3,"file":"ActorQueryResultSerializeSparqlXml.js","sourceRoot":"","sources":["ActorQueryResultSerializeSparqlXml.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput,\n} from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type {\n  IActionContext,\n  IQueryOperationResultBindings,\n  IQueryOperationResultBoolean,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { wrap } from 'asynciterator';\nimport { Readable } from 'readable-stream';\nimport { XmlSerializer, type IXmlNode } from './XmlSerializer';\n\n/**\n * A comunica sparql-results+xml Serialize Actor.\n */\nexport class ActorQueryResultSerializeSparqlXml extends ActorQueryResultSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/sparql-results+xml\": 0.8\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/sparql-results+xml\": \"http://www.w3.org/ns/formats/SPARQL_Results_XML\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  /**\n   * Converts an RDF term to its object-based XML representation.\n   * @param {RDF.Term} value An RDF term.\n   * @param {string} key A variable name, '?' must be included as a prefix.\n   * @return {IXmlNode} An object-based XML tag.\n   */\n  public static bindingToXmlBindings(value: RDF.Term, key: RDF.Variable): IXmlNode {\n    return { name: 'binding', attributes: { name: key.value }, children: [ this.valueToXmlValue(value) ]};\n  }\n\n  public static valueToXmlValue(value: RDF.Term): IXmlNode {\n    let attributes;\n    switch (value.termType) {\n      case 'Literal':\n        if (value.language) {\n          attributes = { 'xml:lang': value.language };\n        } else if (value.datatype && value.datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n          attributes = { datatype: value.datatype.value };\n        } else {\n          attributes = {};\n        }\n        return { name: 'literal', attributes, children: value.value };\n      case 'BlankNode':\n        return { name: 'bnode', children: value.value };\n      case 'Quad':\n        return {\n          name: 'triple',\n          children: [\n            { name: 'subject', children: [ this.valueToXmlValue(value.subject) ]},\n            { name: 'predicate', children: [ this.valueToXmlValue(value.predicate) ]},\n            { name: 'object', children: [ this.valueToXmlValue(value.object) ]},\n          ],\n        };\n      default:\n        return { name: 'uri', children: value.value };\n    }\n  }\n\n  public override async testHandleChecked(action: IActionSparqlSerialize, _context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'boolean' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or booleans.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, _mediaType: string, _context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    const serializer = new XmlSerializer();\n    const metadata = await (<IQueryOperationResultBindings> action).metadata();\n\n    data.push(XmlSerializer.header);\n    data.push(serializer.open('sparql', { xmlns: 'http://www.w3.org/2005/sparql-results#' }));\n    data.push(\n      serializer.serializeNode({\n        name: 'head',\n        children: metadata.variables.map(variable => ({ name: 'variable', attributes: { name: variable.value }})),\n      }),\n    );\n\n    if (action.type === 'bindings') {\n      function* end(): Generator<string, void> {\n        yield serializer.close();\n        yield serializer.close();\n      }\n      data.push(serializer.open('results'));\n      const stream = wrap((<IQueryOperationResultBindings> action).bindingsStream).map(\n        (bindings: RDF.Bindings) => serializer.serializeNode({\n          name: 'result',\n          children: [ ...bindings ].map(\n            ([ key, value ]) => ActorQueryResultSerializeSparqlXml.bindingToXmlBindings(value, key),\n          ),\n        }),\n      ).append(wrap(end()));\n      data.wrap(<any> stream);\n    } else {\n      try {\n        const result = await (<IQueryOperationResultBoolean> action).execute();\n        data.push(serializer.serializeNode({ name: 'boolean', children: result.toString() }));\n        data.push(serializer.close());\n        setTimeout(() => data.push(null));\n      } catch (error: unknown) {\n        setTimeout(() => data.emit('error', error));\n      }\n    }\n\n    return { data };\n  }\n}\n"]}