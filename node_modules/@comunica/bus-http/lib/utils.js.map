{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":";;;AAAA,oHAAoH;AACpH,oDAAqD;AACrD,2CAAwC;AAExC;;;;GAIG;AACI,KAAK,UAAU,4BAA4B,CAAC,GAAW,EAAE,YAAsB;IACpF,iCAAiC;IACjC,IAAI,YAAY,CAAC,MAAM,IAAI,GAAG,EAAE,CAAC;QAC/B,6CAA6C;QAC7C,IAAI,UAAU,GAAG,gBAAgB,CAAC;QAClC,IAAI,YAAY,CAAC,IAAI,EAAE,CAAC;YACtB,MAAM,cAAc,GAAG,qBAAS,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACnE,UAAU,GAAG,MAAM,eAAe,CAAC,cAAc,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,iBAAiB,YAAY,CAAC,MAAM,OAAO,UAAU,EAAE,CAAC,CAAC;IAClG,CAAC;IAED,2CAA2C;IAC3C,MAAM,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC;AACpC,CAAC;AAdD,oEAcC","sourcesContent":["// Use require instead of import for default exports, to be compatible with variants of esModuleInterop in tsconfig.\nimport stringifyStream = require('stream-to-string');\nimport { ActorHttp } from './ActorHttp';\n\n/**\n * Check if the http response is valid, and throw an error if not.\n * @param url The original URL that was to be updated.\n * @param httpResponse The update response.\n */\nexport async function validateAndCloseHttpResponse(url: string, httpResponse: Response): Promise<void> {\n  // Check if update was successful\n  if (httpResponse.status >= 400) {\n    // Consume the body, to avoid process to hang\n    let bodyString = 'empty response';\n    if (httpResponse.body) {\n      const responseStream = ActorHttp.toNodeReadable(httpResponse.body);\n      bodyString = await stringifyStream(responseStream);\n    }\n    throw new Error(`Could not update ${url} (HTTP status ${httpResponse.status}):\\n${bodyString}`);\n  }\n\n  // Close response body, as we don't need it\n  await httpResponse.body?.cancel();\n}\n"]}