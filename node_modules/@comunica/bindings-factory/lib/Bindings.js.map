{"version":3,"file":"Bindings.js","sourceRoot":"","sources":["Bindings.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IBindingsContextMergeHandler } from '@comunica/bus-merge-bindings-context';\nimport { ActionContext } from '@comunica/core';\nimport type { IActionContext, IActionContextKey } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Map } from 'immutable';\nimport { bindingsToString } from './bindingsToString';\n\n/**\n * An immutable.js-based Bindings object.\n */\nexport class Bindings implements RDF.Bindings {\n  public readonly type = 'bindings';\n\n  private readonly dataFactory: RDF.DataFactory;\n  private readonly entries: Map<string, RDF.Term>;\n  private readonly contextHolder: IContextHolder | undefined;\n\n  public constructor(dataFactory: RDF.DataFactory, entries: Map<string, RDF.Term>, contextHolder?: IContextHolder) {\n    this.dataFactory = dataFactory;\n    this.entries = entries;\n    this.contextHolder = contextHolder;\n  }\n\n  public has(key: RDF.Variable | string): boolean {\n    return this.entries.has(typeof key === 'string' ? key : key.value);\n  }\n\n  public get(key: RDF.Variable | string): RDF.Term | undefined {\n    return this.entries.get(typeof key === 'string' ? key : key.value);\n  }\n\n  public set(key: RDF.Variable | string, value: RDF.Term): Bindings {\n    return new Bindings(\n      this.dataFactory,\n      this.entries.set(typeof key === 'string' ? key : key.value, value),\n      this.contextHolder,\n    );\n  }\n\n  public delete(key: RDF.Variable | string): Bindings {\n    return new Bindings(\n      this.dataFactory,\n      this.entries.delete(typeof key === 'string' ? key : key.value),\n      this.contextHolder,\n    );\n  }\n\n  public keys(): Iterable<RDF.Variable> {\n    return this.mapIterable<string, RDF.Variable>(\n      this.iteratorToIterable(this.entries.keys()),\n      key => this.dataFactory.variable!(key),\n    );\n  }\n\n  public values(): Iterable<RDF.Term> {\n    return this.iteratorToIterable(this.entries.values());\n  }\n\n  public forEach(fn: (value: RDF.Term, key: RDF.Variable) => any): void {\n    for (const [ key, value ] of this.entries.entries()) {\n      fn(value, this.dataFactory.variable!(key));\n    }\n  }\n\n  public get size(): number {\n    return this.entries.size;\n  }\n\n  public [Symbol.iterator](): Iterator<[RDF.Variable, RDF.Term]> {\n    return this.mapIterable<[string, RDF.Term], [RDF.Variable, RDF.Term]>(\n      this.iteratorToIterable(<Iterator<[string, RDF.Term]>> this.entries.entries()),\n      ([ key, value ]) => [ this.dataFactory.variable!(key), value ],\n    )[Symbol.iterator]();\n  }\n\n  public equals(other: RDF.Bindings | null | undefined): boolean {\n    if (!other) {\n      return false;\n    }\n    if (this === other) {\n      return true;\n    }\n\n    // First check if size is equal\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    // Then check if keys and values are equal\n    for (const key of this.keys()) {\n      if (!this.get(key)?.equals(other.get(key))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public filter(fn: (value: RDF.Term, key: RDF.Variable) => boolean): Bindings {\n    return new Bindings(this.dataFactory, Map(<any> this.entries\n      .filter((value, key) => fn(value, this.dataFactory.variable!(key)))), this.contextHolder);\n  }\n\n  public map(fn: (value: RDF.Term, key: RDF.Variable) => RDF.Term): Bindings {\n    return new Bindings(this.dataFactory, Map(<any> this.entries\n      .map((value, key) => fn(value, this.dataFactory.variable!(key)))), this.contextHolder);\n  }\n\n  public merge(other: RDF.Bindings | Bindings): Bindings | undefined {\n    // Determine the union of keys\n    const keys = new Set([\n      ...this.iteratorToIterable(this.entries.keys()),\n      ...[ ...other.keys() ].map(key => key.value),\n    ]);\n\n    // Collect entries\n    const entries: [string, RDF.Term][] = [];\n    for (const key of keys) {\n      const left = this.entries.get(key)!;\n      const right = other.get(this.dataFactory.variable!(key));\n      if (left && right && !left.equals(right)) {\n        return;\n      }\n      const value = left || right;\n      entries.push([ key, value ]);\n    }\n\n    return this.createBindingsWithContexts(entries, other);\n  }\n\n  public mergeWith(\n    merger: (self: RDF.Term, other: RDF.Term, key: RDF.Variable) => RDF.Term,\n    other: RDF.Bindings | Bindings,\n  ): Bindings {\n    // Determine the union of keys\n    const keys = new Set([\n      ...this.iteratorToIterable(this.entries.keys()),\n      ...[ ...other.keys() ].map(key => key.value),\n    ]);\n\n    // Collect entries\n    const entries: [string, RDF.Term][] = [];\n    for (const key of keys) {\n      const variable = this.dataFactory.variable!(key);\n      const left = this.entries.get(key)!;\n      const right = other.get(variable);\n      let value: RDF.Term;\n      if (left && right && !left.equals(right)) {\n        value = merger(left, right, variable);\n      } else {\n        value = left || right;\n      }\n      entries.push([ key, value ]);\n    }\n\n    return this.createBindingsWithContexts(entries, other);\n  }\n\n  protected createBindingsWithContexts(entries: [string, RDF.Term][], other: RDF.Bindings | Bindings): Bindings {\n    // If any context is empty, we skip merging contexts\n    if (this.contextHolder && this.contextHolder.context) {\n      let mergedContext = this.contextHolder.context;\n      // Only merge if the other has a context\n      if ('contextHolder' in other && other.contextHolder && other.contextHolder.context) {\n        mergedContext = Bindings\n          .mergeContext(this.contextHolder.contextMergeHandlers, mergedContext, other.contextHolder.context);\n      }\n      return new Bindings(\n        this.dataFactory,\n        Map(entries),\n        { contextMergeHandlers: this.contextHolder.contextMergeHandlers, context: mergedContext },\n      );\n    }\n\n    // Otherwise, use optional context from other\n    return new Bindings(this.dataFactory, Map(entries), (<Bindings> other).contextHolder);\n  }\n\n  private static mergeContext(\n    contextMergeHandlers: Record<string, IBindingsContextMergeHandler<any>>,\n    context: IActionContext,\n    otherContext: IActionContext,\n  ): IActionContext {\n    // All keys can contain duplicates, we prevent this by checking our built datamap for duplicates\n    const allKeys = [ ...context.keys(), ...otherContext.keys() ];\n    // Map we build up with merged context values\n    const newContextData: Record<string, any> = {};\n    const handledKeys: Record<string, number> = {};\n\n    // Set of names of keys in other context to allow for constant time lookup\n    const keysSetOtherContext = new Set(\n      otherContext.keys().map(key => key.name),\n    );\n    const keysBothContext = context.keys().filter(\n      key => keysSetOtherContext.has(key.name),\n    );\n\n    for (const key of allKeys) {\n      // If duplicate key, we continue iterating\n      if (handledKeys[key.name] === 1) {\n        continue;\n      }\n\n      // We've processed this key and shouldn't repeat it\n      handledKeys[key.name] = 1;\n\n      // Determine whether this key occurs in both contexts\n      const occursInBoth = keysBothContext.some(x => x.name === key.name);\n\n      // If we execute this function, we already check for existence of context merge handlers\n      // This if statement is first as the most likely case for non-empty contexts is that we have mergehandlers\n      // and both contexts have an entry\n      if (contextMergeHandlers[key.name] && occursInBoth) {\n        newContextData[key.name] = contextMergeHandlers[key.name]\n          .run(context.get(key), otherContext.get(key));\n        continue;\n      }\n      // If we have no merge handler, but both contexts have entries for key, we don't add it to new context\n      if (!contextMergeHandlers[key.name] && occursInBoth) {\n        continue;\n      }\n\n      // If key doesn't occur in own context, it must be in other context\n      // (if we get to this point, the key doesn't occur in both)\n      if (!context.get(key)) {\n        newContextData[key.name] = otherContext.get(key);\n        continue;\n      }\n      // This could likely be else statement, but don't want to risk it\n      if (!otherContext.get(key)) {\n        newContextData[key.name] = context.get(key);\n      }\n    }\n    return new ActionContext(newContextData);\n  }\n\n  public setContextEntry<V>(key: IActionContextKey<V>, value: any): Bindings {\n    return this.setContextEntryRaw(key, value);\n  }\n\n  public setContextEntryRaw<V>(key: IActionContextKey<V>, value: any): Bindings {\n    if (this.contextHolder && this.contextHolder.context) {\n      return new Bindings(\n        this.dataFactory,\n        this.entries,\n        {\n          contextMergeHandlers: this.contextHolder.contextMergeHandlers,\n          context: this.contextHolder.context.set(key, value),\n        },\n      );\n    }\n    return new Bindings(\n      this.dataFactory,\n      this.entries,\n      {\n        contextMergeHandlers: this.contextHolder?.contextMergeHandlers ?? {},\n        context: new ActionContext().set(key, value),\n      },\n    );\n  }\n\n  public deleteContextEntry<V>(key: IActionContextKey<V>): Bindings {\n    return this.deleteContextEntryRaw(key);\n  }\n\n  public deleteContextEntryRaw<V>(key: IActionContextKey<V>): Bindings {\n    if (this.contextHolder) {\n      return new Bindings(\n        this.dataFactory,\n        this.entries,\n        {\n          contextMergeHandlers: this.contextHolder.contextMergeHandlers,\n          context: this.contextHolder.context?.delete(key),\n        },\n      );\n    }\n    return new Bindings(this.dataFactory, this.entries);\n  }\n\n  public getContext(): IActionContext | undefined {\n    return this.contextHolder?.context;\n  }\n\n  public getContextEntry<V>(key: IActionContextKey<V>): V | undefined {\n    return this.getContext()?.get(key);\n  }\n\n  public toString(): string {\n    return bindingsToString(this);\n  }\n\n  protected* mapIterable<T, U>(iterable: Iterable<T>, callback: (value: T) => U): Iterable<U> {\n    for (const x of iterable) {\n      yield callback(x);\n    }\n  }\n\n  protected iteratorToIterable<T>(iterator: Iterator<T>): Iterable<T> {\n    return {\n      [Symbol.iterator]: () => iterator,\n    };\n  }\n}\n\nexport interface IContextHolder {\n  contextMergeHandlers: Record<string, IBindingsContextMergeHandler<any>>;\n  context?: IActionContext;\n}\n"]}