{"version":3,"file":"BindingsFactory.js","sourceRoot":"","sources":["BindingsFactory.ts"],"names":[],"mappings":";;;AAGA,yCAAgC;AAChC,uDAA+C;AAC/C,yCAAsC;AAEtC;;GAEG;AACH,MAAa,eAAe;IAI1B,YACE,cAA2B,IAAI,8BAAW,EAAE,EAC5C,oBAAwE;QAExE,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IACnD,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,MAAM,CACxB,4BAA0D,EAC1D,OAAuB;QAEvB,OAAO,IAAI,eAAe,CACxB,IAAI,8BAAW,EAAE,EACjB,CAAC,MAAM,4BAA4B,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,aAAa,CACxE,CAAC;IACJ,CAAC;IAEM,QAAQ,CAAC,UAAsC,EAAE;QACtD,OAAO,IAAI,mBAAQ,CACjB,IAAI,CAAC,WAAW,EAChB,IAAA,eAAG,EAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAAE,EAAE,CAAC,CAAE,GAAG,CAAC,KAAK,EAAE,KAAK,CAAE,CAAC,CAAC,EAC1D,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC,SAAS,CAC5F,CAAC;IACJ,CAAC;IAEM,YAAY,CAAC,QAAsB;QACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAE,GAAG,QAAQ,CAAE,CAAC,CAAC;IACxC,CAAC;IAEM,UAAU,CAAC,MAAgC;QAChD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAAE,EAAE,CAAC,CAAE,IAAI,CAAC,WAAW,CAAC,QAAS,CAAC,GAAG,CAAC,EAAE,KAAK,CAAE,CAAC,CAAC,CAAC;IACnH,CAAC;CACF;AArCD,0CAqCC","sourcesContent":["import type { IBindingsContextMergeHandler, MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Map } from 'immutable';\nimport { DataFactory } from 'rdf-data-factory';\nimport { Bindings } from './Bindings';\n\n/**\n * A Bindings factory that provides Bindings backed by immutable.js.\n */\nexport class BindingsFactory implements RDF.BindingsFactory {\n  private readonly dataFactory: RDF.DataFactory;\n  private readonly contextMergeHandlers: Record<string, IBindingsContextMergeHandler<any>> | undefined;\n\n  public constructor(\n    dataFactory: DataFactory = new DataFactory(),\n    contextMergeHandlers?: Record<string, IBindingsContextMergeHandler<any>>,\n  ) {\n    this.dataFactory = dataFactory;\n    this.contextMergeHandlers = contextMergeHandlers;\n  }\n\n  public static async create(\n    mediatorMergeBindingsContext: MediatorMergeBindingsContext,\n    context: IActionContext,\n  ): Promise<BindingsFactory> {\n    return new BindingsFactory(\n      new DataFactory(),\n      (await mediatorMergeBindingsContext.mediate({ context })).mergeHandlers,\n    );\n  }\n\n  public bindings(entries: [RDF.Variable, RDF.Term][] = []): Bindings {\n    return new Bindings(\n      this.dataFactory,\n      Map(entries.map(([ key, value ]) => [ key.value, value ])),\n      this.contextMergeHandlers ? { contextMergeHandlers: this.contextMergeHandlers } : undefined,\n    );\n  }\n\n  public fromBindings(bindings: RDF.Bindings): Bindings {\n    return this.bindings([ ...bindings ]);\n  }\n\n  public fromRecord(record: Record<string, RDF.Term>): Bindings {\n    return this.bindings(Object.entries(record).map(([ key, value ]) => [ this.dataFactory.variable!(key), value ]));\n  }\n}\n"]}