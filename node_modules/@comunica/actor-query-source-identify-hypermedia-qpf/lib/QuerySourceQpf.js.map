{"version":3,"file":"QuerySourceQpf.js","sourceRoot":"","sources":["QuerySourceQpf.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISearchForm } from '@comunica/actor-rdf-metadata-extract-hydra-controls';\nimport type { BindingsFactory } from '@comunica/bindings-factory';\nimport type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';\nimport { filterMatchingQuotedQuads, quadsToBindings } from '@comunica/bus-query-source-identify';\nimport type { MediatorRdfMetadata, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport type { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';\nimport { KeysQueryOperation } from '@comunica/context-entries';\nimport type {\n  IQuerySource,\n  BindingsStream,\n  IActionContext,\n  FragmentSelectorShape,\n  IQueryBindingsOptions,\n  MetadataBindings,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { ArrayIterator, TransformIterator, wrap } from 'asynciterator';\nimport { DataFactory } from 'rdf-data-factory';\nimport { termToString } from 'rdf-string';\nimport { termToString as termToStringTtl } from 'rdf-string-ttl';\nimport {\n  everyTermsNested,\n  mapTerms,\n  matchPattern,\n} from 'rdf-terms';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { Factory } from 'sparqlalgebrajs';\n\nconst AF = new Factory();\nconst DF = new DataFactory<RDF.BaseQuad>();\n\nexport class QuerySourceQpf implements IQuerySource {\n  protected static readonly SELECTOR_SHAPE: FragmentSelectorShape = {\n    type: 'operation',\n    operation: {\n      operationType: 'pattern',\n      pattern: AF.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), DF.variable('g')),\n    },\n    variablesOptional: [\n      DF.variable('s'),\n      DF.variable('p'),\n      DF.variable('o'),\n      DF.variable('g'),\n    ],\n  };\n\n  protected static readonly SELECTOR_SHAPE_BR: FragmentSelectorShape = {\n    type: 'operation',\n    operation: {\n      operationType: 'pattern',\n      pattern: AF.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), DF.variable('g')),\n    },\n    variablesOptional: [\n      DF.variable('s'),\n      DF.variable('p'),\n      DF.variable('o'),\n      DF.variable('g'),\n    ],\n    filterBindings: true,\n  };\n\n  public readonly searchForm: ISearchForm;\n\n  private readonly mediatorMetadata: MediatorRdfMetadata;\n  private readonly mediatorMetadataExtract: MediatorRdfMetadataExtract;\n  private readonly mediatorDereferenceRdf: MediatorDereferenceRdf;\n  private readonly bindingsFactory: BindingsFactory;\n\n  public readonly referenceValue: string;\n  private readonly subjectUri: string;\n  private readonly predicateUri: string;\n  private readonly objectUri: string;\n  private readonly graphUri?: string;\n  private readonly url: string;\n  private readonly defaultGraph?: RDF.NamedNode;\n  private readonly bindingsRestricted: boolean;\n  private readonly cachedQuads: Record<string, AsyncIterator<RDF.Quad>>;\n\n  public constructor(\n    mediatorMetadata: MediatorRdfMetadata,\n    mediatorMetadataExtract: MediatorRdfMetadataExtract,\n    mediatorDereferenceRdf: MediatorDereferenceRdf,\n    bindingsFactory: BindingsFactory,\n    subjectUri: string,\n    predicateUri: string,\n    objectUri: string,\n    graphUri: string | undefined,\n    url: string,\n    metadata: Record<string, any>,\n    bindingsRestricted: boolean,\n    initialQuads?: RDF.Stream,\n  ) {\n    this.referenceValue = url;\n    this.mediatorMetadata = mediatorMetadata;\n    this.mediatorMetadataExtract = mediatorMetadataExtract;\n    this.mediatorDereferenceRdf = mediatorDereferenceRdf;\n    this.bindingsFactory = bindingsFactory;\n    this.subjectUri = subjectUri;\n    this.predicateUri = predicateUri;\n    this.objectUri = objectUri;\n    this.graphUri = graphUri;\n    this.url = url;\n    this.bindingsRestricted = bindingsRestricted;\n    this.cachedQuads = {};\n    const searchForm = this.getSearchForm(metadata);\n    if (!searchForm) {\n      throw new Error('Illegal state: found no TPF/QPF search form anymore in metadata.');\n    }\n    this.searchForm = searchForm;\n    this.defaultGraph = metadata.defaultGraph ? DF.namedNode(metadata.defaultGraph) : undefined;\n    if (initialQuads) {\n      let wrappedQuads: AsyncIterator<RDF.Quad> = wrap<RDF.Quad>(initialQuads);\n      if (this.defaultGraph) {\n        wrappedQuads = this.reverseMapQuadsToDefaultGraph(wrappedQuads);\n      }\n      wrappedQuads.setProperty('metadata', metadata);\n      this.cacheQuads(wrappedQuads, DF.variable(''), DF.variable(''), DF.variable(''), DF.variable(''));\n    }\n  }\n\n  public async getSelectorShape(): Promise<FragmentSelectorShape> {\n    return this.bindingsRestricted ? QuerySourceQpf.SELECTOR_SHAPE_BR : QuerySourceQpf.SELECTOR_SHAPE;\n  }\n\n  public queryBindings(\n    operation: Algebra.Operation,\n    context: IActionContext,\n    options?: IQueryBindingsOptions,\n  ): BindingsStream {\n    if (operation.type !== 'pattern') {\n      throw new Error(`Attempted to pass non-pattern operation '${operation.type}' to QuerySourceQpf`);\n    }\n\n    const unionDefaultGraph = Boolean(context.get(KeysQueryOperation.unionDefaultGraph));\n\n    // Create an async iterator from the matched quad stream\n    let it = this.match(\n      operation.subject,\n      operation.predicate,\n      operation.object,\n      operation.graph,\n      unionDefaultGraph,\n      context,\n      options,\n    );\n\n    it = filterMatchingQuotedQuads(operation, it);\n    return quadsToBindings(it, operation, this.bindingsFactory, unionDefaultGraph);\n  }\n\n  /**\n   * Get a first QPF search form.\n   * @param {{[p: string]: any}} metadata A metadata object.\n   * @return {ISearchForm} A search form, or null if none could be found.\n   */\n  public getSearchForm(metadata: Record<string, any>): ISearchForm | undefined {\n    if (!metadata.searchForms || !metadata.searchForms.values) {\n      return;\n    }\n\n    // Find a quad pattern or triple pattern search form\n    const { searchForms } = metadata;\n    for (const searchForm of searchForms.values) {\n      if (this.graphUri &&\n        this.subjectUri in searchForm.mappings &&\n        this.predicateUri in searchForm.mappings &&\n        this.objectUri in searchForm.mappings &&\n        this.graphUri in searchForm.mappings &&\n        Object.keys(searchForm.mappings).length === 4) {\n        return searchForm;\n      }\n      if (this.subjectUri in searchForm.mappings &&\n        this.predicateUri in searchForm.mappings &&\n        this.objectUri in searchForm.mappings &&\n        Object.keys(searchForm.mappings).length === 3) {\n        return searchForm;\n      }\n    }\n  }\n\n  /**\n   * Create a QPF fragment IRI for the given quad pattern.\n   * @param {ISearchForm} searchForm A search form.\n   * @param {Term} subject A term.\n   * @param {Term} predicate A term.\n   * @param {Term} object A term.\n   * @param {Term} graph A term.\n   * @return {string} A URI.\n   */\n  public createFragmentUri(\n    searchForm: ISearchForm,\n    subject: RDF.Term,\n    predicate: RDF.Term,\n    object: RDF.Term,\n    graph: RDF.Term,\n  ): string {\n    const entries: Record<string, string> = {};\n    const input = [\n      { uri: this.subjectUri, term: subject },\n      { uri: this.predicateUri, term: predicate },\n      { uri: this.objectUri, term: object },\n      { uri: this.graphUri, term: graph },\n    ];\n    for (const entry of input) {\n      // If bindingsRestricted, also pass variables, so the server knows how to bind values.\n      if (entry.uri && (this.bindingsRestricted || (entry.term.termType !== 'Variable' &&\n        (entry.term.termType !== 'Quad' || everyTermsNested(entry.term, value => value.termType !== 'Variable'))))) {\n        entries[entry.uri] = termToString(entry.term);\n      }\n    }\n    return searchForm.getUri(entries);\n  }\n\n  protected match(\n    subject: RDF.Term,\n    predicate: RDF.Term,\n    object: RDF.Term,\n    graph: RDF.Term,\n    unionDefaultGraph: boolean,\n    context: IActionContext,\n    options?: IQueryBindingsOptions,\n  ): AsyncIterator<RDF.Quad> {\n    // If we are querying the default graph,\n    // and the source has an overridden value for the default graph (such as QPF can provide),\n    // we override the graph parameter with that value.\n    let modifiedGraph = false;\n    if (graph.termType === 'DefaultGraph') {\n      if (this.defaultGraph) {\n        modifiedGraph = true;\n        graph = this.defaultGraph;\n      } else if (Object.keys(this.searchForm.mappings).length === 4 && !this.defaultGraph) {\n        // If the sd:defaultGraph is not declared on a QPF endpoint\n        if (unionDefaultGraph) {\n          // With union-default-graph, take union of graphs.\n          graph = DF.variable('g');\n        } else {\n          // Without union-default-graph, the default graph must be empty.\n          const quads = new ArrayIterator<RDF.Quad>([], { autoStart: false });\n          quads.setProperty('metadata', {\n            requestTime: 0,\n            cardinality: { type: 'exact', value: 0 },\n            first: null,\n            next: null,\n            last: null,\n            canContainUndefs: false,\n          });\n          return quads;\n        }\n      } else if (Object.keys(this.searchForm.mappings).length === 3) {\n        // If have a TPF endpoint, set graph to variable so we could get the cached triples\n        graph = DF.variable('g');\n      }\n    }\n\n    // Try to emit from cache (skip if filtering bindings)\n    if (!options?.filterBindings) {\n      const cached = this.getCachedQuads(subject, predicate, object, graph);\n      if (cached) {\n        return cached;\n      }\n    }\n\n    // Kickstart metadata collection, because the quads iterator is lazy\n    // eslint-disable-next-line ts/no-this-alias\n    const self = this;\n    let quads: AsyncIterator<RDF.Quad>;\n    const dataStreamPromise = (async function() {\n      let url: string = self.createFragmentUri(self.searchForm, subject, predicate, object, graph);\n\n      // Handle bindings-restricted interfaces\n      if (options?.filterBindings) {\n        url = await self.getBindingsRestrictedLink(\n          subject,\n          predicate,\n          object,\n          graph,\n          url,\n          options.filterBindings,\n        );\n      }\n\n      const dereferenceRdfOutput = await self.mediatorDereferenceRdf.mediate({ context, url });\n      url = dereferenceRdfOutput.url;\n\n      // Determine the metadata\n      const rdfMetadataOuput: IActorRdfMetadataOutput = await self.mediatorMetadata.mediate(\n        { context, url, quads: dereferenceRdfOutput.data, triples: dereferenceRdfOutput.metadata?.triples },\n      );\n\n      // Extract the metadata\n      const { metadata } = await self.mediatorMetadataExtract\n        .mediate({\n          context,\n          url,\n          metadata: rdfMetadataOuput.metadata,\n          requestTime: dereferenceRdfOutput.requestTime,\n        });\n      quads!.setProperty('metadata', { ...metadata, canContainUndefs: false, subsetOf: self.url });\n\n      // While we could resolve this before metadata extraction, we do it afterwards to ensure metadata emission\n      // before the end event is emitted.\n      return rdfMetadataOuput.data;\n    })();\n\n    quads = new TransformIterator(async() => {\n      const dataStream = await dataStreamPromise;\n\n      // The server is free to send any data in its response (such as metadata),\n      // including quads that do not match the given matter.\n      // Therefore, we have to filter away all non-matching quads here.\n      const actualDefaultGraph = DF.defaultGraph();\n      let filteredOutput: AsyncIterator<RDF.Quad> = wrap<RDF.Quad>(dataStream)\n        .transform({\n          filter(quad: RDF.Quad) {\n            if (matchPattern(quad, subject, predicate, object, graph)) {\n              return true;\n            }\n            // Special case: if we are querying in the default graph, and we had an overridden default graph,\n            // also accept that incoming triples may be defined in the actual default graph\n            return modifiedGraph && matchPattern(quad, subject, predicate, object, actualDefaultGraph);\n          },\n        });\n      if (modifiedGraph || graph.termType === 'Variable') {\n        // Reverse-map the overridden default graph back to the actual default graph\n        filteredOutput = this.reverseMapQuadsToDefaultGraph(filteredOutput);\n      }\n\n      return filteredOutput;\n    }, { autoStart: false });\n\n    // Skip cache if filtering bindings\n    if (options?.filterBindings) {\n      return quads;\n    }\n\n    this.cacheQuads(quads, subject, predicate, object, graph);\n    return this.getCachedQuads(subject, predicate, object, graph)!;\n  }\n\n  /**\n   * If we add bindings for brTPF, append it to the URL.\n   * We have to hardcode this because brTPF doesn't expose a URL template for passing bindings.\n   * @param subject The subject.\n   * @param predicate The predicate.\n   * @param object The object.\n   * @param graph The graph.\n   * @param url The original QPF URL.\n   * @param filterBindings The bindings to restrict with.\n   * @param filterBindings.bindings The bindings stream.\n   * @param filterBindings.metadata The bindings metadata.\n   * @protected\n   */\n  public async getBindingsRestrictedLink(\n    subject: RDF.Term,\n    predicate: RDF.Term,\n    object: RDF.Term,\n    graph: RDF.Term,\n    url: string,\n    filterBindings: { bindings: BindingsStream; metadata: MetadataBindings },\n  ): Promise<string> {\n    // Determine values\n    const values: string[] = [];\n    for (const binding of await filterBindings.bindings.toArray()) {\n      const value: string[] = [ '(' ];\n      for (const variable of filterBindings.metadata.variables) {\n        const term = binding.get(variable);\n        value.push(term ? termToStringTtl(term) : 'UNDEF');\n        value.push(' ');\n      }\n      value.push(')');\n      values.push(value.join(''));\n    }\n\n    if (values.length === 0) {\n      // This is a hack to force an empty result page,\n      // because the brTPF server returns a server error when passing 0 bindings.\n      values.push('(<ex:comunica:unknown>)');\n    }\n\n    // Append to URL (brTPF uses the SPARQL VALUES syntax, without the VALUES prefix)\n    const valuesUrl = encodeURIComponent(`(${filterBindings.metadata.variables.map(variable => `?${variable.value}`).join(' ')}) { ${values.join(' ')} }`);\n    return `${url}&values=${valuesUrl}`;\n  }\n\n  protected reverseMapQuadsToDefaultGraph(quads: AsyncIterator<RDF.Quad>): AsyncIterator<RDF.Quad> {\n    const actualDefaultGraph = DF.defaultGraph();\n    return quads.map(\n      quad => mapTerms(\n        quad,\n        (term, key) => key === 'graph' && term.equals(this.defaultGraph) ? actualDefaultGraph : term,\n      ),\n    );\n  }\n\n  public getPatternId(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): string {\n    return JSON.stringify({\n      s: subject.termType === 'Variable' ? '' : _termToString(subject),\n      p: predicate.termType === 'Variable' ? '' : _termToString(predicate),\n      o: object.termType === 'Variable' ? '' : _termToString(object),\n      g: graph.termType === 'Variable' ? '' : _termToString(graph),\n    });\n  }\n\n  protected cacheQuads(\n    quads: AsyncIterator<RDF.Quad>,\n    subject: RDF.Term,\n    predicate: RDF.Term,\n    object: RDF.Term,\n    graph: RDF.Term,\n  ): void {\n    const patternId = this.getPatternId(subject, predicate, object, graph);\n    this.cachedQuads[patternId] = quads.clone();\n  }\n\n  protected getCachedQuads(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term):\n  AsyncIterator<RDF.Quad> | undefined {\n    const patternId = this.getPatternId(subject, predicate, object, graph);\n    const quads = this.cachedQuads[patternId];\n    if (quads) {\n      return quads.clone();\n    }\n  }\n\n  public queryQuads(\n    _operation: Algebra.Operation,\n    _context: IActionContext,\n  ): AsyncIterator<RDF.Quad> {\n    throw new Error('queryQuads is not implemented in QuerySourceQpf');\n  }\n\n  public queryBoolean(\n    _operation: Algebra.Ask,\n    _context: IActionContext,\n  ): Promise<boolean> {\n    throw new Error('queryBoolean is not implemented in QuerySourceQpf');\n  }\n\n  public queryVoid(\n    _operation: Algebra.Update,\n    _context: IActionContext,\n  ): Promise<void> {\n    throw new Error('queryVoid is not implemented in QuerySourceQpf');\n  }\n}\n\nfunction _termToString(term: RDF.Term): string {\n  return term.termType === 'DefaultGraph' ?\n    // Any character that cannot be present in a URL will do\n    '|' :\n    termToString(term);\n}\n"]}