{"version":3,"file":"ActorContextPreprocessQuerySourceIdentify.js","sourceRoot":"","sources":["ActorContextPreprocessQuerySourceIdentify.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IActorContextPreprocessOutput,\n  IActorContextPreprocessArgs,\n  MediatorContextPreprocess,\n} from '@comunica/bus-context-preprocess';\nimport { ActorContextPreprocess } from '@comunica/bus-context-preprocess';\nimport type { ActorHttpInvalidateListenable, IActionHttpInvalidate } from '@comunica/bus-http-invalidate';\nimport type { MediatorQuerySourceIdentify } from '@comunica/bus-query-source-identify';\nimport { KeysInitQuery, KeysQueryOperation } from '@comunica/context-entries';\nimport type { IAction, IActorTest } from '@comunica/core';\nimport { ActionContext } from '@comunica/core';\nimport type {\n  IQuerySourceWrapper,\n  QuerySourceUnidentified,\n  QuerySourceUnidentifiedExpanded,\n  IActionContext,\n  IQuerySourceUnidentifiedExpanded,\n} from '@comunica/types';\nimport { LRUCache } from 'lru-cache';\n\n/**\n * A comunica Query Source Identify Context Preprocess Actor.\n */\nexport class ActorContextPreprocessQuerySourceIdentify extends ActorContextPreprocess {\n  public readonly cacheSize: number;\n  public readonly httpInvalidator: ActorHttpInvalidateListenable;\n  public readonly mediatorQuerySourceIdentify: MediatorQuerySourceIdentify;\n  public readonly mediatorContextPreprocess: MediatorContextPreprocess;\n  public readonly cache?: LRUCache<string, Promise<IQuerySourceWrapper>>;\n\n  public constructor(args: IActorContextPreprocessQuerySourceIdentifyArgs) {\n    super(args);\n    this.cache = this.cacheSize ? new LRUCache<string, any>({ max: this.cacheSize }) : undefined;\n    const cache = this.cache;\n    if (cache) {\n      this.httpInvalidator.addInvalidateListener(\n        ({ url }: IActionHttpInvalidate) => url ? cache.delete(url) : cache.clear(),\n      );\n    }\n  }\n\n  public async test(_action: IAction): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IAction): Promise<IActorContextPreprocessOutput> {\n    let context = action.context;\n\n    // Rewrite sources\n    if (context.has(KeysInitQuery.querySourcesUnidentified)) {\n      const querySourcesUnidentified: QuerySourceUnidentified[] = action.context\n        .get(KeysInitQuery.querySourcesUnidentified)!;\n      const querySourcesUnidentifiedExpanded = await Promise.all(querySourcesUnidentified\n        .map(querySource => this.expandSource(querySource)));\n      const querySources: IQuerySourceWrapper[] = await Promise.all(querySourcesUnidentifiedExpanded\n        .map(async querySourceUnidentified => this.identifySource(querySourceUnidentified, action.context)));\n      context = action.context\n        .delete(KeysInitQuery.querySourcesUnidentified)\n        .set(KeysQueryOperation.querySources, querySources);\n    }\n\n    return { context };\n  }\n\n  public async expandSource(querySource: QuerySourceUnidentified): Promise<QuerySourceUnidentifiedExpanded> {\n    if (typeof querySource === 'string' || 'match' in querySource) {\n      return { value: querySource };\n    }\n    return {\n      ...<Omit<IQuerySourceUnidentifiedExpanded, 'context'>>querySource,\n      context: (await this.mediatorContextPreprocess.mediate({\n        context: ActionContext.ensureActionContext(querySource.context ?? {}),\n      })).context,\n    };\n  }\n\n  public identifySource(\n    querySourceUnidentified: QuerySourceUnidentifiedExpanded,\n    context: IActionContext,\n  ): Promise<IQuerySourceWrapper> {\n    let sourcePromise: Promise<IQuerySourceWrapper> | undefined;\n\n    // Try to read from cache\n    // Only sources based on string values (e.g. URLs) are supported!\n    if (typeof querySourceUnidentified.value === 'string' && this.cache) {\n      sourcePromise = this.cache.get(querySourceUnidentified.value)!;\n    }\n\n    // If not in cache, identify the source\n    if (!sourcePromise) {\n      sourcePromise = this.mediatorQuerySourceIdentify.mediate({ querySourceUnidentified, context })\n        .then(({ querySource }) => querySource);\n\n      // Set in cache\n      if (typeof querySourceUnidentified.value === 'string' && this.cache) {\n        this.cache.set(querySourceUnidentified.value, sourcePromise);\n      }\n    }\n\n    return sourcePromise;\n  }\n}\n\nexport interface IActorContextPreprocessQuerySourceIdentifyArgs extends IActorContextPreprocessArgs {\n  /**\n   * The maximum number of entries in the LRU cache, set to 0 to disable.\n   * @range {integer}\n   * @default {100}\n   */\n  cacheSize: number;\n  /* eslint-disable max-len */\n  /**\n   * An actor that listens to HTTP invalidation events\n   * @default {<default_invalidator> a <npmd:@comunica/bus-http-invalidate/^3.0.0/components/ActorHttpInvalidateListenable.jsonld#ActorHttpInvalidateListenable>}\n   */\n  httpInvalidator: ActorHttpInvalidateListenable;\n  /* eslint-enable max-len */\n  /**\n   * Mediator for identifying query sources.\n   */\n  mediatorQuerySourceIdentify: MediatorQuerySourceIdentify;\n  /**\n   * The context processing combinator\n   */\n  mediatorContextPreprocess: MediatorContextPreprocess;\n}\n"]}