import type { IActionRdfResolveHypermediaLinksQueue, IActorRdfResolveHypermediaLinksQueueOutput } from '@comunica/bus-rdf-resolve-hypermedia-links-queue';
import { ActorRdfResolveHypermediaLinksQueue } from '@comunica/bus-rdf-resolve-hypermedia-links-queue';
import type { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';
import { ActionContextKey } from '@comunica/core';
/**
 * A comunica Wrapper Limit Depth RDF Resolve Hypermedia Links Queue Actor.
 */
export declare class ActorRdfResolveHypermediaLinksQueueWrapperLimitDepth extends ActorRdfResolveHypermediaLinksQueue {
    private readonly limit;
    private readonly mediatorRdfResolveHypermediaLinksQueue;
    constructor(args: IActorRdfResolveHypermediaLinksQueueWrapperLimitDepthArgs);
    test(action: IActionRdfResolveHypermediaLinksQueue): Promise<IActorTest>;
    run(action: IActionRdfResolveHypermediaLinksQueue): Promise<IActorRdfResolveHypermediaLinksQueueOutput>;
}
export interface IActorRdfResolveHypermediaLinksQueueWrapperLimitDepthArgs extends IActorArgs<IActionRdfResolveHypermediaLinksQueue, IActorTest, IActorRdfResolveHypermediaLinksQueueOutput> {
    limit: number;
    mediatorRdfResolveHypermediaLinksQueue: Mediator<Actor<IActionRdfResolveHypermediaLinksQueue, IActorTest, IActorRdfResolveHypermediaLinksQueueOutput>, IActionRdfResolveHypermediaLinksQueue, IActorTest, IActorRdfResolveHypermediaLinksQueueOutput>;
}
export declare const KEY_CONTEXT_WRAPPED: ActionContextKey<boolean>;
