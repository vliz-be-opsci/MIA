"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KEY_CONTEXT_WRAPPED = exports.ActorRdfResolveHypermediaLinksQueueWrapperLimitDepth = void 0;
const bus_rdf_resolve_hypermedia_links_queue_1 = require("@comunica/bus-rdf-resolve-hypermedia-links-queue");
const core_1 = require("@comunica/core");
const LinkQueueLimitDepth_1 = require("./LinkQueueLimitDepth");
/**
 * A comunica Wrapper Limit Depth RDF Resolve Hypermedia Links Queue Actor.
 */
class ActorRdfResolveHypermediaLinksQueueWrapperLimitDepth extends bus_rdf_resolve_hypermedia_links_queue_1.ActorRdfResolveHypermediaLinksQueue {
    constructor(args) {
        super(args);
    }
    async test(action) {
        if (action.context.get(exports.KEY_CONTEXT_WRAPPED)) {
            throw new Error('Unable to wrap link queues multiple times');
        }
        return true;
    }
    async run(action) {
        const context = action.context.set(exports.KEY_CONTEXT_WRAPPED, true);
        const { linkQueue } = await this.mediatorRdfResolveHypermediaLinksQueue.mediate({ ...action, context });
        return { linkQueue: new LinkQueueLimitDepth_1.LinkQueueLimitDepth(linkQueue, this.limit) };
    }
}
exports.ActorRdfResolveHypermediaLinksQueueWrapperLimitDepth = ActorRdfResolveHypermediaLinksQueueWrapperLimitDepth;
exports.KEY_CONTEXT_WRAPPED = new core_1.ActionContextKey('@comunica/actor-rdf-resolve-hypermedia-links-queue-wrapper-limit-depth:wrapped');
//# sourceMappingURL=ActorRdfResolveHypermediaLinksQueueWrapperLimitDepth.js.map