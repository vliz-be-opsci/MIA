{"version":3,"file":"ActorRdfParseHtml.js","sourceRoot":"","sources":["ActorRdfParseHtml.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionRdfParse, IActorRdfParseFixedMediaTypesArgs, IActorRdfParseOutput } from '@comunica/bus-rdf-parse';\nimport {\n  ActorRdfParseFixedMediaTypes,\n} from '@comunica/bus-rdf-parse';\nimport type {\n  IActionRdfParseHtml,\n  IActorRdfParseHtmlOutput,\n  IHtmlParseListener,\n} from '@comunica/bus-rdf-parse-html';\nimport type { Actor, Bus, IActorTest } from '@comunica/core';\nimport type { IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Parser } from 'htmlparser2';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica HTML RDF Parse Actor.\n * It creates an HTML parser, and delegates its events via the bus-rdf-parse-html bus to other HTML parsing actors.\n */\nexport class ActorRdfParseHtml extends ActorRdfParseFixedMediaTypes {\n  private readonly busRdfParseHtml: Bus<Actor<\n    IActionRdfParseHtml,\n    IActorTest,\n    IActorRdfParseHtmlOutput\n  >, IActionRdfParseHtml, IActorTest, IActorRdfParseHtmlOutput>;\n\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"text/html\": 1.0,\n   *       \"application/xhtml+xml\": 0.9\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"text/html\": \"http://www.w3.org/ns/formats/HTML\",\n   *       \"application/xhtml+xml\": \"http://www.w3.org/ns/formats/HTML\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfParseHtmlArgs) {\n    super(args);\n  }\n\n  public async runHandle(action: IActionRdfParse, mediaType: string, context: IActionContext):\n  Promise<IActorRdfParseOutput> {\n    const data = new Readable({ objectMode: true });\n    data._read = () => {\n      // Do nothing\n    };\n\n    let maxSize = 0;\n\n    // Create callbacks action\n    let endBarrier = 1;\n    function error(subError: unknown): void {\n      data.emit('error', subError);\n    }\n    function end(): void {\n      if (--endBarrier === 0) {\n        data.push(null);\n      }\n    }\n    const htmlAction: IActionRdfParseHtml = {\n      baseIRI: action.metadata?.baseIRI ?? '',\n      context,\n      emit: (quad: RDF.Quad) => {\n        maxSize--;\n        data.push(quad);\n      },\n      end,\n      error,\n      headers: action.headers,\n    };\n\n    try {\n      const outputs = await Promise.all(this.busRdfParseHtml.publish(htmlAction));\n      endBarrier += outputs.length;\n\n      const htmlParseListeners: IHtmlParseListener[] = [];\n      for (const output of outputs) {\n        const { htmlParseListener } = await output.actor.run(htmlAction);\n        htmlParseListeners.push(htmlParseListener);\n      }\n\n      // Create parser\n      const parser = new Parser({\n        onclosetag() {\n          try {\n            for (const htmlParseListener of htmlParseListeners) {\n              htmlParseListener.onTagClose();\n            }\n          } catch (error_: unknown) {\n            error(error_);\n          }\n        },\n        onend() {\n          try {\n            for (const htmlParseListener of htmlParseListeners) {\n              htmlParseListener.onEnd();\n            }\n          } catch (error_: unknown) {\n            error(error_);\n          }\n          end();\n        },\n        onopentag(name: string, attributes: Record<string, string>) {\n          try {\n            for (const htmlParseListener of htmlParseListeners) {\n              htmlParseListener.onTagOpen(name, attributes);\n            }\n          } catch (error_: unknown) {\n            error(error_);\n          }\n        },\n        ontext(text: string) {\n          try {\n            for (const htmlParseListener of htmlParseListeners) {\n              htmlParseListener.onText(text);\n            }\n          } catch (error_: unknown) {\n            error(error_);\n          }\n        },\n      }, {\n        decodeEntities: true,\n        recognizeSelfClosing: true,\n        xmlMode: false,\n      });\n\n      const read = data._read = (size: number) => {\n        maxSize = Math.max(size, maxSize);\n        // eslint-disable-next-line no-unmodified-loop-condition\n        while (maxSize > 0) {\n          const item = action.data.read();\n          if (item === null) {\n            action.data.once('readable', () => read(0));\n            return;\n          }\n          parser.write(item.toString());\n        }\n      };\n\n      action.data\n        .on('error', error)\n        .on('end', () => parser.end());\n    } catch (e) {\n      setTimeout(() => {\n        data.emit('error', e);\n      });\n    }\n\n    return { data };\n  }\n}\n\nexport interface IActorRdfParseHtmlArgs extends IActorRdfParseFixedMediaTypesArgs {\n  /* eslint-disable max-len */\n  /**\n   * The RDF Parse HTML bus for fetching HTML listeners\n   * @default {<npmd:@comunica/bus-rdf-parse-html/^3.0.0/components/ActorRdfParseHtml.jsonld#ActorRdfParseHtml_default_bus>}\n   */\n  busRdfParseHtml: Bus<Actor<IActionRdfParseHtml, IActorTest, IActorRdfParseHtmlOutput>, IActionRdfParseHtml, IActorTest, IActorRdfParseHtmlOutput>;\n  /* eslint-enable max-len */\n}\n"]}