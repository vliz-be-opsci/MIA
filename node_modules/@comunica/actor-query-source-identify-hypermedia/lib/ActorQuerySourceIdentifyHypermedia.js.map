{"version":3,"file":"ActorQuerySourceIdentifyHypermedia.js","sourceRoot":"","sources":["ActorQuerySourceIdentifyHypermedia.ts"],"names":[],"mappings":";;;AAAA,iEAA6D;AAG7D,mFAA+E;AAY/E,+DAAoE;AACpE,yCAA+C;AAE/C,mEAAgE;AAEhE;;GAEG;AACH,MAAa,kCAAmC,SAAQ,oDAAwB;IAa9E,YAAmB,IAA6C;QAC9D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAkC;QAClD,IAAI,OAAO,MAAM,CAAC,uBAAuB,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC7D,MAAM,IAAI,SAAS,CAAC,GAAG,IAAI,CAAC,IAAI,gFAAgF,CAAC,CAAC;QACpH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAkC;QACjD,OAAO;YACL,WAAW,EAAE;gBACX,MAAM,EAAE,IAAI,6CAAqB,CAC/B,IAAI,CAAC,SAAS,EACL,MAAM,CAAC,uBAAuB,CAAC,KAAK,EAC7C,MAAM,CAAC,uBAAuB,CAAC,IAAI,EACnC,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,uBAAuB;oBAC5B,OAAO,CAAC,MAAM,CAAC,uBAAuB,CAAC,OAAO,EAAE,GAAG,CAAC,yCAAuB,CAAC,QAAQ,CAAC,CAAC,EACtF;oBACE,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;oBACvC,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;oBACrD,0BAA0B,EAAE,IAAI,CAAC,0BAA0B;oBAC3D,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;oBACnD,qCAAqC,EAAE,IAAI,CAAC,qCAAqC;oBACjF,iCAAiC,EAAE,IAAI,CAAC,iCAAiC;oBACzE,sCAAsC,EAAE,IAAI,CAAC,sCAAsC;iBACpF,EACD,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,cAAc,CAAC,EAC9D,MAAM,kCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,MAAM,CAAC,OAAO,CAAC,CAChF;gBACD,OAAO,EAAE,MAAM,CAAC,uBAAuB,CAAC,OAAO,IAAI,IAAI,oBAAa,EAAE;aACvE;SACF,CAAC;IACJ,CAAC;CACF;AAlDD,gFAkDC","sourcesContent":["import { BindingsFactory } from '@comunica/bindings-factory';\nimport type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport { ActorQuerySourceIdentify } from '@comunica/bus-query-source-identify';\nimport type {\n  IActionQuerySourceIdentify,\n  IActorQuerySourceIdentifyOutput,\n  IActorQuerySourceIdentifyArgs,\n} from '@comunica/bus-query-source-identify';\nimport type { MediatorQuerySourceIdentifyHypermedia } from '@comunica/bus-query-source-identify-hypermedia';\nimport type { MediatorRdfMetadata } from '@comunica/bus-rdf-metadata';\nimport type { MediatorRdfMetadataAccumulate } from '@comunica/bus-rdf-metadata-accumulate';\nimport type { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';\nimport type { MediatorRdfResolveHypermediaLinks } from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport type { MediatorRdfResolveHypermediaLinksQueue } from '@comunica/bus-rdf-resolve-hypermedia-links-queue';\nimport { KeysQuerySourceIdentify } from '@comunica/context-entries';\nimport { ActionContext } from '@comunica/core';\nimport type { IActorTest } from '@comunica/core';\nimport { QuerySourceHypermedia } from './QuerySourceHypermedia';\n\n/**\n * A comunica Hypermedia Query Source Identify Actor.\n */\nexport class ActorQuerySourceIdentifyHypermedia extends ActorQuerySourceIdentify {\n  public readonly mediatorDereferenceRdf: MediatorDereferenceRdf;\n  public readonly mediatorMetadata: MediatorRdfMetadata;\n  public readonly mediatorMetadataExtract: MediatorRdfMetadataExtract;\n  public readonly mediatorMetadataAccumulate: MediatorRdfMetadataAccumulate;\n  public readonly mediatorQuerySourceIdentifyHypermedia: MediatorQuerySourceIdentifyHypermedia;\n  public readonly mediatorRdfResolveHypermediaLinks: MediatorRdfResolveHypermediaLinks;\n  public readonly mediatorRdfResolveHypermediaLinksQueue: MediatorRdfResolveHypermediaLinksQueue;\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n  public readonly cacheSize: number;\n  public readonly maxIterators: number;\n  public readonly aggregateTraversalStore: boolean;\n\n  public constructor(args: IActorQuerySourceIdentifyHypermediaArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionQuerySourceIdentify): Promise<IActorTest> {\n    if (typeof action.querySourceUnidentified.value !== 'string') {\n      throw new TypeError(`${this.name} requires a single query source with a URL value to be present in the context.`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionQuerySourceIdentify): Promise<IActorQuerySourceIdentifyOutput> {\n    return {\n      querySource: {\n        source: new QuerySourceHypermedia(\n          this.cacheSize,\n          <string> action.querySourceUnidentified.value,\n          action.querySourceUnidentified.type,\n          this.maxIterators,\n          this.aggregateTraversalStore &&\n          Boolean(action.querySourceUnidentified.context?.get(KeysQuerySourceIdentify.traverse)),\n          {\n            mediatorMetadata: this.mediatorMetadata,\n            mediatorMetadataExtract: this.mediatorMetadataExtract,\n            mediatorMetadataAccumulate: this.mediatorMetadataAccumulate,\n            mediatorDereferenceRdf: this.mediatorDereferenceRdf,\n            mediatorQuerySourceIdentifyHypermedia: this.mediatorQuerySourceIdentifyHypermedia,\n            mediatorRdfResolveHypermediaLinks: this.mediatorRdfResolveHypermediaLinks,\n            mediatorRdfResolveHypermediaLinksQueue: this.mediatorRdfResolveHypermediaLinksQueue,\n          },\n          warningMessage => this.logWarn(action.context, warningMessage),\n          await BindingsFactory.create(this.mediatorMergeBindingsContext, action.context),\n        ),\n        context: action.querySourceUnidentified.context ?? new ActionContext(),\n      },\n    };\n  }\n}\n\nexport interface IActorQuerySourceIdentifyHypermediaArgs extends IActorQuerySourceIdentifyArgs {\n  /**\n   * The maximum number of entries in the LRU cache, set to 0 to disable.\n   * @range {integer}\n   * @default {100}\n   */\n  cacheSize: number;\n  /**\n   * The maximum number of links that can be followed in parallel.\n   * @default {64}\n   */\n  maxIterators: number;\n  /**\n   * If all discovered quads across all links from a traversal source should be indexed in an aggregated store,\n   * to speed up later calls.\n   * This only applies to sources annotated with KeysQuerySourceIdentify.traverse.\n   * @default {true}\n   */\n  aggregateTraversalStore: boolean;\n  /**\n   * The RDF dereference mediator\n   */\n  mediatorDereferenceRdf: MediatorDereferenceRdf;\n  /**\n   * The metadata mediator\n   */\n  mediatorMetadata: MediatorRdfMetadata;\n  /**\n   * The metadata extract mediator\n   */\n  mediatorMetadataExtract: MediatorRdfMetadataExtract;\n  /**\n   * The metadata accumulate mediator\n   */\n  mediatorMetadataAccumulate?: MediatorRdfMetadataAccumulate;\n  /**\n   * The hypermedia resolve mediator\n   */\n  mediatorQuerySourceIdentifyHypermedia: MediatorQuerySourceIdentifyHypermedia;\n  /**\n   * The hypermedia links resolve mediator\n   */\n  mediatorRdfResolveHypermediaLinks: MediatorRdfResolveHypermediaLinks;\n  /**\n   * The hypermedia links queue resolve mediator\n   */\n  mediatorRdfResolveHypermediaLinksQueue: MediatorRdfResolveHypermediaLinksQueue;\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}