import type * as RDF from '@rdfjs/types';
import type * as E from '../../expressions';
import type { FunctionArgumentsCache } from '../../functions/OverloadTree';
import type { ITermTransformer } from '../../transformers/TermTransformer';
import type { ITimeZoneRepresentation } from '../../util/DateTimeHelpers';
import type { ISuperTypeProvider, SuperTypeCallback, TypeCache } from '../../util/TypeHandling';
export interface ISharedContext {
    now?: Date;
    baseIRI?: string;
    typeCache?: TypeCache;
    getSuperType?: SuperTypeCallback;
    functionArgumentsCache?: FunctionArgumentsCache;
    defaultTimeZone?: ITimeZoneRepresentation;
}
export interface ICompleteSharedContext {
    now: Date;
    baseIRI?: string;
    functionArgumentsCache: FunctionArgumentsCache;
    superTypeProvider: ISuperTypeProvider;
    defaultTimeZone: ITimeZoneRepresentation;
}
export declare class BaseExpressionEvaluator {
    protected readonly termTransformer: ITermTransformer;
    constructor(termTransformer: ITermTransformer);
    protected term(expr: E.Term): E.Term;
    protected variable(expr: E.Variable, mapping: RDF.Bindings): E.Term;
}
