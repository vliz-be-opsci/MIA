{"version":3,"file":"SpecAlgos.js","sourceRoot":"","sources":["SpecAlgos.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IDurationRepresentation,\n  IDateTimeRepresentation,\n  ITimeZoneRepresentation,\n} from './DateTimeHelpers';\nimport { toUTCDate } from './DateTimeHelpers';\n\nfunction fDiv(arg: number, high: number, low = 0): { intDiv: number; remainder: number } {\n  // Adds the 4 spec functions into one since they are highly related,\n  // and fQuotient and modulo are almost always called in pairs.\n  const first = arg - low;\n  const second = high - low;\n  const intDiv = Math.floor(first / second);\n  return { intDiv, remainder: arg - intDiv * second };\n}\n\nexport function maximumDayInMonthFor(yearValue: number, monthValue: number): number {\n  const { intDiv: additionalYears, remainder: month } = fDiv(monthValue, 13, 1);\n  const year = yearValue + additionalYears;\n\n  if ([ 1, 3, 5, 7, 8, 10, 12 ].includes(month)) {\n    return 31;\n  }\n  if ([ 4, 6, 9, 11 ].includes(month)) {\n    return 30;\n  }\n  if (month === 2 && (\n    fDiv(year, 400).remainder === 0 ||\n    (fDiv(year, 100).remainder !== 0 && fDiv(year, 4).remainder === 0))) {\n    return 29;\n  }\n  return 28;\n}\n\n// https://www.w3.org/TR/xmlschema-2/#adding-durations-to-dateTimes\nexport function addDurationToDateTime(date: IDateTimeRepresentation, duration: IDurationRepresentation):\nIDateTimeRepresentation {\n  // Used to cary over optional fields like timezone\n  const newDate: IDateTimeRepresentation = { ...date };\n\n  // Month\n  let tempDiv = fDiv(date.month + duration.month, 13, 1);\n  newDate.month = tempDiv.remainder;\n  // Year\n  newDate.year = date.year + duration.year + tempDiv.intDiv;\n  // Seconds\n  tempDiv = fDiv(date.seconds + duration.seconds, 60);\n  newDate.seconds = tempDiv.remainder;\n  // Minutes\n  tempDiv = fDiv(date.minutes + duration.minutes + tempDiv.intDiv, 60);\n  newDate.minutes = tempDiv.remainder;\n  // Hours\n  tempDiv = fDiv(date.hours + duration.hours + tempDiv.intDiv, 24);\n  newDate.hours = tempDiv.remainder;\n\n  // We skip a part of the spec code since: Defined spec code can not happen since it would be an invalid literal\n\n  newDate.day = date.day + duration.day + tempDiv.intDiv;\n\n  while (true) {\n    let carry;\n    if (newDate.day < 1) {\n      newDate.day += maximumDayInMonthFor(newDate.year, newDate.month - 1);\n      carry = -1;\n    } else if (newDate.day > maximumDayInMonthFor(newDate.year, newDate.month)) {\n      newDate.day -= maximumDayInMonthFor(newDate.year, newDate.month);\n      carry = 1;\n    } else {\n      break;\n    }\n    tempDiv = fDiv(newDate.month + carry, 13, 1);\n    newDate.month = tempDiv.remainder;\n    newDate.year += tempDiv.intDiv;\n  }\n  return newDate;\n}\n\nexport function elapsedDuration(\n  first: IDateTimeRepresentation,\n  second: IDateTimeRepresentation,\n  defaultTimeZone: ITimeZoneRepresentation,\n): Partial<IDurationRepresentation> {\n  const d1 = toUTCDate(first, defaultTimeZone);\n  const d2 = toUTCDate(second, defaultTimeZone);\n  const diff = d1.getTime() - d2.getTime();\n  return {\n    day: Math.floor(diff / (1_000 * 60 * 60 * 24)),\n    hours: Math.floor((diff % (1_000 * 60 * 60 * 24)) / (1_000 * 60 * 60)),\n    minutes: Math.floor(diff % (1_000 * 60 * 60) / (1_000 * 60)),\n    seconds: diff % (1_000 * 60),\n  };\n}\n"]}