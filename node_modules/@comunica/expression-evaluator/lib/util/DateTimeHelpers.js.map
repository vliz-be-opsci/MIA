{"version":3,"file":"DateTimeHelpers.js","sourceRoot":"","sources":["DateTimeHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["export interface ITimeZoneRepresentation {\n  // https://www.w3.org/TR/xpath-functions/#func-implicit-timezone\n  // Type is a dayTimeDuration.\n  // We use a separate dataType since it makes TS type modifications and JS object copying easier.\n  zoneHours: number;\n  zoneMinutes: number;\n}\n\nexport interface IDateRepresentation extends Partial<ITimeZoneRepresentation> {\n  year: number;\n  month: number;\n  day: number;\n}\n\nexport interface ITimeRepresentation extends Partial<ITimeZoneRepresentation> {\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\nexport interface IDayTimeDurationRepresentation {\n  hours: number;\n  minutes: number;\n  seconds: number;\n  day: number;\n}\n\nexport interface IYearMonthDurationRepresentation {\n  year: number;\n  month: number;\n}\n\nexport type IDurationRepresentation = IYearMonthDurationRepresentation & IDayTimeDurationRepresentation;\nexport type IDateTimeRepresentation = IDateRepresentation & ITimeRepresentation;\n\n// Important is to notice JS and XSD datatypes have different defaulted values\n// | Field | Default in JS | Default in XSD_DayTime | Default in XSD_Duration |\n// | Month | 0             | 1                      | 0                       |\n// | Day   | 1             | 1                      | 0                       |\n\nexport function defaultedDayTimeDurationRepresentation(rep: Partial<IDayTimeDurationRepresentation>):\nIDayTimeDurationRepresentation {\n  return {\n    day: rep.day ?? 0,\n    hours: rep.hours ?? 0,\n    minutes: rep.minutes ?? 0,\n    seconds: rep.seconds ?? 0,\n  };\n}\n\nexport function defaultedYearMonthDurationRepresentation(rep: Partial<IYearMonthDurationRepresentation>):\nIYearMonthDurationRepresentation {\n  return {\n    year: rep.year ?? 0,\n    month: rep.month ?? 0,\n  };\n}\n\nexport function defaultedDurationRepresentation(\n  rep: Partial<IDurationRepresentation>,\n): IDurationRepresentation {\n  return {\n    ...defaultedDayTimeDurationRepresentation(rep),\n    ...defaultedYearMonthDurationRepresentation(rep),\n  };\n}\n\nexport function simplifyDurationRepresentation(rep: Partial<IDurationRepresentation>):\nPartial<IDurationRepresentation> {\n  const temp = defaultedDurationRepresentation(rep);\n  const res: Partial<IDurationRepresentation> = {};\n\n  // Simplify year part\n  const years = temp.year + Math.trunc(temp.month / 12);\n  if (years) {\n    res.year = years;\n    temp.month %= 12;\n  }\n  if (temp.month) {\n    res.month = temp.month;\n  }\n\n  // Simplify day part\n  const days = temp.day + Math.trunc(temp.hours / 24) +\n    Math.trunc(temp.minutes / (24 * 60)) + Math.trunc(temp.seconds / (24 * 60 * 60));\n  if (days) {\n    res.day = days;\n    temp.hours %= 24;\n    temp.minutes %= 24 * 60;\n    temp.seconds %= 24 * 60 * 60;\n  }\n  const hours = temp.hours + Math.trunc(temp.minutes / 60) +\n    Math.trunc(temp.seconds / (60 * 60));\n  if (hours) {\n    res.hours = hours;\n    temp.minutes %= 60;\n    temp.seconds %= 60 * 60;\n  }\n  const minutes = temp.minutes + Math.trunc(temp.seconds / 60);\n  if (minutes) {\n    res.minutes = minutes;\n    temp.seconds %= 60;\n  }\n  if (temp.seconds) {\n    res.seconds = temp.seconds;\n  }\n  return res;\n}\n\nexport function defaultedDateTimeRepresentation(rep: Partial<IDateTimeRepresentation>): IDateTimeRepresentation {\n  return {\n    ...rep,\n    day: rep.day ?? 1,\n    hours: rep.hours ?? 0,\n    month: rep.month ?? 1,\n    year: rep.year ?? 0,\n    seconds: rep.seconds ?? 0,\n    minutes: rep.minutes ?? 0,\n  };\n}\n\nexport function toDateTimeRepresentation({ date, timeZone }:\n{ date: Date; timeZone: ITimeZoneRepresentation }): IDateTimeRepresentation {\n  return {\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate(),\n    hours: date.getHours(),\n    minutes: date.getMinutes(),\n    seconds: date.getSeconds(),\n    zoneHours: timeZone.zoneHours,\n    zoneMinutes: timeZone.zoneMinutes,\n  };\n}\n\nexport function negateDuration(dur: Partial<IDurationRepresentation>): Partial<IDurationRepresentation> {\n  return {\n    year: dur.year === undefined ? undefined : -1 * dur.year,\n    month: dur.month === undefined ? undefined : -1 * dur.month,\n    day: dur.day === undefined ? undefined : -1 * dur.day,\n    hours: dur.hours === undefined ? undefined : -1 * dur.hours,\n    minutes: dur.minutes === undefined ? undefined : -1 * dur.minutes,\n    seconds: dur.seconds === undefined ? undefined : -1 * dur.seconds,\n  };\n}\n\nexport function toJSDate(date: IDateTimeRepresentation): Date {\n  // The given hours will be assumed to be local time.\n  const res = new Date(\n    date.year,\n    date.month - 1,\n    date.day,\n    date.hours,\n    date.minutes,\n    Math.trunc(date.seconds),\n    (date.seconds % 1) * 1_000,\n  );\n  if (date.year >= 0 && date.year < 100) {\n    // Special rule of date has gone int action:\n\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#individual_date_and_time_component_values\n\n    const jumpDeltaOfDate = 1_900;\n    res.setFullYear(res.getFullYear() - jumpDeltaOfDate);\n  }\n  return res;\n}\n\nexport function toUTCDate(date: Partial<IDateTimeRepresentation>, defaultTimezone: ITimeZoneRepresentation): Date {\n  const localTime = toJSDate(defaultedDateTimeRepresentation(date));\n  // This date has been constructed in machine local time, now we alter it to become UTC and convert to correct timezone\n\n  // Correction needed from local machine timezone to UTC\n  const minutesCorrectionLocal = localTime.getTimezoneOffset();\n  // Correction needed from UTC to provided timeZone\n  const hourCorrectionUTC = date.zoneHours ?? defaultTimezone.zoneHours;\n  const minutesCorrectionUTC = date.zoneMinutes ?? defaultTimezone.zoneMinutes;\n  return new Date(\n    localTime.getTime() - (minutesCorrectionLocal + hourCorrectionUTC * 60 + minutesCorrectionUTC) * 60 * 1_000,\n  );\n}\n\nexport function trimToYearMonthDuration(dur: Partial<IDurationRepresentation>):\nPartial<IYearMonthDurationRepresentation> {\n  return {\n    year: dur.year,\n    month: dur.month,\n  };\n}\n\nexport function trimToDayTimeDuration(dur: Partial<IDurationRepresentation>): Partial<IDayTimeDurationRepresentation> {\n  return {\n    day: dur.day,\n    hours: dur.hours,\n    minutes: dur.minutes,\n    seconds: dur.seconds,\n  };\n}\n\nexport function yearMonthDurationsToMonths(dur: IYearMonthDurationRepresentation): number {\n  return dur.year * 12 + dur.month;\n}\n\nexport function dayTimeDurationsToSeconds(dur: IDayTimeDurationRepresentation): number {\n  return (((dur.day * 24) + dur.hours) * 60 + dur.minutes) * 60 + dur.seconds;\n}\n\nexport function extractRawTimeZone(zoneContained: string): string {\n  const extraction = /(Z|([+-]\\d\\d:\\d\\d))?$/u.exec(zoneContained);\n  // It is safe to cast here because the empty string can always match.\n  return extraction![0];\n}\n\nexport function extractTimeZone(date: Date): ITimeZoneRepresentation {\n  return {\n    zoneHours: date.getTimezoneOffset() / 60,\n    zoneMinutes: date.getTimezoneOffset() % 60,\n  };\n}\n"]}