{"version":3,"file":"Average.js","sourceRoot":"","sources":["Average.ts"],"names":[],"mappings":";;;AACA,oCAAoC;AACpC,4CAAgD;AAChD,kDAA+C;AAC/C,oCAAoC;AACpC,6CAAmD;AAOnD,MAAa,OAAQ,SAAQ,gCAAmB;IAAhD;;QACmB,WAAM,GAAG,4BAAgB,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACtD,YAAO,GAAG,4BAAgB,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAChE,UAAK,GAA8B,SAAS,CAAC;IAyBvD,CAAC;IAvBQ,MAAM,CAAU,UAAU;QAC/B,OAAO,IAAA,iBAAO,EAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IAEM,GAAG,CAAC,IAAc;QACvB,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,MAAM,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC5C,IAAI,CAAC,KAAK,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QACjC,CAAC;aAAM,CAAC;YACN,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YACrD,IAAI,CAAC,KAAK,CAAC,GAAG,GAAsB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,YAAY,CAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC5G,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAEM,MAAM;QACX,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,OAAO,CAAC,UAAU,EAAE,CAAC;QAC9B,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACjF,OAAO,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;CACF;AA5BD,0BA4BC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport * as E from '../expressions';\nimport { regularFunctions } from '../functions';\nimport { integer } from '../functions/Helpers';\nimport * as C from '../util/Consts';\nimport { AggregatorComponent } from './Aggregator';\n\ninterface IAverageState {\n  sum: E.NumericLiteral;\n  count: number;\n}\n\nexport class Average extends AggregatorComponent {\n  private readonly summer = regularFunctions[C.RegularOperator.ADDITION];\n  private readonly divider = regularFunctions[C.RegularOperator.DIVISION];\n  private state: IAverageState | undefined = undefined;\n\n  public static override emptyValue(): RDF.Term {\n    return integer(0).toRDF();\n  }\n\n  public put(term: RDF.Term): void {\n    if (this.state === undefined) {\n      const sum = this.termToNumericOrError(term);\n      this.state = { sum, count: 1 };\n    } else {\n      const internalTerm = this.termToNumericOrError(term);\n      this.state.sum = <E.NumericLiteral> this.summer.apply([ this.state.sum, internalTerm ], this.sharedContext);\n      this.state.count++;\n    }\n  }\n\n  public result(): RDF.Term {\n    if (this.state === undefined) {\n      return Average.emptyValue();\n    }\n    const count = new E.IntegerLiteral(this.state.count);\n    const result = this.divider.apply([ this.state.sum, count ], this.sharedContext);\n    return result.toRDF();\n  }\n}\n"]}