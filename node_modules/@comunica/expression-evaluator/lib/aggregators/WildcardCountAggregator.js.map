{"version":3,"file":"WildcardCountAggregator.js","sourceRoot":"","sources":["WildcardCountAggregator.ts"],"names":[],"mappings":";;;AACA,wCAAwC;AAExC,kDAA+C;AAE/C;;;GAGG;AACH,MAAa,uBAAuB;IAQlC,YAAmB,IAAiC;QALpD,+DAA+D;QAC/D,oFAAoF;QACnE,kBAAa,GAA6B,IAAI,GAAG,EAAE,CAAC;QAC7D,YAAO,GAAG,CAAC,CAAC;QAGlB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAChC,CAAC;IAEM,WAAW,CAAC,QAAsB;QACvC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC;QACpB,CAAC;IACH,CAAC;IAEM,MAAM,CAAC,UAAU;QACtB,OAAO,IAAA,iBAAO,EAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IAEM,MAAM;QACX,OAAO,IAAA,iBAAO,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;IACvC,CAAC;IAED;;;;OAIG;IACK,cAAc,CAAC,QAAsB;QAC3C,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,WAAW,GAA+B,CAAE,GAAG,QAAQ,CAAE,CAAC;YAChE,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7E,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAE,QAAQ,CAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9E,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAE,AAAD,EAAG,IAAI,CAAE,EAAE,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEtF,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,GAAG,KAAK,SAAS,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAEnD,kBAAkB;YAClB,IAAI,CAAC,GAAG,EAAE,CAAC;gBACT,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;YAC/C,CAAC;YACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAE9C,OAAO,MAAM,CAAC;QAChB,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAnDD,0DAmDC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport * as RdfString from 'rdf-string';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { integer } from '../functions/Helpers';\n\n/**\n * Implementation of the COUNT aggregator on a wildcard.\n * We choose to make this is separate class, because it would pollute the code of the other aggregators.\n */\nexport class WildcardCountAggregator {\n  private readonly distinct: boolean;\n\n  // Key: string representation of a ',' separated list of terms.\n  // Value: string representation of a ',' separated list of variables sorted by name.\n  private readonly bindingValues: Map<string, Set<string>> = new Map();\n  private counter = 0;\n\n  public constructor(expr: Algebra.AggregateExpression) {\n    this.distinct = expr.distinct;\n  }\n\n  public putBindings(bindings: RDF.Bindings): void {\n    if (!this.handleDistinct(bindings)) {\n      this.counter += 1;\n    }\n  }\n\n  public static emptyValue(): RDF.Term {\n    return integer(0).toRDF();\n  }\n\n  public result(): RDF.Term {\n    return integer(this.counter).toRDF();\n  }\n\n  /**\n   * Returns true if the given bindings should be skipped.\n   * @param bindings\n   * @private\n   */\n  private handleDistinct(bindings: RDF.Bindings): boolean {\n    if (this.distinct) {\n      const bindingList: [RDF.Variable, RDF.Term][] = [ ...bindings ];\n      bindingList.sort((first, snd) => first[0].value.localeCompare(snd[0].value));\n      const variables = bindingList.map(([ variable ]) => variable.value).join(',');\n      const terms = bindingList.map(([ , term ]) => RdfString.termToString(term)).join(',');\n\n      const set = this.bindingValues.get(variables);\n      const result = set !== undefined && set.has(terms);\n\n      // Add to the set:\n      if (!set) {\n        this.bindingValues.set(variables, new Set());\n      }\n      this.bindingValues.get(variables)!.add(terms);\n\n      return result;\n    }\n    return false;\n  }\n}\n"]}