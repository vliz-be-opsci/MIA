{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAKA,uCAAoC;AACpC,mCAAgC;AAChC,+CAA4C;AAC5C,+BAA4B;AAC5B,+BAA4B;AAC5B,qCAAkC;AAClC,+BAA4B;AAOf,QAAA,WAAW,GAAiE;IACvF,KAAK,EAAE,aAAK;IACZ,GAAG,EAAE,SAAG;IACR,GAAG,EAAE,SAAG;IACR,GAAG,EAAE,SAAG;IACR,GAAG,EAAE,iBAAO;IACZ,YAAY,EAAE,yBAAW;IACzB,MAAM,EAAE,eAAM;CACf,CAAC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport type { ICompleteSharedContext } from '../evaluators/evaluatorHelpers/BaseExpressionEvaluator';\nimport type { SetFunction } from '../util/Consts';\nimport type { AggregatorComponent } from './Aggregator';\nimport { Average } from './Average';\nimport { Count } from './Count';\nimport { GroupConcat } from './GroupConcat';\nimport { Max } from './Max';\nimport { Min } from './Min';\nimport { Sample } from './Sample';\nimport { Sum } from './Sum';\n\nexport interface IAggregatorComponentClass {\n  new(expr: Algebra.AggregateExpression, sharedContext: ICompleteSharedContext): AggregatorComponent;\n  emptyValue: () => RDF.Term | undefined;\n}\n\nexport const aggregators: Readonly<{[key in SetFunction]: IAggregatorComponentClass }> = {\n  count: Count,\n  sum: Sum,\n  min: Min,\n  max: Max,\n  avg: Average,\n  group_concat: GroupConcat,\n  sample: Sample,\n};\n"]}