"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Average = void 0;
const E = require("../expressions");
const functions_1 = require("../functions");
const Helpers_1 = require("../functions/Helpers");
const C = require("../util/Consts");
const Aggregator_1 = require("./Aggregator");
class Average extends Aggregator_1.AggregatorComponent {
    constructor() {
        super(...arguments);
        this.summer = functions_1.regularFunctions[C.RegularOperator.ADDITION];
        this.divider = functions_1.regularFunctions[C.RegularOperator.DIVISION];
        this.state = undefined;
    }
    static emptyValue() {
        return (0, Helpers_1.integer)(0).toRDF();
    }
    put(term) {
        if (this.state === undefined) {
            const sum = this.termToNumericOrError(term);
            this.state = { sum, count: 1 };
        }
        else {
            const internalTerm = this.termToNumericOrError(term);
            this.state.sum = this.summer.apply([this.state.sum, internalTerm], this.sharedContext);
            this.state.count++;
        }
    }
    result() {
        if (this.state === undefined) {
            return Average.emptyValue();
        }
        const count = new E.IntegerLiteral(this.state.count);
        const result = this.divider.apply([this.state.sum, count], this.sharedContext);
        return result.toRDF();
    }
}
exports.Average = Average;
//# sourceMappingURL=Average.js.map