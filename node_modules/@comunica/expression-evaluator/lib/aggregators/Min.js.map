{"version":3,"file":"Min.js","sourceRoot":"","sources":["Min.ts"],"names":[],"mappings":";;;AACA,+CAA8C;AAC9C,6CAAmD;AAEnD,MAAa,GAAI,SAAQ,gCAAmB;IAA5C;;QACU,UAAK,GAAyB,SAAS,CAAC;IAmBlD,CAAC;IAjBQ,GAAG,CAAC,IAAc;QACvB,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,KAAK,aAAa,IAAI,CAAC,QAAQ,uBAAuB,CAAC,CAAC;QAClG,CAAC;QACD,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;aAAM,IAAI,IAAA,qBAAU,EAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;IACH,CAAC;IAEM,MAAM;QACX,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,GAAG,CAAC,UAAU,EAAE,CAAC;QAC1B,CAAC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AApBD,kBAoBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { orderTypes } from '../util/Ordering';\nimport { AggregatorComponent } from './Aggregator';\n\nexport class Min extends AggregatorComponent {\n  private state: RDF.Term | undefined = undefined;\n\n  public put(term: RDF.Term): void {\n    if (term.termType !== 'Literal') {\n      throw new Error(`Term with value ${term.value} has type ${term.termType} and is not a literal`);\n    }\n    if (this.state === undefined) {\n      this.state = term;\n    } else if (orderTypes(this.state, term) === 1) {\n      this.state = term;\n    }\n  }\n\n  public result(): RDF.Term | undefined {\n    if (this.state === undefined) {\n      return Min.emptyValue();\n    }\n    return this.state;\n  }\n}\n"]}