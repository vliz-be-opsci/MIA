{"version":3,"file":"GroupConcat.js","sourceRoot":"","sources":["GroupConcat.ts"],"names":[],"mappings":";;;AACA,kDAA0D;AAC1D,6CAAmD;AAEnD,MAAa,WAAY,SAAQ,gCAAmB;IAApD;;QACU,UAAK,GAAuB,SAAS,CAAC;QACtC,sBAAiB,GAAG,IAAI,CAAC;QACzB,iBAAY,GAAuB,SAAS,CAAC;IA8BvD,CAAC;IA5BQ,MAAM,CAAU,UAAU;QAC/B,OAAO,IAAA,gBAAM,EAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IAEM,GAAG,CAAC,IAAc;QACvB,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;gBAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;YACpC,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;YAC1C,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACjG,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC/B,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YAChC,CAAC;QACH,CAAC;IACH,CAAC;IAEM,MAAM;QACX,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,WAAW,CAAC,UAAU,EAAE,CAAC;QAClC,CAAC;QACD,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YAChD,OAAO,IAAA,oBAAU,EAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,EAAE,CAAC;QAC3D,CAAC;QACD,OAAO,IAAA,gBAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;IACpC,CAAC;CACF;AAjCD,kCAiCC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { langString, string } from '../functions/Helpers';\nimport { AggregatorComponent } from './Aggregator';\n\nexport class GroupConcat extends AggregatorComponent {\n  private state: string | undefined = undefined;\n  private lastLanguageValid = true;\n  private lastLanguage: string | undefined = undefined;\n\n  public static override emptyValue(): RDF.Term {\n    return string('').toRDF();\n  }\n\n  public put(term: RDF.Term): void {\n    if (this.state === undefined) {\n      this.state = term.value;\n      if (term.termType === 'Literal') {\n        this.lastLanguage = term.language;\n      }\n    } else {\n      this.state += this.separator + term.value;\n      if (this.lastLanguageValid && term.termType === 'Literal' && this.lastLanguage !== term.language) {\n        this.lastLanguageValid = false;\n        this.lastLanguage = undefined;\n      }\n    }\n  }\n\n  public result(): RDF.Term {\n    if (this.state === undefined) {\n      return GroupConcat.emptyValue();\n    }\n    if (this.lastLanguageValid && this.lastLanguage) {\n      return langString(this.state, this.lastLanguage).toRDF();\n    }\n    return string(this.state).toRDF();\n  }\n}\n"]}