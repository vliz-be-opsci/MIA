{"version":3,"file":"Count.js","sourceRoot":"","sources":["Count.ts"],"names":[],"mappings":";;;AACA,kDAA+C;AAC/C,6CAAmD;AAEnD,MAAa,KAAM,SAAQ,gCAAmB;IAA9C;;QACU,UAAK,GAAuB,SAAS,CAAC;IAkBhD,CAAC;IAjBQ,MAAM,CAAU,UAAU;QAC/B,OAAO,IAAA,iBAAO,EAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IAEM,GAAG;QACR,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACjB,CAAC;QACD,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAEM,MAAM;QACX,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,KAAK,CAAC,UAAU,EAAE,CAAC;QAC5B,CAAC;QACD,OAAO,IAAA,iBAAO,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;IACrC,CAAC;CACF;AAnBD,sBAmBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { integer } from '../functions/Helpers';\nimport { AggregatorComponent } from './Aggregator';\n\nexport class Count extends AggregatorComponent {\n  private state: number | undefined = undefined;\n  public static override emptyValue(): RDF.Term {\n    return integer(0).toRDF();\n  }\n\n  public put(): void {\n    if (this.state === undefined) {\n      this.state = 0;\n    }\n    this.state++;\n  }\n\n  public result(): RDF.Term {\n    if (this.state === undefined) {\n      return Count.emptyValue();\n    }\n    return integer(this.state).toRDF();\n  }\n}\n"]}