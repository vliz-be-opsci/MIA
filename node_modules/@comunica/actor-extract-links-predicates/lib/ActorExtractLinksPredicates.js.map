{"version":3,"file":"ActorExtractLinksPredicates.js","sourceRoot":"","sources":["ActorExtractLinksPredicates.ts"],"names":[],"mappings":";;;AACA,mEAAgE;AAGhE;;GAEG;AACH,MAAa,2BAA4B,SAAQ,qCAAiB;IAKhE,YAAmB,IAA8C;QAC/D,KAAK,CAAC,IAAI,CAAC,CAAC;QAEZ,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAA4B;QAC5C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,OAAO;YACL,KAAK,EAAE,MAAM,qCAAiB,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBAC5E,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC9E,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;wBACpC,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;4BACrC,KAAK,CAAC,IAAI,CAAC;gCACT,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;gCACtB,QAAQ,EAAE;oCACR,eAAe,EAAE;wCACf,IAAI,EAAE,IAAI,CAAC,IAAI;wCACf,UAAU,EAAE,IAAI,CAAC,gBAAgB;wCACjC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK;wCACvC,YAAY,EAAE,IAAI,CAAC,YAAY;qCAChC;iCACF;6BACF,CAAC,CAAC;4BACH,MAAM;wBACR,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC,CAAC;SACH,CAAC;IACJ,CAAC;IAEO,cAAc,CAAC,OAAe,EAAE,GAAW;QACjD,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,WAAW,IAAI,CAAC,EAAE,CAAC;YACrB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QAC1C,CAAC;QACD,OAAO,OAAO,KAAK,GAAG,CAAC;IACzB,CAAC;CACF;AAhDD,kEAgDC","sourcesContent":["import type { IActionExtractLinks, IActorExtractLinksOutput } from '@comunica/bus-extract-links';\nimport { ActorExtractLinks } from '@comunica/bus-extract-links';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\n\n/**\n * A comunica Traverse Predicates RDF Metadata Extract Actor.\n */\nexport class ActorExtractLinksPredicates extends ActorExtractLinks {\n  private readonly checkSubject: boolean;\n  private readonly predicates: RegExp[];\n  private readonly stringPredicates: string[];\n\n  public constructor(args: IActorExtractLinksTraversePredicatesArgs) {\n    super(args);\n\n    this.stringPredicates = args.predicateRegexes;\n    this.predicates = args.predicateRegexes.map(stringRegex => new RegExp(stringRegex, 'u'));\n  }\n\n  public async test(_action: IActionExtractLinks): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionExtractLinks): Promise<IActorExtractLinksOutput> {\n    return {\n      links: await ActorExtractLinks.collectStream(action.metadata, (quad, links) => {\n        if (!this.checkSubject || this.subjectMatches(quad.subject.value, action.url)) {\n          for (const regex of this.predicates) {\n            if (regex.test(quad.predicate.value)) {\n              links.push({\n                url: quad.object.value,\n                metadata: {\n                  producedByActor: {\n                    name: this.name,\n                    predicates: this.stringPredicates,\n                    matchingPredicate: quad.predicate.value,\n                    checkSubject: this.checkSubject,\n                  },\n                },\n              });\n              break;\n            }\n          }\n        }\n      }),\n    };\n  }\n\n  private subjectMatches(subject: string, url: string): boolean {\n    const fragmentPos = subject.indexOf('#');\n    if (fragmentPos >= 0) {\n      subject = subject.slice(0, fragmentPos);\n    }\n    return subject === url;\n  }\n}\n\nexport interface IActorExtractLinksTraversePredicatesArgs\n  extends IActorArgs<IActionExtractLinks, IActorTest, IActorExtractLinksOutput> {\n  /**\n   * If only quads will be considered that have a subject equal to the request URL.\n   */\n  checkSubject: boolean;\n  /**\n   * A list of regular expressions that will be tested against predicates of quads.\n   */\n  predicateRegexes: string[];\n}\n"]}