{"version":3,"file":"ActorQuerySourceIdentifySerialized.js","sourceRoot":"","sources":["ActorQuerySourceIdentifySerialized.ts"],"names":[],"mappings":";;;AAMA,mFAA+E;AAS/E,uDAA+C;AAC/C,qDAA2C;AAE3C;;GAEG;AACH,MAAa,kCAAmC,SAAQ,oDAAwB;IAI9E,YAAmB,IAA6C;QAC9D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAkC;QAClD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,uBAAuB,CAAC,EAAE,CAAC;YACzD,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,oFAAoF,CAAC,CAAC;QACpH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAkC;QACjD,uGAAuG;QACvG,OAAO,MAAM,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC;YACpD,uBAAuB,EAAE;gBACvB,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,EAA2B,MAAM,CAAC,uBAAuB,CAAC;gBACvG,OAAO,EAAE,MAAM,CAAC,uBAAuB,CAAC,OAAO;aAChD;YACD,OAAO,EAAE,MAAM,CAAC,OAAO;SACxB,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACO,KAAK,CAAC,YAAY,CAAC,OAAuB,EAAE,MAA8B;QAClF,MAAM,UAAU,GAAG,IAAI,0BAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACtD,0BAA0B;QAC1B,UAAU,CAAC,KAAK,GAAG,GAAG,EAAE;YACtB,aAAa;QACf,CAAC,CAAC;QACF,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9B,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEtB,MAAM,WAAW,GAA0B;YACzC,OAAO;YACP,MAAM,EAAE;gBACN,QAAQ,EAAE,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE;gBACrC,IAAI,EAAE,UAAU;gBAChB,OAAO;aACR;YACD,eAAe,EAAE,MAAM,CAAC,SAAS;SAClC,CAAC;QAEF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACrE,OAAO,MAAM,IAAA,8BAAW,EAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IAEO,cAAc,CAAC,MAAuC;QAC5D,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,EAAE,CAAC;YACxB,IAAI,CAAC,CAAC,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,CAAC;gBACxC,OAAO,KAAK,CAAC;YACf,CAAC;YACD,OAAO,WAAW,IAAI,MAAM,CAAC;QAC/B,CAAC;QACD,OAAO,MAAM,CAAC,IAAI,KAAK,YAAY,CAAC;IACtC,CAAC;CACF;AAjED,gFAiEC","sourcesContent":["import type {\n  IActionQuerySourceIdentify,\n  IActorQuerySourceIdentifyOutput,\n  IActorQuerySourceIdentifyArgs,\n  MediatorQuerySourceIdentify,\n} from '@comunica/bus-query-source-identify';\nimport { ActorQuerySourceIdentify } from '@comunica/bus-query-source-identify';\nimport type { IActionRdfParseHandle, MediatorRdfParseHandle } from '@comunica/bus-rdf-parse';\nimport type { IActorTest } from '@comunica/core';\nimport type {\n  IQuerySourceSerialized,\n  QuerySourceUnidentifiedExpanded,\n  IActionContext,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { storeStream } from 'rdf-store-stream';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica Serialized Query Source Identify Actor.\n */\nexport class ActorQuerySourceIdentifySerialized extends ActorQuerySourceIdentify {\n  public readonly cacheSize: number;\n  public readonly mediatorRdfParse: MediatorRdfParseHandle;\n  public readonly mediatorQuerySourceIdentify: MediatorQuerySourceIdentify;\n  public constructor(args: IActorQuerySourceIdentifySerializedArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionQuerySourceIdentify): Promise<IActorTest> {\n    if (!this.isStringSource(action.querySourceUnidentified)) {\n      throw new Error(`${this.name} requires a single query source with serialized type to be present in the context.`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionQuerySourceIdentify): Promise<IActorQuerySourceIdentifyOutput> {\n    // Delegate source identification to the same bus again, by converting the string into an RDF/JS source\n    return await this.mediatorQuerySourceIdentify.mediate({\n      querySourceUnidentified: {\n        type: 'rdfjs',\n        value: await this.getRdfSource(action.context, <IQuerySourceSerialized> action.querySourceUnidentified),\n        context: action.querySourceUnidentified.context,\n      },\n      context: action.context,\n    });\n  }\n\n  /**\n   * Parses the string data source through the RDF parse bus, returning the RDF source.\n   * @param context The run action context\n   * @param source The source from the run action context\n   * @returns Parsed RDF source that can be passed to quad pattern resolve mediator as an RDF/JS source\n   */\n  protected async getRdfSource(context: IActionContext, source: IQuerySourceSerialized): Promise<RDF.Source> {\n    const textStream = new Readable({ objectMode: true });\n    /* istanbul ignore next */\n    textStream._read = () => {\n      // Do nothing\n    };\n    textStream.push(source.value);\n    textStream.push(null);\n\n    const parseAction: IActionRdfParseHandle = {\n      context,\n      handle: {\n        metadata: { baseIRI: source.baseIRI },\n        data: textStream,\n        context,\n      },\n      handleMediaType: source.mediaType,\n    };\n\n    const parseResult = await this.mediatorRdfParse.mediate(parseAction);\n    return await storeStream(parseResult.handle.data);\n  }\n\n  private isStringSource(source: QuerySourceUnidentifiedExpanded): source is IQuerySourceSerialized {\n    if (!('type' in source)) {\n      if (!(typeof source.value === 'string')) {\n        return false;\n      }\n      return 'mediaType' in source;\n    }\n    return source.type === 'serialized';\n  }\n}\n\nexport interface IActorQuerySourceIdentifySerializedArgs extends IActorQuerySourceIdentifyArgs {\n  /**\n   * The quad pattern parser mediator.\n   */\n  mediatorRdfParse: MediatorRdfParseHandle;\n  /**\n   * The query source identify mediator.\n   */\n  mediatorQuerySourceIdentify: MediatorQuerySourceIdentify;\n}\n"]}