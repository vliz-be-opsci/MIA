{"version":3,"file":"ActorRdfResolveHypermediaLinksTraverseReplaceConditional.js","sourceRoot":"","sources":["ActorRdfResolveHypermediaLinksTraverseReplaceConditional.ts"],"names":[],"mappings":";;;AAKA,iGAA4F;AAG5F;;GAEG;AACH,MAAa,wDAAyD,SAAQ,iEAA8B;IAQ1G,YAAmB,IAAmE;QACpF,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAwC;QACxD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,wCAAwC,CAAC,CAAC;QAC9E,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,mDAAmD,CAAC,CAAC;QACzF,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAwC;QACvD,+CAA+C;QAC/C,MAAM,SAAS,GAAG,EAAE,GAAG,MAAM,EAAE,QAAQ,EAAE,EAAE,GAAG,MAAM,CAAC,QAAQ,EAAE,EAAC,CAAC;QACjE,OAAO,SAAS,CAAC,QAAQ,CAAC,mBAAmB,CAAC;QAE9C,6BAA6B;QAC7B,MAAM,KAAK,GAAY,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAChD,MAAM,gBAAgB,GAA0B,MAAM,CAAC,WAAW,CAAW,MAAM,CAAC,QAAQ,CAAC,mBAAoB;aAC9G,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAE,CAAC,CAAC,CAAC;QAEpC,iEAAiE;QACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,IAAI,CAAC,GAAG,IAAI,gBAAgB,EAAE,CAAC;gBACjC,KAAK,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;QAED,4BAA4B;QAC5B,SAAS,CAAC,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;QAEpC,yCAAyC;QACzC,OAAO,IAAI,CAAC,iCAAiC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnE,CAAC;CACF;AA9CD,4HA8CC","sourcesContent":["import type {\n  IActionRdfResolveHypermediaLinks,\n  IActorRdfResolveHypermediaLinksOutput,\n  ILink,\n} from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport { ActorRdfResolveHypermediaLinks } from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport type { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\n\n/**\n * A comunica Traverse Replace Conditional RDF Resolve Hypermedia Links Actor.\n */\nexport class ActorRdfResolveHypermediaLinksTraverseReplaceConditional extends ActorRdfResolveHypermediaLinks {\n  private readonly mediatorRdfResolveHypermediaLinks: Mediator<\n  Actor<IActionRdfResolveHypermediaLinks, IActorTest, IActorRdfResolveHypermediaLinksOutput>,\n  IActionRdfResolveHypermediaLinks,\nIActorTest,\nIActorRdfResolveHypermediaLinksOutput\n>;\n\n  public constructor(args: IActorRdfResolveHypermediaLinksTraverseReplaceConditionalArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfResolveHypermediaLinks): Promise<IActorTest> {\n    if (!action.metadata.traverse) {\n      throw new Error(`Actor ${this.name} requires a 'traverse' metadata entry.`);\n    }\n    if (!action.metadata.traverseConditional) {\n      throw new Error(`Actor ${this.name} requires a 'traverseConditional' metadata entry.`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionRdfResolveHypermediaLinks): Promise<IActorRdfResolveHypermediaLinksOutput> {\n    // Clone the action without traverseConditional\n    const subAction = { ...action, metadata: { ...action.metadata }};\n    delete subAction.metadata.traverseConditional;\n\n    // Obtain links from metadata\n    const links: ILink[] = action.metadata.traverse;\n    const linksConditional: Record<string, ILink> = Object.fromEntries((<ILink[]>action.metadata.traverseConditional)\n      .map(link => [ link.url, link ]));\n\n    // Replace links with their conditional counterpart if they exist\n    for (let i = 0; i < links.length; i++) {\n      const link = links[i];\n      if (link.url in linksConditional) {\n        links[i] = linksConditional[link.url];\n      }\n    }\n\n    // Update metadata in action\n    subAction.metadata.traverse = links;\n\n    // Forward updated metadata to next actor\n    return this.mediatorRdfResolveHypermediaLinks.mediate(subAction);\n  }\n}\n\nexport interface IActorRdfResolveHypermediaLinksTraverseReplaceConditionalArgs extends IActorArgs<\nIActionRdfResolveHypermediaLinks,\nIActorTest,\nIActorRdfResolveHypermediaLinksOutput\n> {\n  mediatorRdfResolveHypermediaLinks: Mediator<\n  Actor<IActionRdfResolveHypermediaLinks, IActorTest, IActorRdfResolveHypermediaLinksOutput>,\n  IActionRdfResolveHypermediaLinks,\nIActorTest,\nIActorRdfResolveHypermediaLinksOutput\n>;\n}\n"]}