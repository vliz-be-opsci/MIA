"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorRdfResolveHypermediaLinksTraverseReplaceConditional = void 0;
const bus_rdf_resolve_hypermedia_links_1 = require("@comunica/bus-rdf-resolve-hypermedia-links");
/**
 * A comunica Traverse Replace Conditional RDF Resolve Hypermedia Links Actor.
 */
class ActorRdfResolveHypermediaLinksTraverseReplaceConditional extends bus_rdf_resolve_hypermedia_links_1.ActorRdfResolveHypermediaLinks {
    constructor(args) {
        super(args);
    }
    async test(action) {
        if (!action.metadata.traverse) {
            throw new Error(`Actor ${this.name} requires a 'traverse' metadata entry.`);
        }
        if (!action.metadata.traverseConditional) {
            throw new Error(`Actor ${this.name} requires a 'traverseConditional' metadata entry.`);
        }
        return true;
    }
    async run(action) {
        // Clone the action without traverseConditional
        const subAction = { ...action, metadata: { ...action.metadata } };
        delete subAction.metadata.traverseConditional;
        // Obtain links from metadata
        const links = action.metadata.traverse;
        const linksConditional = Object.fromEntries(action.metadata.traverseConditional
            .map(link => [link.url, link]));
        // Replace links with their conditional counterpart if they exist
        for (let i = 0; i < links.length; i++) {
            const link = links[i];
            if (link.url in linksConditional) {
                links[i] = linksConditional[link.url];
            }
        }
        // Update metadata in action
        subAction.metadata.traverse = links;
        // Forward updated metadata to next actor
        return this.mediatorRdfResolveHypermediaLinks.mediate(subAction);
    }
}
exports.ActorRdfResolveHypermediaLinksTraverseReplaceConditional = ActorRdfResolveHypermediaLinksTraverseReplaceConditional;
//# sourceMappingURL=ActorRdfResolveHypermediaLinksTraverseReplaceConditional.js.map