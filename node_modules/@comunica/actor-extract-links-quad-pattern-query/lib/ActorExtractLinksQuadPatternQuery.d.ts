import type { IActionExtractLinks, IActorExtractLinksOutput } from '@comunica/bus-extract-links';
import { ActorExtractLinks } from '@comunica/bus-extract-links';
import type { IActorArgs, IActorTest } from '@comunica/core';
import type { IActionContext } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
import type { Algebra } from 'sparqlalgebrajs';
/**
 * A comunica Traverse Quad Pattern Query RDF Metadata Extract Actor.
 */
export declare class ActorExtractLinksQuadPatternQuery extends ActorExtractLinks {
    private readonly onlyVariables;
    constructor(args: IActorExtractLinksQuadPatternQueryArgs);
    static getCurrentQuery(context: IActionContext): Algebra.Operation | undefined;
    static matchQuadPatternInOperation(quad: RDF.Quad, operation: Algebra.Operation): RDF.BaseQuad[];
    test(action: IActionExtractLinks): Promise<IActorTest>;
    run(action: IActionExtractLinks): Promise<IActorExtractLinksOutput>;
}
export interface IActorExtractLinksQuadPatternQueryArgs extends IActorArgs<IActionExtractLinks, IActorTest, IActorExtractLinksOutput> {
    /**
     * If only links that match a variable in the query should be included.
     * @default {true}
     */
    onlyVariables: boolean;
}
