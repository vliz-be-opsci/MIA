{"version":3,"file":"ActorInitQueryBase.js","sourceRoot":"","sources":["ActorInitQueryBase.ts"],"names":[],"mappings":";;;AAEA,iDAA+C;AAS/C;;GAEG;AACH,MAAa,kBAAmB,SAAQ,oBAAS;IAYxC,KAAK,CAAC,IAAI,CAAC,OAAoB;QACpC,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,OAAoB;QACnC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAC1E,CAAC;CACF;AAnBD,gDAmBC","sourcesContent":["import type { MediatorHttpInvalidate } from '@comunica/bus-http-invalidate';\nimport type { IActionInit, IActorInitArgs, IActorOutputInit } from '@comunica/bus-init';\nimport { ActorInit } from '@comunica/bus-init';\nimport type { MediatorQueryProcess } from '@comunica/bus-query-process';\nimport type {\n  MediatorQueryResultSerializeHandle,\n  MediatorQueryResultSerializeMediaTypes,\n  MediatorQueryResultSerializeMediaTypeFormats,\n} from '@comunica/bus-query-result-serialize';\nimport type { IActorTest } from '@comunica/core';\n\n/**\n * A browser-safe comunica Query Init Actor.\n */\nexport class ActorInitQueryBase extends ActorInit implements IActorInitQueryBaseArgs {\n  public readonly mediatorQueryResultSerialize: MediatorQueryResultSerializeHandle;\n  public readonly mediatorQueryResultSerializeMediaTypeCombiner: MediatorQueryResultSerializeMediaTypes;\n  public readonly mediatorQueryResultSerializeMediaTypeFormatCombiner: MediatorQueryResultSerializeMediaTypeFormats;\n  public readonly mediatorHttpInvalidate: MediatorHttpInvalidate;\n  public readonly mediatorQueryProcess: MediatorQueryProcess;\n\n  public readonly queryString?: string;\n  public readonly defaultQueryInputFormat?: string;\n  public readonly allowNoSources?: boolean;\n  public readonly context?: string;\n\n  public async test(_action: IActionInit): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(_action: IActionInit): Promise<IActorOutputInit> {\n    throw new Error('ActorInitSparql#run is not supported in the browser.');\n  }\n}\n\nexport interface IActorInitQueryBaseArgs extends IActorInitArgs {\n  /**\n   * The query process mediator\n   */\n  mediatorQueryProcess: MediatorQueryProcess;\n  /**\n   * The query serialize mediator\n   */\n  mediatorQueryResultSerialize: MediatorQueryResultSerializeHandle;\n  /**\n   * The query serialize media type combinator\n   */\n  mediatorQueryResultSerializeMediaTypeCombiner: MediatorQueryResultSerializeMediaTypes;\n  /**\n   * The query serialize media type format combinator\n   */\n  mediatorQueryResultSerializeMediaTypeFormatCombiner: MediatorQueryResultSerializeMediaTypeFormats;\n  /**\n   * The HTTP cache invalidation mediator\n   */\n  mediatorHttpInvalidate: MediatorHttpInvalidate;\n\n  /**\n   * A SPARQL query string\n   */\n  queryString?: string;\n  /**\n   * The default query input format\n   * @default {sparql}\n   */\n  defaultQueryInputFormat?: string;\n  /**\n   * If it should be allowed that the user passes no sources.\n   * @default {false}\n   */\n  allowNoSources?: boolean;\n  /**\n   * A JSON string of a query operation context\n   */\n  context?: string;\n}\n"]}