{"version":3,"file":"QueryEngineBase.js","sourceRoot":"","sources":["QueryEngineBase.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionSparqlSerialize, IActorQueryResultSerializeOutput } from '@comunica/bus-query-result-serialize';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport { ActionContext } from '@comunica/core';\nimport type {\n  IActionContext,\n  IQueryOperationResult,\n  IQueryEngine,\n  IQueryExplained,\n  QueryFormatType,\n  QueryType,\n  QueryExplainMode,\n  BindingsStream,\n  QueryAlgebraContext,\n  QueryStringContext,\n  IQueryBindingsEnhanced,\n  IQueryQuadsEnhanced,\n  QueryEnhanced,\n  IQueryContextCommon,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport type { ActorInitQueryBase } from './ActorInitQueryBase';\n\n/**\n * Base implementation of a Comunica query engine.\n */\nexport class QueryEngineBase<\n  // eslint-disable-next-line unused-imports/no-unused-vars\n  QueryContext extends IQueryContextCommon = IQueryContextCommon,\n  QueryStringContextInner extends RDF.QueryStringContext = QueryStringContext,\n  QueryAlgebraContextInner extends RDF.QueryAlgebraContext = QueryAlgebraContext,\n>\nimplements IQueryEngine<QueryStringContextInner, QueryAlgebraContextInner> {\n  private readonly actorInitQuery: ActorInitQueryBase;\n\n  public constructor(actorInitQuery: ActorInitQueryBase) {\n    this.actorInitQuery = actorInitQuery;\n  }\n\n  public async queryBindings<QueryFormatTypeInner extends QueryFormatType>(\n    query: QueryFormatTypeInner,\n    context?: QueryFormatTypeInner extends string ? QueryStringContextInner : QueryAlgebraContextInner,\n  ): Promise<BindingsStream> {\n    return this.queryOfType<QueryFormatTypeInner, IQueryBindingsEnhanced>(query, context, 'bindings');\n  }\n\n  public async queryQuads<QueryFormatTypeInner extends QueryFormatType>(\n    query: QueryFormatTypeInner,\n    context?: QueryFormatTypeInner extends string ? QueryStringContextInner : QueryAlgebraContextInner,\n  ): Promise<AsyncIterator<RDF.Quad> & RDF.ResultStream<RDF.Quad>> {\n    return this.queryOfType<QueryFormatTypeInner, IQueryQuadsEnhanced>(query, context, 'quads');\n  }\n\n  public async queryBoolean<QueryFormatTypeInner extends QueryFormatType>(\n    query: QueryFormatTypeInner,\n    context?: QueryFormatTypeInner extends string ? QueryStringContextInner : QueryAlgebraContextInner,\n  ): Promise<boolean> {\n    return this.queryOfType<QueryFormatTypeInner, RDF.QueryBoolean>(query, context, 'boolean');\n  }\n\n  public async queryVoid<QueryFormatTypeInner extends QueryFormatType>(\n    query: QueryFormatTypeInner,\n    context?: QueryFormatTypeInner extends string ? QueryStringContextInner : QueryAlgebraContextInner,\n  ): Promise<void> {\n    return this.queryOfType<QueryFormatTypeInner, RDF.QueryVoid>(query, context, 'void');\n  }\n\n  protected async queryOfType<QueryFormatTypeInner extends QueryFormatType, QueryTypeOut extends QueryEnhanced>(\n    query: QueryFormatTypeInner,\n    context: undefined | (QueryFormatTypeInner extends string ?\n      QueryStringContextInner : QueryAlgebraContextInner),\n    expectedType: QueryTypeOut['resultType'],\n  ): Promise<ReturnType<QueryTypeOut['execute']>> {\n    const result = await this.query<QueryFormatTypeInner>(query, context);\n    if (result.resultType === expectedType) {\n      return <ReturnType<QueryTypeOut['execute']>> await result.execute();\n    }\n    throw new Error(`Query result type '${expectedType}' was expected, while '${result.resultType}' was found.`);\n  }\n\n  /**\n   * Evaluate the given query\n   * @param query A query string or algebra.\n   * @param context An optional query context.\n   * @return {Promise<QueryType>} A promise that resolves to the query output.\n   */\n  public async query<QueryFormatTypeInner extends QueryFormatType>(\n    query: QueryFormatTypeInner,\n    context?: QueryFormatTypeInner extends string ? QueryStringContextInner : QueryAlgebraContextInner,\n  ): Promise<QueryType> {\n    const output = await this.queryOrExplain(query, context);\n    if ('explain' in output) {\n      throw new Error(`Tried to explain a query when in query-only mode`);\n    }\n    return output;\n  }\n\n  /**\n   * Explain the given query\n   * @param query A query string or algebra.\n   * @param context An optional query context.\n   * @param explainMode The explain mode.\n   * @return {Promise<QueryType | IQueryExplained>} A promise that resolves to\n   *                                                               the query output or explanation.\n   */\n  public async explain<QueryFormatTypeInner extends QueryFormatType>(\n    query: QueryFormatTypeInner,\n    context: QueryFormatTypeInner extends string ? QueryStringContextInner : QueryAlgebraContextInner,\n    explainMode: QueryExplainMode,\n  ): Promise<IQueryExplained> {\n    context.explain = explainMode;\n    const output = await this.queryOrExplain(query, context);\n    return <IQueryExplained> output;\n  }\n\n  /**\n   * Evaluate or explain the given query\n   * @param query A query string or algebra.\n   * @param context An optional query context.\n   * @return {Promise<QueryType | IQueryExplained>} A promise that resolves to\n   *                                                               the query output or explanation.\n   */\n  public async queryOrExplain<QueryFormatTypeInner extends QueryFormatType>(\n    query: QueryFormatTypeInner,\n    context?: QueryFormatTypeInner extends string ? QueryStringContextInner : QueryAlgebraContextInner,\n  ): Promise<QueryType | IQueryExplained> {\n    const actionContext: IActionContext = ActionContext.ensureActionContext(context);\n\n    // Invalidate caches if cache argument is set to false\n    if (actionContext.get(KeysInitQuery.noCache)) {\n      await this.invalidateHttpCache();\n    }\n\n    // Invoke query process\n    const { result } = await this.actorInitQuery.mediatorQueryProcess.mediate({ query, context: actionContext });\n    if ('explain' in result) {\n      return result;\n    }\n    return QueryEngineBase.internalToFinalResult(result);\n  }\n\n  /**\n   * @param context An optional context.\n   * @return {Promise<{[p: string]: number}>} All available SPARQL (weighted) result media types.\n   */\n  public async getResultMediaTypes(context?: any): Promise<Record<string, number>> {\n    context = ActionContext.ensureActionContext(context);\n    return (await this.actorInitQuery.mediatorQueryResultSerializeMediaTypeCombiner\n      .mediate({ context, mediaTypes: true })).mediaTypes;\n  }\n\n  /**\n   * @param context An optional context.\n   * @return {Promise<{[p: string]: number}>} All available SPARQL result media type formats.\n   */\n  public async getResultMediaTypeFormats(context?: any): Promise<Record<string, string>> {\n    context = ActionContext.ensureActionContext(context);\n    return (await this.actorInitQuery.mediatorQueryResultSerializeMediaTypeFormatCombiner\n      .mediate({ context, mediaTypeFormats: true })).mediaTypeFormats;\n  }\n\n  /**\n   * Convert a query result to a string stream based on a certain media type.\n   * @param {IQueryOperationResult} queryResult A query result.\n   * @param {string} mediaType A media type.\n   * @param {ActionContext} context An optional context.\n   * @return {Promise<IActorQueryResultSerializeOutput>} A text stream.\n   */\n  public async resultToString(queryResult: RDF.Query<any>, mediaType?: string, context?: any):\n  Promise<IActorQueryResultSerializeOutput> {\n    context = ActionContext.ensureActionContext(context);\n    if (!mediaType) {\n      switch (queryResult.resultType) {\n        case 'bindings':\n          mediaType = 'application/json';\n          break;\n        case 'quads':\n          mediaType = 'application/trig';\n          break;\n        default:\n          mediaType = 'simple';\n          break;\n      }\n    }\n    const handle: IActionSparqlSerialize = { ...await QueryEngineBase.finalToInternalResult(queryResult), context };\n    return (await this.actorInitQuery.mediatorQueryResultSerialize\n      .mediate({ context, handle, handleMediaType: mediaType })).handle;\n  }\n\n  /**\n   * Invalidate all internal caches related to the given page URL.\n   * If no page URL is given, then all pages will be invalidated.\n   * @param {string} url The page URL to invalidate.\n   * @param context An optional ActionContext to pass to the actors.\n   * @return {Promise<any>} A promise resolving when the caches have been invalidated.\n   */\n  public invalidateHttpCache(url?: string, context?: any): Promise<any> {\n    context = ActionContext.ensureActionContext(context);\n    return this.actorInitQuery.mediatorHttpInvalidate.mediate({ url, context });\n  }\n\n  /**\n   * Convert an internal query result to a final one.\n   * @param internalResult An intermediary query result.\n   */\n  public static internalToFinalResult(internalResult: IQueryOperationResult): QueryType {\n    switch (internalResult.type) {\n      case 'bindings':\n        return {\n          resultType: 'bindings',\n          execute: async() => internalResult.bindingsStream,\n          metadata: async() => <any> await internalResult.metadata(),\n          context: internalResult.context,\n        };\n      case 'quads':\n        return {\n          resultType: 'quads',\n          execute: async() => internalResult.quadStream,\n          metadata: async() => <any> await internalResult.metadata(),\n          context: internalResult.context,\n        };\n      case 'boolean':\n        return {\n          resultType: 'boolean',\n          execute: async() => internalResult.execute(),\n          context: internalResult.context,\n        };\n      case 'void':\n        return {\n          resultType: 'void',\n          execute: async() => internalResult.execute(),\n          context: internalResult.context,\n        };\n    }\n  }\n\n  /**\n   * Convert a final query result to an internal one.\n   * @param finalResult A final query result.\n   */\n  public static async finalToInternalResult(finalResult: RDF.Query<any>): Promise<IQueryOperationResult> {\n    switch (finalResult.resultType) {\n      case 'bindings':\n        return {\n          type: 'bindings',\n          bindingsStream: <BindingsStream> await finalResult.execute(),\n          metadata: async() => <any> await finalResult.metadata(),\n        };\n      case 'quads':\n        return {\n          type: 'quads',\n          quadStream: <AsyncIterator<RDF.Quad>> await finalResult.execute(),\n          metadata: async() => <any> await finalResult.metadata(),\n        };\n      case 'boolean':\n        return {\n          type: 'boolean',\n          execute: () => finalResult.execute(),\n        };\n      case 'void':\n        return {\n          type: 'void',\n          execute: () => finalResult.execute(),\n        };\n    }\n  }\n}\n"]}