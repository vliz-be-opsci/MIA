{"version":3,"file":"ActorQueryOperationNop.js","sourceRoot":"","sources":["ActorQueryOperationNop.ts"],"names":[],"mappings":";;;AAAA,iEAA6D;AAG7D,uEAAiF;AAEjF,iDAA6D;AAG7D,iDAAkD;AAGlD;;;GAGG;AACH,MAAa,sBAAuB,SAAQ,sDAA6C;IAGvF,YAAmB,IAAiC;QAClD,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAAuB,EAAE,QAAwB;QAC1E,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAsB,EAAE,OAAuB;QACvE,MAAM,eAAe,GAAG,MAAM,kCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;QAEjG,OAAO;YACL,cAAc,EAAE,IAAI,iCAAiB,CAAe,eAAe,CAAC,QAAQ,EAAE,CAAC;YAC/E,QAAQ,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC9B,KAAK,EAAE,IAAI,kCAAuB,EAAE;gBACpC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;gBACxC,gBAAgB,EAAE,KAAK;gBACvB,SAAS,EAAE,EAAE;aACd,CAAC;YACF,IAAI,EAAE,UAAU;SACjB,CAAC;IACJ,CAAC;CACF;AAzBD,wDAyBC","sourcesContent":["import { BindingsFactory } from '@comunica/bindings-factory';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport { MetadataValidationState } from '@comunica/metadata';\nimport type { IActionContext, IQueryOperationResult } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { SingletonIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation)\n * actor that handles SPARQL nop operations.\n */\nexport class ActorQueryOperationNop extends ActorQueryOperationTypedMediated<Algebra.Nop> {\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorQueryOperationNopArgs) {\n    super(args, 'nop');\n  }\n\n  public async testOperation(_operation: Algebra.Nop, _context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Nop, context: IActionContext): Promise<IQueryOperationResult> {\n    const bindingsFactory = await BindingsFactory.create(this.mediatorMergeBindingsContext, context);\n\n    return {\n      bindingsStream: new SingletonIterator<RDF.Bindings>(bindingsFactory.bindings()),\n      metadata: () => Promise.resolve({\n        state: new MetadataValidationState(),\n        cardinality: { type: 'exact', value: 1 },\n        canContainUndefs: false,\n        variables: [],\n      }),\n      type: 'bindings',\n    };\n  }\n}\n\nexport interface IActorQueryOperationNopArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}