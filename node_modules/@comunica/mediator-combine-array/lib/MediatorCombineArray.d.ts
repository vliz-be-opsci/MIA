import type { Actor, IAction, IActorOutput, IActorTest, IMediatorArgs } from '@comunica/core';
import { Mediator } from '@comunica/core';
/**
 * A comunica mediator that concatenates an array of all actor results.
 *
 * The actors that are registered first will appear earlier in the array.
 */
export declare class MediatorCombineArray<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput> extends Mediator<A, I, T, O> implements IMediatorCombineUnionArgs<A, I, T, O> {
    readonly filterErrors: boolean | undefined;
    readonly fields: string[];
    readonly combiner: (results: O[]) => O;
    constructor(args: IMediatorCombineUnionArgs<A, I, T, O>);
    mediate(action: I): Promise<O>;
    protected mediateWith(): Promise<A>;
    protected createCombiner(): (results: O[]) => O;
}
export interface IMediatorCombineUnionArgs<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput> extends IMediatorArgs<A, I, T, O> {
    /**
     * If actors that throw test errors should be ignored
     */
    filterErrors?: boolean;
    /**
     * The field names of the test result fields over which must be mediated.
     */
    fields: string[];
}
