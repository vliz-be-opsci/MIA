"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediatorCombineArray = void 0;
const core_1 = require("@comunica/core");
/**
 * A comunica mediator that concatenates an array of all actor results.
 *
 * The actors that are registered first will appear earlier in the array.
 */
class MediatorCombineArray extends core_1.Mediator {
    constructor(args) {
        super(args);
        this.combiner = this.createCombiner();
    }
    async mediate(action) {
        let testResults;
        try {
            testResults = this.publish(action);
        }
        catch {
            testResults = [];
        }
        if (this.filterErrors) {
            const _testResults = [];
            for (const result of testResults) {
                try {
                    await result.reply;
                    _testResults.push(result);
                }
                catch {
                    // Ignore errors
                }
            }
            testResults = _testResults;
        }
        // Delegate test errors.
        await Promise.all(testResults.map(({ reply }) => reply));
        // Run action on all actors.
        const results = await Promise.all(testResults.map(result => result.actor.runObservable(action)));
        // Return the combined results.
        return this.combiner(results);
    }
    mediateWith() {
        throw new Error('Method not supported.');
    }
    createCombiner() {
        return (results) => {
            const data = {};
            for (const field of this.fields) {
                data[field] = [];
                // eslint-disable-next-line unicorn/prefer-spread
                for (const value of [[]].concat(results.map((result) => result[field]))) {
                    if (value) {
                        data[field].push(...value);
                    }
                }
            }
            return data;
        };
    }
}
exports.MediatorCombineArray = MediatorCombineArray;
//# sourceMappingURL=MediatorCombineArray.js.map