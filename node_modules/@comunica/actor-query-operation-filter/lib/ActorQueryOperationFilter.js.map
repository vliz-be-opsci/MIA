{"version":3,"file":"ActorQueryOperationFilter.js","sourceRoot":"","sources":["ActorQueryOperationFilter.ts"],"names":[],"mappings":";;;AAAA,iEAA+E;AAG/E,uEAGuC;AAEvC,yEAAmF;AAInF;;GAEG;AACH,MAAa,yBAA0B,SAAQ,sDAAgD;IAG7F,YAAmB,IAA4C;QAC7D,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAyB,EAAE,OAAuB;QAC3E,6CAA6C;QAC7C,MAAM,eAAe,GAAG,MAAM,kCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;QACjG,MAAM,MAAM,GAAG,EAAE,GAAG,yCAAmB,CAAC,yBAAyB,CAC/D,OAAO,EACP,IAAI,CAAC,sBAAsB,EAC3B,eAAe,CAChB,EAAE,CAAC;QACJ,MAAM,CAAC,GAAG,IAAI,qCAAc,CAAC,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC3D,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAyB,EAAE,OAAuB;QAE1E,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QACrG,MAAM,MAAM,GAAG,yCAAmB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC9D,yCAAmB,CAAC,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAE5D,MAAM,eAAe,GAAG,MAAM,kCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;QACjG,MAAM,MAAM,GAAG,EAAE,GAAG,yCAAmB,CAAC,yBAAyB,CAC/D,OAAO,EACP,IAAI,CAAC,sBAAsB,EAC3B,eAAe,CAChB,EAAE,CAAC;QACJ,MAAM,SAAS,GAAG,IAAI,qCAAc,CAAC,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAEnE,MAAM,SAAS,GAAG,KAAK,EAAC,IAAc,EAAE,IAAS,EAAE,IAAkC,EAAiB,EAAE;YACtG,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACnD,IAAI,MAAM,EAAE,CAAC;oBACX,IAAI,CAAC,IAAI,CAAC,CAAC;gBACb,CAAC;YACH,CAAC;YAAC,OAAO,KAAc,EAAE,CAAC;gBACxB,mCAAmC;gBACnC,mEAAmE;gBACnE,EAAE;gBACF,wDAAwD;gBACxD,2DAA2D;gBAC3D,6DAA6D;gBAC7D,QAAQ;gBACR,8DAA8D;gBAC9D,oDAAoD;gBACpD,IAAI,IAAA,wCAAiB,EAAS,KAAK,CAAC,EAAE,CAAC;oBACrC,qGAAqG;oBACrG,+FAA+F;oBAC/F,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,iCAAiC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAA,mCAAgB,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChH,CAAC;qBAAM,CAAC;oBACN,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACtC,CAAC;YACH,CAAC;YACD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;QAEF,kDAAkD;QAClD,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAW,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAClG,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC;IACzE,CAAC;CACF;AAhED,8DAgEC","sourcesContent":["import { BindingsFactory, bindingsToString } from '@comunica/bindings-factory';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport { AsyncEvaluator, isExpressionError } from '@comunica/expression-evaluator';\nimport type { Bindings, IActionContext, IQueryOperationResult } from '@comunica/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Filter Sparqlee Query Operation Actor.\n */\nexport class ActorQueryOperationFilter extends ActorQueryOperationTypedMediated<Algebra.Filter> {\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorQueryOperationFilterSparqleeArgs) {\n    super(args, 'filter');\n  }\n\n  public async testOperation(operation: Algebra.Filter, context: IActionContext): Promise<IActorTest> {\n    // Will throw error for unsupported operators\n    const bindingsFactory = await BindingsFactory.create(this.mediatorMergeBindingsContext, context);\n    const config = { ...ActorQueryOperation.getAsyncExpressionContext(\n      context,\n      this.mediatorQueryOperation,\n      bindingsFactory,\n    ) };\n    const _ = new AsyncEvaluator(operation.expression, config);\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Filter, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const outputRaw = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });\n    const output = ActorQueryOperation.getSafeBindings(outputRaw);\n    ActorQueryOperation.validateQueryOutput(output, 'bindings');\n\n    const bindingsFactory = await BindingsFactory.create(this.mediatorMergeBindingsContext, context);\n    const config = { ...ActorQueryOperation.getAsyncExpressionContext(\n      context,\n      this.mediatorQueryOperation,\n      bindingsFactory,\n    ) };\n    const evaluator = new AsyncEvaluator(operation.expression, config);\n\n    const transform = async(item: Bindings, next: any, push: (bindings: Bindings) => void): Promise<void> => {\n      try {\n        const result = await evaluator.evaluateAsEBV(item);\n        if (result) {\n          push(item);\n        }\n      } catch (error: unknown) {\n        // We ignore all Expression errors.\n        // Other errors (likely programming mistakes) are still propagated.\n        //\n        // > Specifically, FILTERs eliminate any solutions that,\n        // > when substituted into the expression, either result in\n        // > an effective boolean value of false or produce an error.\n        // > ...\n        // > These errors have no effect outside of FILTER evaluation.\n        // https://www.w3.org/TR/sparql11-query/#expressions\n        if (isExpressionError(<Error> error)) {\n          // In many cases, this is a user error, where the user should manually cast the variable to a string.\n          // In order to help users debug this, we should report these errors via the logger as warnings.\n          this.logWarn(context, 'Error occurred while filtering.', () => ({ error, bindings: bindingsToString(item) }));\n        } else {\n          bindingsStream.emit('error', error);\n        }\n      }\n      next();\n    };\n\n    // eslint-disable-next-line ts/no-misused-promises\n    const bindingsStream = output.bindingsStream.transform<Bindings>({ transform, autoStart: false });\n    return { type: 'bindings', bindingsStream, metadata: output.metadata };\n  }\n}\n\nexport interface IActorQueryOperationFilterSparqleeArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}