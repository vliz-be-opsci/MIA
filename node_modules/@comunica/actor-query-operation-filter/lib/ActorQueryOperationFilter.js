"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryOperationFilter = void 0;
const bindings_factory_1 = require("@comunica/bindings-factory");
const bus_query_operation_1 = require("@comunica/bus-query-operation");
const expression_evaluator_1 = require("@comunica/expression-evaluator");
/**
 * A comunica Filter Sparqlee Query Operation Actor.
 */
class ActorQueryOperationFilter extends bus_query_operation_1.ActorQueryOperationTypedMediated {
    constructor(args) {
        super(args, 'filter');
    }
    async testOperation(operation, context) {
        // Will throw error for unsupported operators
        const bindingsFactory = await bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context);
        const config = { ...bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation, bindingsFactory) };
        const _ = new expression_evaluator_1.AsyncEvaluator(operation.expression, config);
        return true;
    }
    async runOperation(operation, context) {
        const outputRaw = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(outputRaw);
        bus_query_operation_1.ActorQueryOperation.validateQueryOutput(output, 'bindings');
        const bindingsFactory = await bindings_factory_1.BindingsFactory.create(this.mediatorMergeBindingsContext, context);
        const config = { ...bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation, bindingsFactory) };
        const evaluator = new expression_evaluator_1.AsyncEvaluator(operation.expression, config);
        const transform = async (item, next, push) => {
            try {
                const result = await evaluator.evaluateAsEBV(item);
                if (result) {
                    push(item);
                }
            }
            catch (error) {
                // We ignore all Expression errors.
                // Other errors (likely programming mistakes) are still propagated.
                //
                // > Specifically, FILTERs eliminate any solutions that,
                // > when substituted into the expression, either result in
                // > an effective boolean value of false or produce an error.
                // > ...
                // > These errors have no effect outside of FILTER evaluation.
                // https://www.w3.org/TR/sparql11-query/#expressions
                if ((0, expression_evaluator_1.isExpressionError)(error)) {
                    // In many cases, this is a user error, where the user should manually cast the variable to a string.
                    // In order to help users debug this, we should report these errors via the logger as warnings.
                    this.logWarn(context, 'Error occurred while filtering.', () => ({ error, bindings: (0, bindings_factory_1.bindingsToString)(item) }));
                }
                else {
                    bindingsStream.emit('error', error);
                }
            }
            next();
        };
        // eslint-disable-next-line ts/no-misused-promises
        const bindingsStream = output.bindingsStream.transform({ transform, autoStart: false });
        return { type: 'bindings', bindingsStream, metadata: output.metadata };
    }
}
exports.ActorQueryOperationFilter = ActorQueryOperationFilter;
//# sourceMappingURL=ActorQueryOperationFilter.js.map