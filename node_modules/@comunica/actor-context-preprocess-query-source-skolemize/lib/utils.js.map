{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlankNodeScoped } from '@comunica/data-factory';\nimport type {\n  BindingsStream,\n  IQuerySource,\n  MetadataBindings,\n  MetadataQuads,\n  QuerySourceReference,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { DataFactory } from 'rdf-data-factory';\nimport { mapTermsNested } from 'rdf-terms';\nimport { Algebra, Util } from 'sparqlalgebrajs';\n\nconst DF = new DataFactory();\n\nexport const SKOLEM_PREFIX = 'urn:comunica_skolem:source_';\n\n/**\n * Get the unique, deterministic id for the given source.\n * @param sourceIds ID's of datasources, see KeysRdfResolveQuadPattern.sourceIds.\n * @param source A data source.\n * @return The id of the given source.\n */\nexport function getSourceId(sourceIds: Map<QuerySourceReference, string>, source: IQuerySource): string {\n  let sourceId = sourceIds.get(source.referenceValue);\n  if (sourceId === undefined) {\n    sourceId = `${sourceIds.size}`;\n    sourceIds.set(source.referenceValue, sourceId);\n  }\n  return sourceId;\n}\n\n/**\n * If the given term is a blank node, return a deterministic named node for it\n * based on the source id and the blank node value.\n * @param term Any RDF term.\n * @param sourceId A source identifier.\n * @return If the given term was a blank node, this will return a skolemized named node, otherwise the original term.\n */\nexport function skolemizeTerm(term: RDF.Term, sourceId: string): RDF.Term | BlankNodeScoped {\n  if (term.termType === 'BlankNode') {\n    return new BlankNodeScoped(`bc_${sourceId}_${term.value}`, DF.namedNode(`${SKOLEM_PREFIX}${sourceId}:${term.value}`));\n  }\n  return term;\n}\n\n/**\n * Skolemize all terms in the given quad.\n * @param quad An RDF quad.\n * @param sourceId A source identifier.\n * @return The skolemized quad.\n */\nexport function skolemizeQuad<Q extends RDF.BaseQuad = RDF.Quad>(quad: Q, sourceId: string): Q {\n  return mapTermsNested(quad, term => skolemizeTerm(term, sourceId));\n}\n\n/**\n * Skolemize all terms in the given bindings.\n * @param bindings An RDF bindings object.\n * @param sourceId A source identifier.\n * @return The skolemized bindings.\n */\nexport function skolemizeBindings(bindings: RDF.Bindings, sourceId: string): RDF.Bindings {\n  return bindings.map((term) => {\n    if (term.termType === 'Quad') {\n      return skolemizeQuad(term, sourceId);\n    }\n    return skolemizeTerm(term, sourceId);\n  });\n}\n\n/**\n * Skolemize all terms in the given quad stream.\n * @param iterator An RDF quad stream.\n * @param sourceId A source identifier.\n * @return The skolemized quad stream.\n */\nexport function skolemizeQuadStream(iterator: AsyncIterator<RDF.Quad>, sourceId: string): AsyncIterator<RDF.Quad> {\n  const ret = iterator.map(quad => skolemizeQuad(quad, sourceId));\n  function inheritMetadata(): void {\n    iterator.getProperty('metadata', (metadata: MetadataQuads) => {\n      ret.setProperty('metadata', metadata);\n      metadata.state.addInvalidateListener(inheritMetadata);\n    });\n  }\n  inheritMetadata();\n  return ret;\n}\n\n/**\n * Skolemize all terms in the given bindings stream.\n * @param iterator An RDF bindings stream.\n * @param sourceId A source identifier.\n * @return The skolemized bindings stream.\n */\nexport function skolemizeBindingsStream(iterator: BindingsStream, sourceId: string): BindingsStream {\n  const ret = iterator.map(bindings => skolemizeBindings(bindings, sourceId));\n  function inheritMetadata(): void {\n    iterator.getProperty('metadata', (metadata: MetadataBindings) => {\n      ret.setProperty('metadata', metadata);\n      metadata.state.addInvalidateListener(inheritMetadata);\n    });\n  }\n  inheritMetadata();\n  return ret;\n}\n\n/**\n * If a given term was a skolemized named node for the given source id,\n * deskolemize it again to a blank node.\n * If the given term was a skolemized named node for another source, return false.\n * If the given term was not a skolemized named node, return the original term.\n * @param term Any RDF term.\n * @param sourceId A source identifier.\n */\nexport function deskolemizeTerm(term: RDF.Term, sourceId: string): RDF.Term | null {\n  if (term.termType === 'BlankNode' && 'skolemized' in term) {\n    term = (<BlankNodeScoped> term).skolemized;\n  }\n  if (term.termType === 'NamedNode' && term.value.startsWith(SKOLEM_PREFIX)) {\n    const colonSeparator = term.value.indexOf(':', SKOLEM_PREFIX.length);\n    const termSourceId = term.value.slice(SKOLEM_PREFIX.length, colonSeparator);\n    // We had a skolemized term\n    if (termSourceId === sourceId) {\n      // It came from the correct source\n      const termLabel = term.value.slice(colonSeparator + 1, term.value.length);\n      return DF.blankNode(termLabel);\n    }\n    // It came from a different source\n    return null;\n  }\n  return term;\n}\n\nexport function deskolemizeTermNestedThrowing(term: RDF.Term, sourceId: string): RDF.Term {\n  if (term.termType === 'Quad') {\n    return mapTermsNested(term, (subTerm) => {\n      const deskolemized = deskolemizeTerm(subTerm, sourceId);\n      if (!deskolemized) {\n        throw new Error(`Skolemized term is not in scope for this source`);\n      }\n      return deskolemized;\n    });\n  }\n  const ret = deskolemizeTerm(term, sourceId);\n  if (ret === null) {\n    throw new Error(`Skolemized term is not in scope for this source`);\n  }\n  return ret;\n}\n\n/**\n * Deskolemize all terms in the given quad.\n * @param quad An RDF quad.\n * @param sourceId A source identifier.\n * @return The deskolemized quad.\n */\nexport function deskolemizeQuad<Q extends RDF.BaseQuad = RDF.Quad>(quad: Q, sourceId: string): Q {\n  return mapTermsNested(quad, (term: RDF.Term): RDF.Term => {\n    const newTerm = deskolemizeTerm(term, sourceId);\n    // If the term was skolemized in a different source then don't deskolemize it\n    return newTerm ?? term;\n  });\n}\n\n/**\n * Deskolemize all terms in the given quad.\n * Will return undefined if there is at least one blank node not in scope for this sourceId.\n * @param operation An algebra operation.\n * @param sourceId A source identifier.\n */\nexport function deskolemizeOperation<O extends Algebra.Operation>(operation: O, sourceId: string): O | undefined {\n  try {\n    return <O> Util.mapOperation(operation, {\n      [Algebra.types.PATTERN](op, factory) {\n        return {\n          result: Object.assign(factory.createPattern(\n            deskolemizeTermNestedThrowing(op.subject, sourceId),\n            deskolemizeTermNestedThrowing(op.predicate, sourceId),\n            deskolemizeTermNestedThrowing(op.object, sourceId),\n            deskolemizeTermNestedThrowing(op.graph, sourceId),\n          ), { metadata: op.metadata }),\n          recurse: false,\n        };\n      },\n      [Algebra.types.PATH](op, factory) {\n        return {\n          result: Object.assign(factory.createPath(\n            deskolemizeTermNestedThrowing(op.subject, sourceId),\n            op.predicate,\n            deskolemizeTermNestedThrowing(op.object, sourceId),\n            deskolemizeTermNestedThrowing(op.graph, sourceId),\n          ), { metadata: op.metadata }),\n          recurse: false,\n        };\n      },\n    });\n  } catch {\n    // Return undefined for skolemized terms not in scope for this source\n  }\n}\n"]}