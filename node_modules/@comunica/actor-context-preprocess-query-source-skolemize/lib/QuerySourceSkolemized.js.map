{"version":3,"file":"QuerySourceSkolemized.js","sourceRoot":"","sources":["QuerySourceSkolemized.ts"],"names":[],"mappings":";;;AAAA,iDAA6D;AAU7D,iDAA8C;AAE9C,mCAA6F;AAE7F;;GAEG;AACH,MAAa,qBAAqB;IAUhC,YAAmB,WAAyB,EAAE,QAAgB;QAC5D,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,OAAuB;QACnD,OAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAEM,aAAa,CAClB,SAA4B,EAC5B,OAAuB,EACvB,OAA0C;QAE1C,MAAM,eAAe,GAAG,IAAA,4BAAoB,EAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,EAAE,GAAmB,IAAI,6BAAa,CAAe,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YACrF,EAAE,CAAC,WAAW,CAAC,UAAU,EAAE;gBACzB,KAAK,EAAE,IAAI,kCAAuB,EAAE;gBACpC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;gBACxC,gBAAgB,EAAE,KAAK;gBACvB,SAAS,EAAE,EAAE;aACd,CAAC,CAAC;YACH,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,IAAA,+BAAuB,EAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,eAAe,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnH,CAAC;IAEM,YAAY,CAAC,SAAsB,EAAE,OAAuB;QACjE,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAEM,UAAU,CAAC,SAA4B,EAAE,OAAuB;QACrE,MAAM,eAAe,GAAG,IAAA,4BAAoB,EAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,EAAE,GAA4B,IAAI,6BAAa,CAAW,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YAC1F,EAAE,CAAC,WAAW,CAAC,UAAU,EAAE;gBACzB,KAAK,EAAE,IAAI,kCAAuB,EAAE;gBACpC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;aACzC,CAAC,CAAC;YACH,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,IAAA,2BAAmB,EAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,eAAe,EAAE,OAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnG,CAAC;IAEM,SAAS,CAAC,SAAyB,EAAE,OAAuB;QACjE,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACxD,CAAC;IAED,IAAW,cAAc;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC;IACzC,CAAC;IAEM,QAAQ;QACb,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,aAAa,IAAI,CAAC,QAAQ,GAAG,CAAC;IACrE,CAAC;CACF;AAlED,sDAkEC","sourcesContent":["import { MetadataValidationState } from '@comunica/metadata';\nimport type {\n  BindingsStream,\n  FragmentSelectorShape,\n  IActionContext,\n  IQueryBindingsOptions,\n  IQuerySource,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { ArrayIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { deskolemizeOperation, skolemizeBindingsStream, skolemizeQuadStream } from './utils';\n\n/**\n * A IQuerySource wrapper that skolemizes outgoing quads and bindings.\n */\nexport class QuerySourceSkolemized implements IQuerySource {\n  /**\n   * The query source to wrap over.\n   */\n  public readonly innerSource: IQuerySource;\n  /**\n   * ID of the inner source, see KeysRdfResolveQuadPattern.sourceIds.\n   */\n  public readonly sourceId: string;\n\n  public constructor(innerSource: IQuerySource, sourceId: string) {\n    this.innerSource = innerSource;\n    this.sourceId = sourceId;\n  }\n\n  public async getSelectorShape(context: IActionContext): Promise<FragmentSelectorShape> {\n    return this.innerSource.getSelectorShape(context);\n  }\n\n  public queryBindings(\n    operation: Algebra.Operation,\n    context: IActionContext,\n    options: IQueryBindingsOptions | undefined,\n  ): BindingsStream {\n    const operationMapped = deskolemizeOperation(operation, this.sourceId);\n    if (!operationMapped) {\n      const it: BindingsStream = new ArrayIterator<RDF.Bindings>([], { autoStart: false });\n      it.setProperty('metadata', {\n        state: new MetadataValidationState(),\n        cardinality: { type: 'exact', value: 0 },\n        canContainUndefs: false,\n        variables: [],\n      });\n      return it;\n    }\n    return skolemizeBindingsStream(this.innerSource.queryBindings(operationMapped, context, options), this.sourceId);\n  }\n\n  public queryBoolean(operation: Algebra.Ask, context: IActionContext): Promise<boolean> {\n    return this.innerSource.queryBoolean(operation, context);\n  }\n\n  public queryQuads(operation: Algebra.Operation, context: IActionContext): AsyncIterator<RDF.Quad> {\n    const operationMapped = deskolemizeOperation(operation, this.sourceId);\n    if (!operationMapped) {\n      const it: AsyncIterator<RDF.Quad> = new ArrayIterator<RDF.Quad>([], { autoStart: false });\n      it.setProperty('metadata', {\n        state: new MetadataValidationState(),\n        cardinality: { type: 'exact', value: 0 },\n      });\n      return it;\n    }\n    return skolemizeQuadStream(this.innerSource.queryQuads(operationMapped, context), this.sourceId);\n  }\n\n  public queryVoid(operation: Algebra.Update, context: IActionContext): Promise<void> {\n    return this.innerSource.queryVoid(operation, context);\n  }\n\n  public get referenceValue(): string | RDF.Source {\n    return this.innerSource.referenceValue;\n  }\n\n  public toString(): string {\n    return `${this.innerSource.toString()}(SkolemID:${this.sourceId})`;\n  }\n}\n"]}