{"version":3,"file":"ActorContextPreprocessQuerySourceSkolemize.js","sourceRoot":"","sources":["ActorContextPreprocessQuerySourceSkolemize.ts"],"names":[],"mappings":";;;AACA,6EAA0E;AAC1E,+DAAwF;AAGxF,mEAAgE;AAChE,mCAAsC;AAEtC;;GAEG;AACH,MAAa,0CAA2C,SAAQ,+CAAsB;IACpF,YAAmB,IAAiC;QAClD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAAgB;QAChC,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAe;QAC9B,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAE7B,qCAAqC;QACrC,IAAI,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,YAAY,CAAC,EAAE,CAAC;YACjD,+BAA+B;YAC/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,yCAAuB,CAAC,SAAS,CAAC,EAAE,CAAC;gBACpD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,yCAAuB,CAAC,SAAS,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;YACtE,CAAC;YACD,MAAM,SAAS,GAAsC,OAAO,CAAC,OAAO,CAAC,yCAAuB,CAAC,SAAS,CAAC,CAAC;YAExG,IAAI,OAAO,GAA0B,OAAO,CAAC,OAAO,CAAC,oCAAkB,CAAC,YAAY,CAAC,CAAC;YACtF,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBACtC,MAAM,EAAE,IAAI,6CAAqB,CAAC,aAAa,CAAC,MAAM,EAAE,IAAA,mBAAW,EAAC,SAAS,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;gBACrG,OAAO,EAAE,aAAa,CAAC,OAAO;aAC/B,CAAC,CAAC,CAAC;YACJ,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAClE,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC;CACF;AA9BD,gGA8BC","sourcesContent":["import type { IActorContextPreprocessOutput, IActorContextPreprocessArgs } from '@comunica/bus-context-preprocess';\nimport { ActorContextPreprocess } from '@comunica/bus-context-preprocess';\nimport { KeysQueryOperation, KeysQuerySourceIdentify } from '@comunica/context-entries';\nimport type { IActorTest, IAction } from '@comunica/core';\nimport type { IQuerySourceWrapper, QuerySourceReference } from '@comunica/types';\nimport { QuerySourceSkolemized } from './QuerySourceSkolemized';\nimport { getSourceId } from './utils';\n\n/**\n * A comunica Query Source Skolemize Context Preprocess Actor.\n */\nexport class ActorContextPreprocessQuerySourceSkolemize extends ActorContextPreprocess {\n  public constructor(args: IActorContextPreprocessArgs) {\n    super(args);\n  }\n\n  public async test(_action: IAction): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IAction): Promise<IActorContextPreprocessOutput> {\n    let context = action.context;\n\n    // Wrap sources in skolemized sources\n    if (context.has(KeysQueryOperation.querySources)) {\n      // Determine map of source id's\n      if (!context.has(KeysQuerySourceIdentify.sourceIds)) {\n        context = context.set(KeysQuerySourceIdentify.sourceIds, new Map());\n      }\n      const sourceIds: Map<QuerySourceReference, string> = context.getSafe(KeysQuerySourceIdentify.sourceIds);\n\n      let sources: IQuerySourceWrapper[] = context.getSafe(KeysQueryOperation.querySources);\n      sources = sources.map(sourceWrapper => ({\n        source: new QuerySourceSkolemized(sourceWrapper.source, getSourceId(sourceIds, sourceWrapper.source)),\n        context: sourceWrapper.context,\n      }));\n      context = context.set(KeysQueryOperation.querySources, sources);\n    }\n\n    return { context };\n  }\n}\n"]}