{"version":3,"file":"ActorQueryResultSerializeRdf.js","sourceRoot":"","sources":["ActorQueryResultSerializeRdf.ts"],"names":[],"mappings":";;;AAKA,qFAAiF;AASjF;;;;;GAKG;AACH,MAAa,4BAA6B,SAAQ,sDAAyB;IAMzE,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,MAA8B,EAAE,SAAiB,EAAE,OAAuB;QAEhG,8CAA8C;QAC9C,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,+BAA+B,CAAC,CAAC;QACrE,CAAC;QAED,+CAA+C;QAC/C,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CACjE,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAC9B,CAAC;QACF,IAAI,CAAC,CAAC,SAAS,IAAI,UAAU,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,8BAA8B,SAAS,0BAA0B;YACjG,4DAA4D;YAC5D,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAC/B,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,SAAiB,EAAE,OAAuB;QAE/F,oCAAoC;QACpC,OAAO,CAAC,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YAC9C,OAAO;YACP,MAAM,EAAE;gBACN,OAAO;gBACP,UAAU,EAAgC,MAAO,CAAC,UAAU;aAC7D;YACD,eAAe,EAAE,SAAS;SAC3B,CAAC,CAAC,CAAC,MAAM,CAAC;IACb,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,QAAwB;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAuB;QAChD,OAAO,CAAC,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;IAClG,CAAC;IAEM,KAAK,CAAC,oBAAoB,CAAC,QAAwB;QACxD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,mBAAmB,CAAC,OAAuB;QACtD,OAAO,CAAC,MAAM,IAAI,CAAC,+BAA+B,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;IACpH,CAAC;CACF;AAzDD,oEAyDC","sourcesContent":["import type {\n  IActorQueryResultSerializeArgs,\n  IActorQueryResultSerializeOutput,\n  IActionSparqlSerialize,\n} from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerialize } from '@comunica/bus-query-result-serialize';\nimport type {\n  MediatorRdfSerializeHandle,\n  MediatorRdfSerializeMediaTypeFormats,\n  MediatorRdfSerializeMediaTypes,\n} from '@comunica/bus-rdf-serialize';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IQueryOperationResultQuads } from '@comunica/types';\n\n/**\n * A comunica RDF Query Result Serialize Actor.\n *\n * It serializes quad streams (for example resulting from a CONSTRUCT query)\n * to an RDF syntax.\n */\nexport class ActorQueryResultSerializeRdf extends ActorQueryResultSerialize\n  implements IActorQueryResultSerializeRdfArgs {\n  public readonly mediatorRdfSerialize: MediatorRdfSerializeHandle;\n  public readonly mediatorMediaTypeCombiner: MediatorRdfSerializeMediaTypes;\n  public readonly mediatorMediaTypeFormatCombiner: MediatorRdfSerializeMediaTypeFormats;\n\n  public constructor(args: IActorQueryResultSerializeRdfArgs) {\n    super(args);\n  }\n\n  public async testHandle(action: IActionSparqlSerialize, mediaType: string, context: IActionContext):\n  Promise<IActorTest> {\n    // Check if we are provided with a quad stream\n    if (action.type !== 'quads') {\n      throw new Error(`Actor ${this.name} can only handle quad streams`);\n    }\n\n    // Check if the given media type can be handled\n    const { mediaTypes } = await this.mediatorMediaTypeCombiner.mediate(\n      { context, mediaTypes: true },\n    );\n    if (!(mediaType in mediaTypes)) {\n      throw new Error(`Actor ${this.name} can not handle media type ${mediaType}. All available types: ${\n        // eslint-disable-next-line ts/restrict-template-expressions\n        Object.keys(mediaTypes)}`);\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    // Delegate handling to the mediator\n    return (await this.mediatorRdfSerialize.mediate({\n      context,\n      handle: {\n        context,\n        quadStream: (<IQueryOperationResultQuads> action).quadStream,\n      },\n      handleMediaType: mediaType,\n    })).handle;\n  }\n\n  public async testMediaType(_context: IActionContext): Promise<boolean> {\n    return true;\n  }\n\n  public async getMediaTypes(context: IActionContext): Promise<Record<string, number>> {\n    return (await this.mediatorMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;\n  }\n\n  public async testMediaTypeFormats(_context: IActionContext): Promise<boolean> {\n    return true;\n  }\n\n  public async getMediaTypeFormats(context: IActionContext): Promise<Record<string, string>> {\n    return (await this.mediatorMediaTypeFormatCombiner.mediate({ context, mediaTypeFormats: true })).mediaTypeFormats;\n  }\n}\n\nexport interface IActorQueryResultSerializeRdfArgs extends IActorQueryResultSerializeArgs {\n  mediatorRdfSerialize: MediatorRdfSerializeHandle;\n  mediatorMediaTypeCombiner: MediatorRdfSerializeMediaTypes;\n  mediatorMediaTypeFormatCombiner: MediatorRdfSerializeMediaTypeFormats;\n}\n"]}