{"version":3,"file":"ActorQueryResultSerializeSparqlTsv.js","sourceRoot":"","sources":["ActorQueryResultSerializeSparqlTsv.ts"],"names":[],"mappings":";;;AAKA,qFAE8C;AAG9C,mDAA8C;AAC9C,qDAA2C;AAE3C;;GAEG;AACH,MAAa,kCAAmC,SAAQ,qEAAwC;IAC9F;;;;;;;;OAQG;IACH,YAAmB,IAAmD;QACpE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,oBAAoB,CAAC,KAAgB;QACjD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,qDAAqD;QACrD,OAAO,IAAA,6BAAY,EAAC,KAAK,CAAC;aACvB,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC;aACvB,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC;aACvB,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEe,KAAK,CAAC,iBAAiB,CAAC,MAA8B,EAAE,QAAwB;QAC9F,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAClE,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,UAA8B,EAAE,QAAwB;QAE7G,MAAM,cAAc,GAAmC,MAAM,CAAC;QAE9D,MAAM,IAAI,GAAG,IAAI,0BAAQ,EAAE,CAAC;QAC5B,aAAa;QACb,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,QAAQ,EAAE,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAsB,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEhG,iBAAiB;QACjB,IAAI,CAAC,IAAI,CAAO,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,QAAsB,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,SAAS;aAChG,GAAG,CAAC,CAAC,GAAiB,EAAE,EAAE,CAAC,kCAAkC;aAC3D,oBAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aAC1C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEpB,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AAvDD,gFAuDC","sourcesContent":["import type {\n  IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput,\n} from '@comunica/bus-query-result-serialize';\nimport {\n  ActorQueryResultSerializeFixedMediaTypes,\n} from '@comunica/bus-query-result-serialize';\nimport type { IActionContext, IQueryOperationResultBindings } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { termToString } from 'rdf-string-ttl';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica SPARQL TSV Query Result Serialize Actor.\n */\nexport class ActorQueryResultSerializeSparqlTsv extends ActorQueryResultSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"text/tab-separated-values\": 0.75\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"text/tab-separated-values\": \"http://www.w3.org/ns/formats/SPARQL_Results_TSV\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  /**\n   * Converts an RDF term to its TSV representation.\n   * @param {RDF.Term} value An RDF term.\n   * @return {string} A string representation of the given value.\n   */\n  public static bindingToTsvBindings(value?: RDF.Term): string {\n    if (!value) {\n      return '';\n    }\n\n    // Escape tab, newline and carriage return characters\n    return termToString(value)\n      .replaceAll('\\t', '\\\\t')\n      .replaceAll('\\n', '\\\\n')\n      .replaceAll('\\r', '\\\\r');\n  }\n\n  public override async testHandleChecked(action: IActionSparqlSerialize, _context: IActionContext): Promise<boolean> {\n    if (action.type !== 'bindings') {\n      throw new Error('This actor can only handle bindings streams.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, _mediaType: string | undefined, _context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const bindingsAction = <IQueryOperationResultBindings> action;\n\n    const data = new Readable();\n    // Write head\n    const metadata = await bindingsAction.metadata();\n    data.push(`${metadata.variables.map((variable: RDF.Variable) => variable.value).join('\\t')}\\n`);\n\n    // Write Bindings\n    data.wrap(<any> bindingsAction.bindingsStream.map((bindings: RDF.Bindings) => `${metadata.variables\n      .map((key: RDF.Variable) => ActorQueryResultSerializeSparqlTsv\n        .bindingToTsvBindings(bindings.get(key)))\n      .join('\\t')}\\n`));\n\n    return { data };\n  }\n}\n"]}