{"version":3,"file":"MetadataValidationState.js","sourceRoot":"","sources":["MetadataValidationState.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,uBAAuB;IAApC;QACmB,wBAAmB,GAAmB,EAAE,CAAC;QACnD,UAAK,GAAG,IAAI,CAAC;IActB,CAAC;IAZQ,qBAAqB,CAAC,QAAoB;QAC/C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,UAAU;QACf,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,KAAK,MAAM,kBAAkB,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC1D,kBAAkB,EAAE,CAAC;YACvB,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAhBD,0DAgBC","sourcesContent":["import type { IMetadataValidationState } from '@comunica/types';\n\n/**\n * Reusable implementation for metadata validation states.\n */\nexport class MetadataValidationState implements IMetadataValidationState {\n  private readonly invalidateListeners: (() => void)[] = [];\n  public valid = true;\n\n  public addInvalidateListener(listener: () => void): void {\n    this.invalidateListeners.push(listener);\n  }\n\n  public invalidate(): void {\n    if (this.valid) {\n      this.valid = false;\n      for (const invalidateListener of this.invalidateListeners) {\n        invalidateListener();\n      }\n    }\n  }\n}\n"]}