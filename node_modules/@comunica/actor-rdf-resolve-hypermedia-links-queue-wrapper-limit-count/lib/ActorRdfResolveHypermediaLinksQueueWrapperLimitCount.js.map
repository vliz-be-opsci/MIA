{"version":3,"file":"ActorRdfResolveHypermediaLinksQueueWrapperLimitCount.js","sourceRoot":"","sources":["ActorRdfResolveHypermediaLinksQueueWrapperLimitCount.ts"],"names":[],"mappings":";;;AAIA,6GAAuG;AAEvG,yCAAkD;AAClD,+DAA4D;AAE5D;;GAEG;AACH,MAAa,oDAAqD,SAAQ,4EAAmC;IAS3G,YAAmB,IAA+D;QAChF,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA6C;QAC7D,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAmB,CAAC,EAAE,CAAC;YAC5C,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAC/D,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA6C;QAC5D,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAmB,EAAE,IAAI,CAAC,CAAC;QAC9D,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,sCAAsC,CAAC,OAAO,CAAC,EAAE,GAAG,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;QACxG,OAAO,EAAE,SAAS,EAAE,IAAI,yCAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;IACvE,CAAC;CACF;AAzBD,oHAyBC;AAaY,QAAA,mBAAmB,GAAG,IAAI,uBAAgB,CACrD,gFAAgF,CACjF,CAAC","sourcesContent":["import type {\n  IActionRdfResolveHypermediaLinksQueue,\n  IActorRdfResolveHypermediaLinksQueueOutput,\n} from '@comunica/bus-rdf-resolve-hypermedia-links-queue';\nimport { ActorRdfResolveHypermediaLinksQueue } from '@comunica/bus-rdf-resolve-hypermedia-links-queue';\nimport type { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport { ActionContextKey } from '@comunica/core';\nimport { LinkQueueLimitCount } from './LinkQueueLimitCount';\n\n/**\n * A comunica Wrapper Limit Count RDF Resolve Hypermedia Links Queue Actor.\n */\nexport class ActorRdfResolveHypermediaLinksQueueWrapperLimitCount extends ActorRdfResolveHypermediaLinksQueue {\n  private readonly limit: number;\n  private readonly mediatorRdfResolveHypermediaLinksQueue: Mediator<\n  Actor<IActionRdfResolveHypermediaLinksQueue, IActorTest, IActorRdfResolveHypermediaLinksQueueOutput>,\n  IActionRdfResolveHypermediaLinksQueue,\nIActorTest,\nIActorRdfResolveHypermediaLinksQueueOutput\n>;\n\n  public constructor(args: IActorRdfResolveHypermediaLinksQueueWrapperLimitCountArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfResolveHypermediaLinksQueue): Promise<IActorTest> {\n    if (action.context.get(KEY_CONTEXT_WRAPPED)) {\n      throw new Error('Unable to wrap link queues multiple times');\n    }\n    return true;\n  }\n\n  public async run(action: IActionRdfResolveHypermediaLinksQueue): Promise<IActorRdfResolveHypermediaLinksQueueOutput> {\n    const context = action.context.set(KEY_CONTEXT_WRAPPED, true);\n    const { linkQueue } = await this.mediatorRdfResolveHypermediaLinksQueue.mediate({ ...action, context });\n    return { linkQueue: new LinkQueueLimitCount(linkQueue, this.limit) };\n  }\n}\n\nexport interface IActorRdfResolveHypermediaLinksQueueWrapperLimitCountArgs\n  extends IActorArgs<IActionRdfResolveHypermediaLinksQueue, IActorTest, IActorRdfResolveHypermediaLinksQueueOutput> {\n  limit: number;\n  mediatorRdfResolveHypermediaLinksQueue: Mediator<\n  Actor<IActionRdfResolveHypermediaLinksQueue, IActorTest, IActorRdfResolveHypermediaLinksQueueOutput>,\n  IActionRdfResolveHypermediaLinksQueue,\nIActorTest,\nIActorRdfResolveHypermediaLinksQueueOutput\n>;\n}\n\nexport const KEY_CONTEXT_WRAPPED = new ActionContextKey<boolean>(\n  '@comunica/actor-rdf-resolve-hypermedia-links-queue-wrapper-limit-count:wrapped',\n);\n"]}