{"version":3,"file":"ActorQueryProcessSequential.js","sourceRoot":"","sources":["ActorQueryProcessSequential.ts"],"names":[],"mappings":"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","sourcesContent":["import { BindingsFactory } from '@comunica/bindings-factory';\nimport type { MediatorContextPreprocess } from '@comunica/bus-context-preprocess';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { MediatorOptimizeQueryOperation } from '@comunica/bus-optimize-query-operation';\nimport type { MediatorQueryOperation } from '@comunica/bus-query-operation';\nimport { materializeOperation } from '@comunica/bus-query-operation';\nimport type { MediatorQueryParse } from '@comunica/bus-query-parse';\nimport type {\n  IActionQueryProcess,\n  IActorQueryProcessOutput,\n  IActorQueryProcessArgs,\n  IQueryProcessSequential,\n  IQueryProcessSequentialOutput,\n} from '@comunica/bus-query-process';\nimport {\n  ActorQueryProcess,\n} from '@comunica/bus-query-process';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest } from '@comunica/core';\nimport { ActionContextKey } from '@comunica/core';\nimport type {\n  IActionContext,\n  IQueryOperationResult,\n  QueryFormatType,\n} from '@comunica/types';\n\nimport type * as RDF from '@rdfjs/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Sequential Query Process Actor.\n */\nexport class ActorQueryProcessSequential extends ActorQueryProcess implements IQueryProcessSequential {\n  public readonly mediatorContextPreprocess: MediatorContextPreprocess;\n  public readonly mediatorQueryParse: MediatorQueryParse;\n  public readonly mediatorOptimizeQueryOperation: MediatorOptimizeQueryOperation;\n  public readonly mediatorQueryOperation: MediatorQueryOperation;\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorQueryProcessSequentialArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionQueryProcess): Promise<IActorTest> {\n    if (action.context.get(KeysInitQuery.explain) || action.context.get(new ActionContextKey('explain'))) {\n      throw new Error(`${this.name} is not able to explain queries.`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionQueryProcess): Promise<IActorQueryProcessOutput> {\n    // Run all query processing steps in sequence\n    let { operation, context } = await this.parse(action.query, action.context);\n    ({ operation, context } = await this.optimize(operation, context));\n    const output = await this.evaluate(operation, context);\n\n    return { result: output };\n  }\n\n  public async parse(query: QueryFormatType, context: IActionContext): Promise<IQueryProcessSequentialOutput> {\n    // Pre-processing the context\n    context = (await this.mediatorContextPreprocess.mediate({ context, initialize: true })).context;\n\n    // Parse query\n    let operation: Algebra.Operation;\n    if (typeof query === 'string') {\n      // Save the original query string in the context\n      context = context.set(KeysInitQuery.queryString, query);\n\n      const baseIRI: string | undefined = context.get(KeysInitQuery.baseIRI);\n      const queryFormat: RDF.QueryFormat = context.get(KeysInitQuery.queryFormat)!;\n      const queryParseOutput = await this.mediatorQueryParse.mediate({ context, query, queryFormat, baseIRI });\n      operation = queryParseOutput.operation;\n      // Update the baseIRI in the context if the query modified it.\n      if (queryParseOutput.baseIRI) {\n        context = context.set(KeysInitQuery.baseIRI, queryParseOutput.baseIRI);\n      }\n    } else {\n      operation = query;\n    }\n\n    // Apply initial bindings in context\n    if (context.has(KeysInitQuery.initialBindings)) {\n      const bindingsFactory = await BindingsFactory\n        .create(this.mediatorMergeBindingsContext, context);\n      operation = materializeOperation(operation, context.get(KeysInitQuery.initialBindings)!, bindingsFactory);\n\n      // Delete the query string from the context, since our initial query might have changed\n      context = context.delete(KeysInitQuery.queryString);\n    }\n\n    return { operation, context };\n  }\n\n  public async optimize(operation: Algebra.Operation, context: IActionContext): Promise<IQueryProcessSequentialOutput> {\n    // Save initial query in context\n    context = context.set(KeysInitQuery.query, operation);\n\n    ({ operation, context } = await this.mediatorOptimizeQueryOperation.mediate({ context, operation }));\n\n    // Save original query in context\n    context = context.set(KeysInitQuery.query, operation);\n\n    return { operation, context };\n  }\n\n  public async evaluate(operation: Algebra.Operation, context: IActionContext): Promise<IQueryOperationResult> {\n    const output = await this.mediatorQueryOperation.mediate({ context, operation });\n    output.context = context;\n    return output;\n  }\n}\n\nexport interface IActorQueryProcessSequentialArgs extends IActorQueryProcessArgs {\n  /**\n   * The context processing combinator\n   */\n  mediatorContextPreprocess: MediatorContextPreprocess;\n  /**\n   * The query parse mediator\n   */\n  mediatorQueryParse: MediatorQueryParse;\n  /**\n   * The query operation optimize mediator\n   */\n  mediatorOptimizeQueryOperation: MediatorOptimizeQueryOperation;\n  /**\n   * The query operation mediator\n   */\n  mediatorQueryOperation: MediatorQueryOperation;\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}