{"version":3,"file":"ActorRdfSerializeN3.js","sourceRoot":"","sources":["ActorRdfSerializeN3.ts"],"names":[],"mappings":";;;AAKA,mEAEqC;AACrC,2BAAkC;AAElC;;GAEG;AACH,MAAa,mBAAoB,SAAQ,oDAAgC;IACvE;;;;;;;;;;;;;;;;OAgBG;IACH,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA2B,EAAE,SAAiB;QAEnE,MAAM,MAAM,GAAG,IAAI,iBAAY,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;QACvD,IAAI,IAA2B,CAAC;QAChC,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YAChC,sDAAsD;YACtD,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YACpE,IAAI,GAAU,MAAM,CAAC,UAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC;aAAM,CAAC;YACN,IAAI,GAAS,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAChD,CAAC;QACD,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,KAAK,aAAa;gBACjD,SAAS,KAAK,uBAAuB;gBACrC,SAAS,KAAK,SAAS,EAAE,CAAC;IAC9B,CAAC;CACF;AArCD,kDAqCC","sourcesContent":["import type {\n  IActionRdfSerialize,\n  IActorRdfSerializeFixedMediaTypesArgs,\n  IActorRdfSerializeOutput,\n} from '@comunica/bus-rdf-serialize';\nimport {\n  ActorRdfSerializeFixedMediaTypes,\n} from '@comunica/bus-rdf-serialize';\nimport { StreamWriter } from 'n3';\n\n/**\n * A comunica N3 RDF Serialize Actor.\n */\nexport class ActorRdfSerializeN3 extends ActorRdfSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/n-quads\": 1.0,\n   *       \"application/trig\": 0.95,\n   *       \"application/n-triples\": 0.8,\n   *       \"text/turtle\": 0.6,\n   *       \"text/n3\": 0.35\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/n-quads\": \"http://www.w3.org/ns/formats/N-Quads\",\n   *       \"application/trig\": \"http://www.w3.org/ns/formats/TriG\",\n   *       \"application/n-triples\": \"http://www.w3.org/ns/formats/N-Triples\",\n   *       \"text/turtle\": \"http://www.w3.org/ns/formats/Turtle\",\n   *       \"text/n3\": \"http://www.w3.org/ns/formats/N3\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async runHandle(action: IActionRdfSerialize, mediaType: string):\n  Promise<IActorRdfSerializeOutput> {\n    const writer = new StreamWriter({ format: mediaType });\n    let data: NodeJS.ReadableStream;\n    if ('pipe' in action.quadStream) {\n      // Prefer piping if possible, to maintain backpressure\n      action.quadStream.on('error', error => writer.emit('error', error));\n      data = (<any> action.quadStream).pipe(writer);\n    } else {\n      data = <any> writer.import(action.quadStream);\n    }\n    return { data, triples: mediaType === 'text/turtle' ||\n      mediaType === 'application/n-triples' ||\n      mediaType === 'text/n3' };\n  }\n}\n"]}