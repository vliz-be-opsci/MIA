{"version":3,"file":"ActorQueryOperationPathZeroOrOne.js","sourceRoot":"","sources":["ActorQueryOperationPathZeroOrOne.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path';\nimport { BindingsFactory } from '@comunica/bindings-factory';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation } from '@comunica/bus-query-operation';\nimport { MetadataValidationState } from '@comunica/metadata';\nimport type { Bindings, IQueryOperationResult, IActionContext, BindingsStream } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport {\n  SingletonIterator,\n  UnionIterator,\n} from 'asynciterator';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Path ZeroOrOne Query Operation Actor.\n */\nexport class ActorQueryOperationPathZeroOrOne extends ActorAbstractPath {\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorQueryOperationPathZeroOrOneArgs) {\n    super(args, Algebra.types.ZERO_OR_ONE_PATH);\n  }\n\n  public async runOperation(\n    operation: Algebra.Path,\n    context: IActionContext,\n  ): Promise<IQueryOperationResult> {\n    const bindingsFactory = await BindingsFactory.create(this.mediatorMergeBindingsContext, context);\n    const predicate = <Algebra.ZeroOrOnePath> operation.predicate;\n    const sources = this.getPathSources(predicate);\n\n    const extra: Bindings[] = [];\n\n    // Both subject and object non-variables\n    if (operation.subject.termType !== 'Variable' &&\n      operation.object.termType !== 'Variable' &&\n      operation.subject.equals(operation.object)) {\n      return {\n        type: 'bindings',\n        bindingsStream: new SingletonIterator<RDF.Bindings>(bindingsFactory.bindings()),\n        metadata: () => Promise.resolve({\n          state: new MetadataValidationState(),\n          cardinality: { type: 'exact', value: 1 },\n          canContainUndefs: false,\n          variables: [],\n        }),\n      };\n    }\n\n    // Check if we require a distinct path operation\n    const distinct = await this.isPathArbitraryLengthDistinct(context, operation);\n    if (distinct.operation) {\n      return distinct.operation;\n    }\n    context = distinct.context;\n\n    // Create an operator that resolve to the \"One\" part\n    const bindingsOne = ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({\n      context,\n      operation: ActorAbstractPath.FACTORY\n        .createPath(operation.subject, predicate.path, operation.object, operation.graph),\n    }));\n\n    // Determine the bindings stream based on the variable-ness of subject and object\n    let bindingsStream: BindingsStream;\n    if (operation.subject.termType === 'Variable' && operation.object.termType === 'Variable') {\n      // Both subject and object are variables\n      // To determine the \"Zero\" part, we\n      // query ?s ?p ?o. FILTER ?s = ?0, to get all possible namedNodes in de the db\n      const varP = this.generateVariable(operation);\n      const bindingsZero = ActorQueryOperation.getSafeBindings(\n        await this.mediatorQueryOperation.mediate({\n          context,\n          operation: ActorAbstractPath.FACTORY.createFilter(\n            this.assignPatternSources(ActorAbstractPath.FACTORY\n              .createPattern(operation.subject, varP, operation.object, operation.graph), sources),\n            ActorAbstractPath.FACTORY.createOperatorExpression('=', [\n              ActorAbstractPath.FACTORY.createTermExpression(operation.subject),\n              ActorAbstractPath.FACTORY.createTermExpression(operation.object),\n            ]),\n          ),\n        }),\n      ).bindingsStream.map(bindings => bindings.delete(varP));\n      bindingsStream = new UnionIterator([\n        bindingsZero,\n        bindingsOne.bindingsStream,\n      ], { autoStart: false });\n    } else {\n      // If subject or object is not a variable, then determining the \"Zero\" part is simple.\n      if (operation.subject.termType === 'Variable') {\n        extra.push(bindingsFactory.bindings([[ operation.subject, operation.object ]]));\n      }\n      if (operation.object.termType === 'Variable') {\n        extra.push(bindingsFactory.bindings([[ operation.object, operation.subject ]]));\n      }\n\n      bindingsStream = bindingsOne.bindingsStream.prepend(extra);\n    }\n\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata: bindingsOne.metadata,\n    };\n  }\n}\nexport interface IActorQueryOperationPathZeroOrOneArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}