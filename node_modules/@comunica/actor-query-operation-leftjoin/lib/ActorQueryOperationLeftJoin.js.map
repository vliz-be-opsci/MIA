{"version":3,"file":"ActorQueryOperationLeftJoin.js","sourceRoot":"","sources":["ActorQueryOperationLeftJoin.ts"],"names":[],"mappings":";;;AAAA,iEAA6D;AAG7D,uEAAsG;AAGtG,yEAAmF;AAInF;;GAEG;AACH,MAAa,2BAA4B,SAAQ,sDAAkD;IAIjG,YAAmB,IAAsC;QACvD,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC1B,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAA4B,EAAE,QAAwB;QAC/E,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,iBAAmC,EAAE,OAAuB;QAEpF,uBAAuB;QACvB,MAAM,OAAO,GAAiB,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK;aACrE,GAAG,CAAC,KAAK,EAAC,YAAY,EAAC,EAAE,CAAC,CAAC;YAC1B,MAAM,EAAE,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC;YACvF,SAAS,EAAE,YAAY;SACxB,CAAC,CAAC,CAAC,CAAC;aACJ,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;YAC/B,MAAM,EAAE,yCAAmB,CAAC,eAAe,CAAC,MAAM,CAAC;YACnD,SAAS;SACV,CAAC,CAAC,CAAC;QACN,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAEvF,qEAAqE;QACrE,IAAI,iBAAiB,CAAC,UAAU,EAAE,CAAC;YACjC,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YACzD,MAAM,mBAAmB,GAAG,aAAa,CAAC,SAAS,CAAC;YAEpD,MAAM,eAAe,GAAG,MAAM,kCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;YACjG,MAAM,MAAM,GAAG,EAAE,GAAG,yCAAmB,CAAC,yBAAyB,CAC/D,OAAO,EACP,IAAI,CAAC,sBAAsB,EAC3B,eAAe,CAChB,EAAE,CAAC;YACJ,MAAM,SAAS,GAAG,IAAI,qCAAc,CAAC,iBAAiB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC3E,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc;iBACzC,SAAS,CAAC;gBACT,SAAS,EAAE,KAAK;gBAChB,kDAAkD;gBAClD,SAAS,EAAE,KAAK,EAAC,QAAkB,EAAE,IAAgB,EAAE,IAA8B,EAAE,EAAE;oBACvF,kFAAkF;oBAClF,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;wBACzE,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACf,OAAO,IAAI,EAAE,CAAC;oBAChB,CAAC;oBAED,IAAI,CAAC;wBACH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;wBACvD,IAAI,MAAM,EAAE,CAAC;4BACX,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACjB,CAAC;oBACH,CAAC;oBAAC,OAAO,KAAc,EAAE,CAAC;wBACxB,mCAAmC;wBACnC,mEAAmE;wBACnE,gGAAgG;wBAChG,gFAAgF;wBAChF,IAAI,IAAA,wCAAiB,EAAQ,KAAK,CAAC,EAAE,CAAC;4BACpC,qGAAqG;4BACrG,+FAA+F;4BAC/F,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,iCAAiC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACxF,CAAC;6BAAM,CAAC;4BACN,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;wBACtC,CAAC;oBACH,CAAC;oBACD,IAAI,EAAE,CAAC;gBACT,CAAC;aACF,CAAC,CAAC;YACL,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;QACzC,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA3ED,kEA2EC","sourcesContent":["import { BindingsFactory } from '@comunica/bindings-factory';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { MediatorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IActorTest } from '@comunica/core';\nimport { AsyncEvaluator, isExpressionError } from '@comunica/expression-evaluator';\nimport type { IQueryOperationResult, Bindings, IActionContext, IJoinEntry } from '@comunica/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica LeftJoin Query Operation Actor.\n */\nexport class ActorQueryOperationLeftJoin extends ActorQueryOperationTypedMediated<Algebra.LeftJoin> {\n  public readonly mediatorJoin: MediatorRdfJoin;\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorQueryOperationLeftJoinArgs) {\n    super(args, 'leftjoin');\n  }\n\n  public async testOperation(_operation: Algebra.LeftJoin, _context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(operationOriginal: Algebra.LeftJoin, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    // Delegate to join bus\n    const entries: IJoinEntry[] = (await Promise.all(operationOriginal.input\n      .map(async subOperation => ({\n        output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),\n        operation: subOperation,\n      }))))\n      .map(({ output, operation }) => ({\n        output: ActorQueryOperation.getSafeBindings(output),\n        operation,\n      }));\n    const joined = await this.mediatorJoin.mediate({ type: 'optional', entries, context });\n\n    // If the pattern contains an expression, filter the resulting stream\n    if (operationOriginal.expression) {\n      const rightMetadata = await entries[1].output.metadata();\n      const expressionVariables = rightMetadata.variables;\n\n      const bindingsFactory = await BindingsFactory.create(this.mediatorMergeBindingsContext, context);\n      const config = { ...ActorQueryOperation.getAsyncExpressionContext(\n        context,\n        this.mediatorQueryOperation,\n        bindingsFactory,\n      ) };\n      const evaluator = new AsyncEvaluator(operationOriginal.expression, config);\n      const bindingsStream = joined.bindingsStream\n        .transform({\n          autoStart: false,\n          // eslint-disable-next-line ts/no-misused-promises\n          transform: async(bindings: Bindings, done: () => void, push: (item: Bindings) => void) => {\n            // If variables of the right-hand entry are missing, we skip expression evaluation\n            if (!expressionVariables.every(variable => bindings.has(variable.value))) {\n              push(bindings);\n              return done();\n            }\n\n            try {\n              const result = await evaluator.evaluateAsEBV(bindings);\n              if (result) {\n                push(bindings);\n              }\n            } catch (error: unknown) {\n              // We ignore all Expression errors.\n              // Other errors (likely programming mistakes) are still propagated.\n              // Left Join is defined in terms of Filter (https://www.w3.org/TR/sparql11-query/#defn_algJoin),\n              // and Filter requires this (https://www.w3.org/TR/sparql11-query/#expressions).\n              if (isExpressionError(<Error>error)) {\n                // In many cases, this is a user error, where the user should manually cast the variable to a string.\n                // In order to help users debug this, we should report these errors via the logger as warnings.\n                this.logWarn(context, 'Error occurred while filtering.', () => ({ error, bindings }));\n              } else {\n                bindingsStream.emit('error', error);\n              }\n            }\n            done();\n          },\n        });\n      joined.bindingsStream = bindingsStream;\n    }\n\n    return joined;\n  }\n}\n\nexport interface IActorQueryOperationLeftJoinArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * A mediator for joining Bindings streams\n   */\n  mediatorJoin: MediatorRdfJoin;\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}