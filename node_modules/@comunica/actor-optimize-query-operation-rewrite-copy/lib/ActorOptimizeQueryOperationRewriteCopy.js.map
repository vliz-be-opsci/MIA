{"version":3,"file":"ActorOptimizeQueryOperationRewriteCopy.js","sourceRoot":"","sources":["ActorOptimizeQueryOperationRewriteCopy.ts"],"names":[],"mappings":";;;AAKA,yFAAqF;AAErF,qDAAgD;AAEhD;;GAEG;AACH,MAAa,sCAAuC,SAAQ,0DAA2B;IACrF,YAAmB,IAAsC;QACvD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAAsC;QACtD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAqC;QACpD,MAAM,SAAS,GAAG,sBAAI,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE;YACpD,CAAC,yBAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,iBAAiB,EAAE,OAAO;gBAC7C,kCAAkC;gBAClC,IAAI,MAA+B,CAAC;gBACpC,IAAI,CAAC,OAAO,iBAAiB,CAAC,WAAW,KAAK,QAAQ,IAAI,OAAO,iBAAiB,CAAC,MAAM,KAAK,QAAQ;oBAClG,iBAAiB,CAAC,WAAW,KAAK,iBAAiB,CAAC,MAAM,CAAC;oBAC7D,CAAC,OAAO,iBAAiB,CAAC,WAAW,KAAK,QAAQ,IAAI,OAAO,iBAAiB,CAAC,MAAM,KAAK,QAAQ;wBAChG,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;oBACpE,MAAM,GAAG,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;gBAC7C,CAAC;qBAAM,CAAC;oBACN,kDAAkD;oBAClD,MAAM,GAAG,OAAO,CAAC,qBAAqB,CAAC;wBACrC,OAAO,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC;wBACvD,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,EAAE,iBAAiB,CAAC,WAAW,EAAE,iBAAiB,CAAC,MAAM,CAAC;qBACrG,CAAC,CAAC;gBACL,CAAC;gBAED,OAAO;oBACL,MAAM;oBACN,OAAO,EAAE,KAAK;iBACf,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC;IAChD,CAAC;CACF;AApCD,wFAoCC","sourcesContent":["import type {\n  IActionOptimizeQueryOperation,\n  IActorOptimizeQueryOperationOutput,\n  IActorOptimizeQueryOperationArgs,\n} from '@comunica/bus-optimize-query-operation';\nimport { ActorOptimizeQueryOperation } from '@comunica/bus-optimize-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport { Algebra, Util } from 'sparqlalgebrajs';\n\n/**\n * A comunica Rewrite Copy Optimize Query Operation Actor.\n */\nexport class ActorOptimizeQueryOperationRewriteCopy extends ActorOptimizeQueryOperation {\n  public constructor(args: IActorOptimizeQueryOperationArgs) {\n    super(args);\n  }\n\n  public async test(_action: IActionOptimizeQueryOperation): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionOptimizeQueryOperation): Promise<IActorOptimizeQueryOperationOutput> {\n    const operation = Util.mapOperation(action.operation, {\n      [Algebra.types.COPY](operationOriginal, factory) {\n        // No-op if source === destination\n        let result: Algebra.CompositeUpdate;\n        if ((typeof operationOriginal.destination === 'string' && typeof operationOriginal.source === 'string' &&\n            operationOriginal.destination === operationOriginal.source) ||\n          (typeof operationOriginal.destination !== 'string' && typeof operationOriginal.source !== 'string' &&\n            operationOriginal.destination.equals(operationOriginal.source))) {\n          result = factory.createCompositeUpdate([]);\n        } else {\n          // COPY is equivalent to drop destination, and add\n          result = factory.createCompositeUpdate([\n            factory.createDrop(operationOriginal.destination, true),\n            factory.createAdd(operationOriginal.source, operationOriginal.destination, operationOriginal.silent),\n          ]);\n        }\n\n        return {\n          result,\n          recurse: false,\n        };\n      },\n    });\n\n    return { operation, context: action.context };\n  }\n}\n"]}