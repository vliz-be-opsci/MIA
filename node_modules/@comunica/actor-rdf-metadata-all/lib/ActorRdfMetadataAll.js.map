{"version":3,"file":"ActorRdfMetadataAll.js","sourceRoot":"","sources":["ActorRdfMetadataAll.ts"],"names":[],"mappings":";;;AACA,iEAA8D;AAE9D,qDAA2C;AAE3C;;GAEG;AACH,MAAa,mBAAoB,SAAQ,mCAAgB;IACvD,YAAmB,IAA2B;QAC5C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAA2B;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA0B;QACzC,MAAM,IAAI,GAAa,IAAI,0BAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1D,MAAM,QAAQ,GAAa,IAAI,0BAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE9D,wEAAwE;QACxE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC1B,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,gCAAgC;QAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,MAAM,IAAI,GAA2B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,CAAC,IAAI,EAAE,EAAE;YAC1E,OAAO,IAAI,GAAG,CAAC,EAAE,CAAC;gBAChB,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBACjC,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;oBAClB,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACzD,CAAC;gBACD,IAAI,EAAE,CAAC;gBACP,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;QACH,CAAC,CAAC;QAEF,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IAC5B,CAAC;CACF;AAvCD,kDAuCC","sourcesContent":["import type { IActionRdfMetadata, IActorRdfMetadataArgs, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport { ActorRdfMetadata } from '@comunica/bus-rdf-metadata';\nimport type { IActorTest } from '@comunica/core';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica All RDF Metadata Actor.\n */\nexport class ActorRdfMetadataAll extends ActorRdfMetadata {\n  public constructor(args: IActorRdfMetadataArgs) {\n    super(args);\n  }\n\n  public async test(_action: IActionRdfMetadata): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionRdfMetadata): Promise<IActorRdfMetadataOutput> {\n    const data: Readable = new Readable({ objectMode: true });\n    const metadata: Readable = new Readable({ objectMode: true });\n\n    // Forward errors (attach them immediately as they could arrive earlier)\n    action.quads.on('error', (error) => {\n      data.emit('error', error);\n      metadata.emit('error', error);\n    });\n\n    // Terminate both streams on-end\n    action.quads.on('end', () => {\n      data.push(null);\n      metadata.push(null);\n    });\n\n    const read: (size: number) => void = data._read = metadata._read = (size) => {\n      while (size > 0) {\n        const item = action.quads.read();\n        if (item === null) {\n          return action.quads.once('readable', () => read(size));\n        }\n        size--;\n        data.push(item);\n        metadata.push(item);\n      }\n    };\n\n    return { data, metadata };\n  }\n}\n"]}