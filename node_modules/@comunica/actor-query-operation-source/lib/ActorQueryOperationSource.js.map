{"version":3,"file":"ActorQueryOperationSource.js","sourceRoot":"","sources":["ActorQueryOperationSource.ts"],"names":[],"mappings":";;;AACA,uEAAoE;AACpE,+DAA0D;AAE1D,iDAA2E;AAM3E,qDAA0C;AAE1C;;GAEG;AACH,MAAa,yBAA0B,SAAQ,yCAAmB;IAChE,YAAmB,IAA8B;QAC/C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA6B;QAC7C,IAAI,CAAC,yCAAmB,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;YAC9D,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,gDAAgD,CAAC,CAAC;QACtF,CAAC;QACD,OAAO,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA6B;QAC5C,uBAAuB;QACvB,MAAM,uBAAuB,GAAyC,MAAM,CAAC,OAAO;aACjF,GAAG,CAAC,+BAAa,CAAC,uBAAuB,CAAC,CAAC;QAC9C,IAAI,uBAAuB,EAAE,CAAC;YAC5B,uBAAuB,CAAC,YAAY,CAClC,MAAM,CAAC,SAAS,CAAC,IAAI,EACrB,SAAS,EACT,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,qBAAqB,CAAC,EACvD,IAAI,CAAC,IAAI,EACT,EAAE,CACH,CAAC;YACF,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,qBAAqB,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;QAC7F,CAAC;QAED,MAAM,aAAa,GAAwB,yCAAmB,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAE,CAAC;QACrG,MAAM,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;QAE3G,0DAA0D;QAC1D,QAAQ,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YAC9B,2FAA2F;YAC3F,KAAK,yBAAO,CAAC,KAAK,CAAC,KAAK,CAAC;YACzB,KAAK,yBAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,KAAK,yBAAO,CAAC,KAAK,CAAC,KAAK,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,yBAAO,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;oBAC7G,MAAM;gBACR,CAAC;gBACD,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;gBACpF,MAAM,QAAQ,GAAG,IAAA,2BAAgB,EAAC,UAAU,CAAC,CAAC;gBAC9C,OAAO;oBACL,IAAI,EAAE,OAAO;oBACb,UAAU;oBACV,QAAQ;iBACT,CAAC;YACJ,CAAC;YACD,KAAK,yBAAO,CAAC,KAAK,CAAC,GAAG;gBACpB,OAAO;oBACL,IAAI,EAAE,SAAS;oBACf,OAAO,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY,CAAc,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC;iBAC/F,CAAC;YACJ,KAAK,yBAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC;YACpC,KAAK,yBAAO,CAAC,KAAK,CAAC,aAAa,CAAC;YACjC,KAAK,yBAAO,CAAC,KAAK,CAAC,IAAI,CAAC;YACxB,KAAK,yBAAO,CAAC,KAAK,CAAC,KAAK,CAAC;YACzB,KAAK,yBAAO,CAAC,KAAK,CAAC,MAAM,CAAC;YAC1B,KAAK,yBAAO,CAAC,KAAK,CAAC,IAAI,CAAC;YACxB,KAAK,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC;YACvB,KAAK,yBAAO,CAAC,KAAK,CAAC,IAAI,CAAC;YACxB,KAAK,yBAAO,CAAC,KAAK,CAAC,IAAI;gBACrB,OAAO;oBACL,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS,CAAiB,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC;iBAC/F,CAAC;QACN,CAAC;QAED,MAAM,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAC3F,MAAM,QAAQ,GAAG,IAAA,8BAAmB,EAAC,cAAc,CAAC,CAAC;QACrD,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,QAAQ;SACT,CAAC;IACJ,CAAC;CACF;AA3ED,8DA2EC","sourcesContent":["import type { IActionQueryOperation, IActorQueryOperationArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation } from '@comunica/bus-query-operation';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest } from '@comunica/core';\nimport { getMetadataBindings, getMetadataQuads } from '@comunica/metadata';\nimport type {\n  IPhysicalQueryPlanLogger,\n  IQueryOperationResult,\n  IQuerySourceWrapper,\n} from '@comunica/types';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Source Query Operation Actor.\n */\nexport class ActorQueryOperationSource extends ActorQueryOperation {\n  public constructor(args: IActorQueryOperationArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionQueryOperation): Promise<IActorTest> {\n    if (!ActorQueryOperation.getOperationSource(action.operation)) {\n      throw new Error(`Actor ${this.name} requires an operation with source annotation.`);\n    }\n    return { httpRequests: 1 };\n  }\n\n  public async run(action: IActionQueryOperation): Promise<IQueryOperationResult> {\n    // Log to physical plan\n    const physicalQueryPlanLogger: IPhysicalQueryPlanLogger | undefined = action.context\n      .get(KeysInitQuery.physicalQueryPlanLogger);\n    if (physicalQueryPlanLogger) {\n      physicalQueryPlanLogger.logOperation(\n        action.operation.type,\n        undefined,\n        action.operation,\n        action.context.get(KeysInitQuery.physicalQueryPlanNode),\n        this.name,\n        {},\n      );\n      action.context = action.context.set(KeysInitQuery.physicalQueryPlanNode, action.operation);\n    }\n\n    const sourceWrapper: IQuerySourceWrapper = ActorQueryOperation.getOperationSource(action.operation)!;\n    const mergedContext = sourceWrapper.context ? action.context.merge(sourceWrapper.context) : action.context;\n\n    // eslint-disable-next-line ts/switch-exhaustiveness-check\n    switch (action.operation.type) {\n      // Special case: allow CONSTRUCT queries that are SLICED to be pushed into sources as well.\n      case Algebra.types.SLICE:\n      case Algebra.types.CONSTRUCT: {\n        if (action.operation.type === Algebra.types.SLICE && action.operation.input.type !== Algebra.types.CONSTRUCT) {\n          break;\n        }\n        const quadStream = sourceWrapper.source.queryQuads(action.operation, mergedContext);\n        const metadata = getMetadataQuads(quadStream);\n        return {\n          type: 'quads',\n          quadStream,\n          metadata,\n        };\n      }\n      case Algebra.types.ASK:\n        return {\n          type: 'boolean',\n          execute: () => sourceWrapper.source.queryBoolean(<Algebra.Ask>action.operation, mergedContext),\n        };\n      case Algebra.types.COMPOSITE_UPDATE:\n      case Algebra.types.DELETE_INSERT:\n      case Algebra.types.LOAD:\n      case Algebra.types.CLEAR:\n      case Algebra.types.CREATE:\n      case Algebra.types.DROP:\n      case Algebra.types.ADD:\n      case Algebra.types.MOVE:\n      case Algebra.types.COPY:\n        return {\n          type: 'void',\n          execute: () => sourceWrapper.source.queryVoid(<Algebra.Update>action.operation, mergedContext),\n        };\n    }\n\n    const bindingsStream = sourceWrapper.source.queryBindings(action.operation, mergedContext);\n    const metadata = getMetadataBindings(bindingsStream);\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata,\n    };\n  }\n}\n"]}