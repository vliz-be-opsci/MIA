{"version":3,"file":"ActorQueryResultSerializeSimple.js","sourceRoot":"","sources":["ActorQueryResultSerializeSimple.ts"],"names":[],"mappings":";;;AAKA,qFAAgG;AAShG,iDAAqC;AACrC,2CAA0C;AAC1C,qDAA2C;AAE3C;;GAEG;AACH,MAAa,+BAAgC,SAAQ,qEAAwC;IAC3F;;;;OAIG;IACH,YAAmB,IAAmD;QACpE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEe,KAAK,CAAC,iBAAiB,CAAC,MAA8B,EAAE,QAAwB;QAC9F,IAAI,CAAC,CAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YACtE,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;QACtG,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAES,MAAM,CAAC,YAAY,CAAC,IAAc;QAC1C,OAAO,IAAI,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,IAAA,yBAAY,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;IACpE,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,UAAkB,EAAE,QAAwB;QAEjG,MAAM,IAAI,GAAG,IAAI,0BAAQ,EAAE,CAAC;QAC5B,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAuC,MAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,QAAsB,EAAE,EAAE,CAAC,GAAG,CAAE,GAAG,QAAQ,CAAE,CAAC,GAAG,CAC3H,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,KAAK,KAAK,+BAA+B,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAC5F,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACvB,CAAC;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACnC,IAAI,CAAC,IAAI,CAAoC,MAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CACzE,YAAY,+BAA+B,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI;gBAC1E,cAAc,+BAA+B,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI;gBAC9E,WAAW,+BAA+B,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI;gBACxE,UAAU,+BAA+B,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/E,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,IAAI,CAAO,IAAA,oBAAI,EAClB,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;gBACS,MAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAE,GAAG,KAAK,IAAI,CAAE,CAAC,CAAC,CAAC;gBACvD,MAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAE,MAAM,CAAE,CAAC,CACzE,CAAC,CAAC;QACL,CAAC;QAED,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AA5CD,0EA4CC","sourcesContent":["import type {\n  IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput,\n} from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type {\n  IActionContext,\n  IQueryOperationResultBindings,\n  IQueryOperationResultBoolean,\n  IQueryOperationResultQuads,\n  IQueryOperationResultVoid,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { wrap } from 'asynciterator';\nimport { termToString } from 'rdf-string';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica Simple Sparql Serialize Actor.\n */\nexport class ActorQueryResultSerializeSimple extends ActorQueryResultSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{ \"simple\": 0.9 }} mediaTypePriorities\n   *   \\ @defaultNested {{ \"simple\": \"https://comunica.linkeddatafragments.org/#results_simple\" }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public override async testHandleChecked(action: IActionSparqlSerialize, _context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads', 'boolean', 'void' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams, quad streams, booleans, or updates.');\n    }\n    return true;\n  }\n\n  protected static termToString(term: RDF.Term): string {\n    return term.termType === 'Quad' ? termToString(term) : term.value;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, _mediaType: string, _context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    if (action.type === 'bindings') {\n      data.wrap(<any> (<IQueryOperationResultBindings>action).bindingsStream.map((bindings: RDF.Bindings) => `${[ ...bindings ].map(\n        ([ key, value ]) => `?${key.value}: ${ActorQueryResultSerializeSimple.termToString(value)}`,\n      ).join('\\n')}\\n\\n`));\n    } else if (action.type === 'quads') {\n      data.wrap(<any> (<IQueryOperationResultQuads>action).quadStream.map(quad =>\n        `subject: ${ActorQueryResultSerializeSimple.termToString(quad.subject)}\\n` +\n        `predicate: ${ActorQueryResultSerializeSimple.termToString(quad.predicate)}\\n` +\n        `object: ${ActorQueryResultSerializeSimple.termToString(quad.object)}\\n` +\n        `graph: ${ActorQueryResultSerializeSimple.termToString(quad.graph)}\\n\\n`));\n    } else {\n      data.wrap(<any> wrap(\n        action.type === 'boolean' ?\n            (<IQueryOperationResultBoolean> action).execute().then(value => [ `${value}\\n` ]) :\n            (<IQueryOperationResultVoid>action).execute().then(() => [ 'ok\\n' ]),\n      ));\n    }\n\n    return { data };\n  }\n}\n"]}