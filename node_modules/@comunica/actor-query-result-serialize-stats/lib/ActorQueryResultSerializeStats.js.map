{"version":3,"file":"ActorQueryResultSerializeStats.js","sourceRoot":"","sources":["ActorQueryResultSerializeStats.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput,\n} from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type {\n  IActionContext,\n  IQueryOperationResultBindings,\n  IQueryOperationResultQuads,\n} from '@comunica/types';\nimport { wrap } from 'asynciterator';\nimport { Readable } from 'readable-stream';\nimport type { ActionObserverHttp } from './ActionObserverHttp';\n\nconst process: NodeJS.Process = require('process/');\n\n/**\n * Serializes SPARQL results for testing and debugging.\n */\nexport class ActorQueryResultSerializeStats extends ActorQueryResultSerializeFixedMediaTypes {\n  public readonly httpObserver: ActionObserverHttp;\n\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *   \\ @defaultNested {{ \"stats\": 0.5 }} mediaTypePriorities\n   *   \\ @defaultNested {{ \"stats\": \"https://comunica.linkeddatafragments.org/#results_stats\" }} mediaTypeFormats\n   *   \\ @defaultNested {<default_observer> a <caqrsst:components/ActionObserverHttp.jsonld#ActionObserverHttp>} httpObserver\n   */\n  public constructor(args: IActorQueryResultSerializeStatsArgs) {\n    super(args);\n  }\n  /* eslint-enable max-len */\n\n  public override async testHandleChecked(action: IActionSparqlSerialize, _context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or quad streams.');\n    }\n    return true;\n  }\n\n  public pushHeader(data: Readable): void {\n    const header: string = [ 'Result', 'Delay (ms)', 'HTTP requests',\n    ].join(',');\n    data.push(`${header}\\n`);\n  }\n\n  public createStat(startTime: number, result: number): string {\n    const row: string = [ result, this.delay(startTime), this.httpObserver.requests,\n    ].join(',');\n    return `${row}\\n`;\n  }\n\n  public createFooter(startTime: number): string {\n    const footer: string = [ 'TOTAL', this.delay(startTime), this.httpObserver.requests,\n    ].join(',');\n    return `${footer}\\n`;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, _mediaType: string, _context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n\n    const resultStream = action.type === 'bindings' ?\n        (<IQueryOperationResultBindings> action).bindingsStream :\n        (<IQueryOperationResultQuads> action).quadStream;\n\n    const startTime = this.now();\n    let result = 1;\n\n    function* end(cb: () => string): Generator<string> {\n      yield cb();\n    }\n    const stream = wrap(resultStream)\n      .map(() => this.createStat(startTime, result++))\n      .append(wrap(end(() => this.createFooter(startTime))));\n\n    this.pushHeader(data);\n    data.wrap(<any> stream);\n\n    return { data };\n  }\n\n  /* istanbul ignore next */\n  public now(): number {\n    // TODO: remove when we will drop support of Node 14\n    if (typeof performance === 'undefined') {\n      const time: [number, number] = process.hrtime();\n      return time[0] * 1_000 + (time[1] / 1_000_000);\n    }\n    return performance.now();\n  }\n\n  public delay(startTime: number): number {\n    return this.now() - startTime;\n  }\n}\n\nexport interface IActorQueryResultSerializeStatsArgs extends IActorQueryResultSerializeFixedMediaTypesArgs {\n  httpObserver: ActionObserverHttp;\n}\n"]}