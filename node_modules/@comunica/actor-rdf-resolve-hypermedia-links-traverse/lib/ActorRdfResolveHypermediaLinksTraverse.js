"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorRdfResolveHypermediaLinksTraverse = void 0;
const bus_rdf_resolve_hypermedia_links_1 = require("@comunica/bus-rdf-resolve-hypermedia-links");
const context_entries_1 = require("@comunica/context-entries");
/**
 * A comunica Traverse RDF Resolve Hypermedia Links Actor.
 */
class ActorRdfResolveHypermediaLinksTraverse extends bus_rdf_resolve_hypermedia_links_1.ActorRdfResolveHypermediaLinks {
    constructor(args) {
        super(args);
        // Overrides recommended settings
        this.upgradeInsecureRequests = args.upgradeInsecureRequests;
    }
    async test(action) {
        if (!action.metadata.traverse) {
            throw new Error(`Actor ${this.name} requires a 'traverse' metadata entry.`);
        }
        if (action.context.has(context_entries_1.KeysQuerySourceIdentify.traverse) &&
            !action.context.get(context_entries_1.KeysQuerySourceIdentify.traverse)) {
            throw new Error(`Link traversal has been disabled via the context.`);
        }
        return true;
    }
    async run(action) {
        return {
            links: action.metadata.traverse.map((fileLink) => {
                const hashPosition = fileLink.url.indexOf('#');
                if (hashPosition >= 0) {
                    fileLink.url = fileLink.url.slice(0, hashPosition);
                }
                // Prioritize the upgradeInsecureRequests option setting
                // default to true when using the browser in https and when
                // there is no httpProxyHandler.
                if (fileLink.url.startsWith('http:') &&
                    (this.upgradeInsecureRequests ??
                        (globalThis.window &&
                            globalThis.window.location.protocol === 'https:' &&
                            !action.context.get(context_entries_1.KeysHttpProxy.httpProxyHandler)))) {
                    // Avoid mixed content when using https
                    fileLink.url = fileLink.url.replace('http:', 'https:');
                }
                return fileLink;
            }),
        };
    }
}
exports.ActorRdfResolveHypermediaLinksTraverse = ActorRdfResolveHypermediaLinksTraverse;
//# sourceMappingURL=ActorRdfResolveHypermediaLinksTraverse.js.map