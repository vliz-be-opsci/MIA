{"version":3,"file":"QuerySourceRdfJs.js","sourceRoot":"","sources":["QuerySourceRdfJs.ts"],"names":[],"mappings":";;;AACA,mFAAiG;AACjG,+DAA+D;AAC/D,iDAA6D;AAG7D,iDAAyE;AACzE,uDAA+C;AAC/C,yCAAqF;AAErF,qDAA0C;AAG1C,MAAM,EAAE,GAAG,IAAI,yBAAO,EAAE,CAAC;AACzB,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAgB,CAAC;AAE3C,MAAa,gBAAgB;IAkB3B,YAAmB,MAAkB,EAAE,eAAgC;QACrE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,IAA0B,EAAE,qBAA8B;QACvF,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,UAAU,IAAI,CAAC,CAAC,qBAAqB;YACrE,IAAI,CAAC,QAAQ,KAAK,MAAM,IAAI,IAAA,2BAAe,EAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC;YAC5F,SAAS,CAAC,CAAC;YACX,IAAI,CAAC;IACT,CAAC;IAEM,MAAM,CAAC,qBAAqB,CAAC,OAAqB;QACvD,MAAM,SAAS,GAAG,IAAA,6BAAiB,EAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC;QACnF,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,IAAA,qBAAS,EAAC,SAAS,CAAC,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IAChF,CAAC;IAEM,KAAK,CAAC,gBAAgB;QAC3B,OAAO,gBAAgB,CAAC,cAAc,CAAC;IACzC,CAAC;IAEM,aAAa,CAAC,SAA4B,EAAE,OAAuB;QACxE,IAAI,SAAS,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,4CAA4C,SAAS,CAAC,IAAI,uBAAuB,CAAC,CAAC;QACrG,CAAC;QAED,uDAAuD;QACvD,MAAM,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;QAEnF,wDAAwD;QACxD,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CACjC,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,qBAAqB,CAAC,EAC3E,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,qBAAqB,CAAC,EAC7E,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,EAC1E,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAC1E,CAAC;QACF,IAAI,EAAE,GAA4B,SAAS,YAAY,6BAAa,CAAC,CAAC;YACpE,SAAS,CAAC,CAAC;YACX,IAAA,oBAAiB,EAAW,SAAS,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAE/D,uFAAuF;QACvF,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC3B,EAAE,GAAG,IAAA,qDAAyB,EAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAChD,CAAC;QAED,qBAAqB;QACrB,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC;YAChC,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,SAAS,CAAC;iBAC5B,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACvC,CAAC;QAED,OAAO,IAAA,2CAAe,EACpB,EAAE,EACF,SAAS,EACT,IAAI,CAAC,eAAe,EACpB,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,iBAAiB,CAAC,CAAC,CAC3D,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,WAAW,CACzB,EAA2B,EAC3B,SAA0B;QAE1B,uDAAuD;QACvD,MAAM,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;QAEnF,IAAI,WAAmB,CAAC;QACxB,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YAC3B,mFAAmF;YACnF,WAAW,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CACxC,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,qBAAqB,CAAC,EAC3E,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,qBAAqB,CAAC,EAC7E,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,EAC1E,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAC1E,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,sGAAsG;YACtG,2DAA2D;YAC3D,mEAAmE;YACnE,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,WAAW,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAClD,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAC/B,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,OAAO,EAAE,qBAAqB,CAAC,EAC3E,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,qBAAqB,CAAC,EAC7E,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,EAC1E,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAC1E,CAAC;gBACF,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC5B,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,qFAAqF;QACrF,MAAM,yBAAyB,GAAG,CAAC,CAAC,qBAAqB;YACrD,IAAA,qBAAS,EAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC;YACzD,gBAAgB,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;QAEpD,EAAE,CAAC,WAAW,CAAC,UAAU,EAAE;YACzB,KAAK,EAAE,IAAI,kCAAuB,EAAE;YACpC,WAAW,EAAE,EAAE,IAAI,EAAE,yBAAyB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE;YAC3F,gBAAgB,EAAE,KAAK;SACxB,CAAC,CAAC;IACL,CAAC;IAEM,UAAU,CACf,UAA6B,EAC7B,QAAwB;QAExB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;IACrE,CAAC;IAEM,YAAY,CACjB,UAAuB,EACvB,QAAwB;QAExB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACvE,CAAC;IAEM,SAAS,CACd,UAA0B,EAC1B,QAAwB;QAExB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;IACpE,CAAC;IAEM,QAAQ;QACb,OAAO,oBAAoB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC;IAC7D,CAAC;;AAnJH,4CAoJC;AAnJ2B,+BAAc,GAA0B;IAChE,IAAI,EAAE,WAAW;IACjB,SAAS,EAAE;QACT,aAAa,EAAE,SAAS;QACxB,OAAO,EAAE,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;KAChF;IACD,iBAAiB,EAAE;QACjB,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC;QAChB,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC;QAChB,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC;KACjB;CACF,CAAC","sourcesContent":["import type { BindingsFactory } from '@comunica/bindings-factory';\nimport { filterMatchingQuotedQuads, quadsToBindings } from '@comunica/bus-query-source-identify';\nimport { KeysQueryOperation } from '@comunica/context-entries';\nimport { MetadataValidationState } from '@comunica/metadata';\nimport type { IQuerySource, BindingsStream, IActionContext, FragmentSelectorShape } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { AsyncIterator, wrap as wrapAsyncIterator } from 'asynciterator';\nimport { DataFactory } from 'rdf-data-factory';\nimport { someTermsNested, filterTermsNested, someTerms, uniqTerms } from 'rdf-terms';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { Factory } from 'sparqlalgebrajs';\nimport type { IRdfJsSourceExtended } from './IRdfJsSourceExtended';\n\nconst AF = new Factory();\nconst DF = new DataFactory<RDF.BaseQuad>();\n\nexport class QuerySourceRdfJs implements IQuerySource {\n  protected static readonly SELECTOR_SHAPE: FragmentSelectorShape = {\n    type: 'operation',\n    operation: {\n      operationType: 'pattern',\n      pattern: AF.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o')),\n    },\n    variablesOptional: [\n      DF.variable('s'),\n      DF.variable('p'),\n      DF.variable('o'),\n    ],\n  };\n\n  public referenceValue: string | RDF.Source;\n  protected readonly source: IRdfJsSourceExtended;\n  private readonly bindingsFactory: BindingsFactory;\n\n  public constructor(source: RDF.Source, bindingsFactory: BindingsFactory) {\n    this.source = source;\n    this.referenceValue = source;\n    this.bindingsFactory = bindingsFactory;\n  }\n\n  public static nullifyVariables(term: RDF.Term | undefined, quotedTripleFiltering: boolean): RDF.Term | undefined {\n    return !term || term.termType === 'Variable' || (!quotedTripleFiltering &&\n      term.termType === 'Quad' && someTermsNested(term, value => value.termType === 'Variable')) ?\n      undefined :\n      term;\n  }\n\n  public static hasDuplicateVariables(pattern: RDF.BaseQuad): boolean {\n    const variables = filterTermsNested(pattern, term => term.termType === 'Variable');\n    return variables.length > 1 && uniqTerms(variables).length < variables.length;\n  }\n\n  public async getSelectorShape(): Promise<FragmentSelectorShape> {\n    return QuerySourceRdfJs.SELECTOR_SHAPE;\n  }\n\n  public queryBindings(operation: Algebra.Operation, context: IActionContext): BindingsStream {\n    if (operation.type !== 'pattern') {\n      throw new Error(`Attempted to pass non-pattern operation '${operation.type}' to QuerySourceRdfJs`);\n    }\n\n    // Check if the source supports quoted triple filtering\n    const quotedTripleFiltering = Boolean(this.source.features?.quotedTripleFiltering);\n\n    // Create an async iterator from the matched quad stream\n    const rawStream = this.source.match(\n      QuerySourceRdfJs.nullifyVariables(operation.subject, quotedTripleFiltering),\n      QuerySourceRdfJs.nullifyVariables(operation.predicate, quotedTripleFiltering),\n      QuerySourceRdfJs.nullifyVariables(operation.object, quotedTripleFiltering),\n      QuerySourceRdfJs.nullifyVariables(operation.graph, quotedTripleFiltering),\n    );\n    let it: AsyncIterator<RDF.Quad> = rawStream instanceof AsyncIterator ?\n      rawStream :\n      wrapAsyncIterator<RDF.Quad>(rawStream, { autoStart: false });\n\n    // Perform post-match-filtering if the source does not support quoted triple filtering.\n    if (!quotedTripleFiltering) {\n      it = filterMatchingQuotedQuads(operation, it);\n    }\n\n    // Determine metadata\n    if (!it.getProperty('metadata')) {\n      this.setMetadata(it, operation)\n        .catch(error => it.destroy(error));\n    }\n\n    return quadsToBindings(\n      it,\n      operation,\n      this.bindingsFactory,\n      Boolean(context.get(KeysQueryOperation.unionDefaultGraph)),\n    );\n  }\n\n  protected async setMetadata(\n    it: AsyncIterator<RDF.Quad>,\n    operation: Algebra.Pattern,\n  ): Promise<void> {\n    // Check if the source supports quoted triple filtering\n    const quotedTripleFiltering = Boolean(this.source.features?.quotedTripleFiltering);\n\n    let cardinality: number;\n    if (this.source.countQuads) {\n      // If the source provides a dedicated method for determining cardinality, use that.\n      cardinality = await this.source.countQuads(\n        QuerySourceRdfJs.nullifyVariables(operation.subject, quotedTripleFiltering),\n        QuerySourceRdfJs.nullifyVariables(operation.predicate, quotedTripleFiltering),\n        QuerySourceRdfJs.nullifyVariables(operation.object, quotedTripleFiltering),\n        QuerySourceRdfJs.nullifyVariables(operation.graph, quotedTripleFiltering),\n      );\n    } else {\n      // Otherwise, fallback to a sub-optimal alternative where we just call match again to count the quads.\n      // WARNING: we can NOT reuse the original data stream here,\n      // because we may lose data elements due to things happening async.\n      let i = 0;\n      cardinality = await new Promise((resolve, reject) => {\n        const matches = this.source.match(\n          QuerySourceRdfJs.nullifyVariables(operation.subject, quotedTripleFiltering),\n          QuerySourceRdfJs.nullifyVariables(operation.predicate, quotedTripleFiltering),\n          QuerySourceRdfJs.nullifyVariables(operation.object, quotedTripleFiltering),\n          QuerySourceRdfJs.nullifyVariables(operation.graph, quotedTripleFiltering),\n        );\n        matches.on('error', reject);\n        matches.on('end', () => resolve(i));\n        matches.on('data', () => i++);\n      });\n    }\n\n    // If `match` would require filtering afterwards, our count will be an over-estimate.\n    const wouldRequirePostFiltering = (!quotedTripleFiltering &&\n        someTerms(operation, term => term.termType === 'Quad')) ||\n      QuerySourceRdfJs.hasDuplicateVariables(operation);\n\n    it.setProperty('metadata', {\n      state: new MetadataValidationState(),\n      cardinality: { type: wouldRequirePostFiltering ? 'estimate' : 'exact', value: cardinality },\n      canContainUndefs: false,\n    });\n  }\n\n  public queryQuads(\n    _operation: Algebra.Operation,\n    _context: IActionContext,\n  ): AsyncIterator<RDF.Quad> {\n    throw new Error('queryQuads is not implemented in QuerySourceQpf');\n  }\n\n  public queryBoolean(\n    _operation: Algebra.Ask,\n    _context: IActionContext,\n  ): Promise<boolean> {\n    throw new Error('queryBoolean is not implemented in QuerySourceQpf');\n  }\n\n  public queryVoid(\n    _operation: Algebra.Update,\n    _context: IActionContext,\n  ): Promise<void> {\n    throw new Error('queryVoid is not implemented in QuerySourceQpf');\n  }\n\n  public toString(): string {\n    return `QuerySourceRdfJs(${this.source.constructor.name})`;\n  }\n}\n"]}