{"version":3,"file":"ActorQuerySourceIdentifyRdfJs.js","sourceRoot":"","sources":["ActorQuerySourceIdentifyRdfJs.ts"],"names":[],"mappings":";;;AAAA,iEAA6D;AAO7D,mFAA+E;AAE/E,yCAA+C;AAE/C,yDAAsD;AAEtD;;GAEG;AACH,MAAa,6BAA8B,SAAQ,oDAAwB;IAGzE,YAAmB,IAAwC;QACzD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAkC;QAClD,MAAM,MAAM,GAAG,MAAM,CAAC,uBAAuB,CAAC;QAC9C,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACzD,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,+EAA+E,CAAC,CAAC;QAC/G,CAAC;QACD,IAAI,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,IAAI,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACnE,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,0CAA0C,CAAC,CAAC;QAC1E,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAkC;QACjD,OAAO;YACL,WAAW,EAAE;gBACX,MAAM,EAAE,IAAI,mCAAgB,CACb,MAAM,CAAC,uBAAuB,CAAC,KAAK,EACjD,MAAM,kCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,MAAM,CAAC,OAAO,CAAC,CAChF;gBACD,OAAO,EAAE,MAAM,CAAC,uBAAuB,CAAC,OAAO,IAAI,IAAI,oBAAa,EAAE;aACvE;SACF,CAAC;IACJ,CAAC;CACF;AA7BD,sEA6BC","sourcesContent":["import { BindingsFactory } from '@comunica/bindings-factory';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type {\n  IActionQuerySourceIdentify,\n  IActorQuerySourceIdentifyOutput,\n  IActorQuerySourceIdentifyArgs,\n} from '@comunica/bus-query-source-identify';\nimport { ActorQuerySourceIdentify } from '@comunica/bus-query-source-identify';\nimport type { IActorTest } from '@comunica/core';\nimport { ActionContext } from '@comunica/core';\nimport type * as RDF from '@rdfjs/types';\nimport { QuerySourceRdfJs } from './QuerySourceRdfJs';\n\n/**\n * A comunica RDFJS Query Source Identify Actor.\n */\nexport class ActorQuerySourceIdentifyRdfJs extends ActorQuerySourceIdentify {\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorQuerySourceIdentifyRdfJsArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionQuerySourceIdentify): Promise<IActorTest> {\n    const source = action.querySourceUnidentified;\n    if (source.type !== undefined && source.type !== 'rdfjs') {\n      throw new Error(`${this.name} requires a single query source with rdfjs type to be present in the context.`);\n    }\n    if (typeof source.value === 'string' || !('match' in source.value)) {\n      throw new Error(`${this.name} received an invalid rdfjs query source.`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionQuerySourceIdentify): Promise<IActorQuerySourceIdentifyOutput> {\n    return {\n      querySource: {\n        source: new QuerySourceRdfJs(\n          <RDF.Source> action.querySourceUnidentified.value,\n          await BindingsFactory.create(this.mediatorMergeBindingsContext, action.context),\n        ),\n        context: action.querySourceUnidentified.context ?? new ActionContext(),\n      },\n    };\n  }\n}\n\nexport interface IActorQuerySourceIdentifyRdfJsArgs extends IActorQuerySourceIdentifyArgs {\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}