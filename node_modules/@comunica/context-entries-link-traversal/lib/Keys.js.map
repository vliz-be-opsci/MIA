{"version":3,"file":"Keys.js","sourceRoot":"","sources":["Keys.ts"],"names":[],"mappings":";;;AAAA,yCAAkD;AAIlD;;;;GAIG;AAEU,QAAA,6BAA6B,GAAG;IAE3C;;OAEG;IACH,eAAe,EAAE,IAAI,uBAAgB,CACnC,4DAA4D,CAC7D;CACF,CAAC;AAEW,QAAA,oBAAoB,GAAG;IAClC;;;OAGG;IACH,eAAe,EAChB,IAAI,uBAAgB,CAAU,oDAAoD,CAAC;CACnF,CAAC;AAEW,QAAA,WAAW,GAAG;IACzB;;OAEG;IACH,gBAAgB,EAAE,IAAI,uBAAgB,CAAmB,yCAAyC,CAAC;CACpG,CAAC","sourcesContent":["import { ActionContextKey } from '@comunica/core';\nimport type { IDataDestination } from '@comunica/types';\nimport type { AnnotateSourcesType } from '@comunica/types-link-traversal';\n\n/**\n * When adding entries to this file, also add a shortcut for them in the contextKeyShortcuts TSDoc comment in\n * ActorIniQueryBase in @comunica/actor-init-query if it makes sense to use this entry externally.\n * Also, add this shortcut to IQueryContextCommon in @comunica/types.\n */\n\nexport const KeysRdfResolveHypermediaLinks = {\n\n  /**\n   * Context entry for indicating the type of source annotation.\n   */\n  annotateSources: new ActionContextKey<AnnotateSourcesType>(\n    '@comunica/bus-rdf-resolve-hypermedia-links:annotateSources',\n  ),\n};\n\nexport const KeysExtractLinksTree = {\n  /**\n   * A flag to indicate if relationships should strictly correspond to the current document's URL.\n   * Default true.\n   */\n  strictTraversal:\n new ActionContextKey<boolean>('@comunica/actor-extract-links-tree:strictTraversal'),\n};\n\nexport const KeysRdfJoin = {\n  /**\n   * If adaptive joining must not be done.\n   */\n  skipAdaptiveJoin: new ActionContextKey<IDataDestination>('@comunica/bus-rdf-join:skipAdaptiveJoin'),\n};\n"]}