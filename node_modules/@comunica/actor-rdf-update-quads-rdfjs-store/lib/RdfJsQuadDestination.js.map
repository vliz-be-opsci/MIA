{"version":3,"file":"RdfJsQuadDestination.js","sourceRoot":"","sources":["RdfJsQuadDestination.ts"],"names":[],"mappings":";;;AAGA,qEAAgE;AAChE,uDAA+C;AAC/C,2CAAwD;AAExD,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;GAEG;AACH,MAAa,oBAAoB;IAG/B,YAAmB,KAAgB;QACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,MAAM,CAAC,KAA8B;QAC1C,OAAO,IAAA,+CAAqB,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,MAAM,CAAC,KAA8B;QAC1C,OAAO,IAAA,+CAAqB,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,MAA4D,EAC5D,iBAA0B,EAC1B,WAAoB;QAEpB,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,KAAK;gBACR,mCAAmC;gBACnC,2BAA2B;gBAC3B,MAAM,IAAA,+CAAqB,EAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACvE,0CAA0C;YAC5C,KAAK,OAAO;gBACV,kCAAkC;gBAClC,gCAAgC;gBAChC,gDAAgD;gBAChD,gDAAgD;gBAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACpC,gDAAgD;gBAChD,MAAM,WAAW,GAA4B,EAAE,CAAC;gBAChD,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAc,EAAE,EAAE;oBACrC,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,cAAc,EAAE,CAAC;wBAC3C,WAAW,CAAC,IAAA,yBAAY,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC;oBAC/C,CAAC;gBACH,CAAC,CAAC,CAAC;gBACH,MAAM,IAAA,+CAAqB,EAAC,QAAQ,CAAC,CAAC;gBAEtC,0BAA0B;gBAC1B,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;qBACvC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,IAAA,+CAAqB,EAAC,IAAI,CAAC,KAAK;qBAChD,WAAW,CAAiB,IAAA,yBAAY,EAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9D,MAAM;YACR;gBACE,4CAA4C;gBAC5C,KAAK,MAAM,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAE,MAAM,CAAE,EAAE,CAAC;oBAChE,MAAM,IAAA,+CAAqB,EAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7D,CAAC;QACL,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAuB,EAAE,mBAA4B;QAC7E,mFAAmF;QAEnF,qDAAqD;QACrD,IAAI,mBAAmB,EAAE,CAAC;YACxB,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;gBAC3B,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;gBAC9E,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBAC1C,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;wBAC7B,MAAM,CAAC,IAAI,KAAK,CAAC,0BAA0B,KAAK,CAAC,KAAK,uBAAuB,CAAC,CAAC,CAAC;oBAClF,CAAC,CAAC,CAAC;oBACH,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;oBAChC,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAvED,oDAuEC","sourcesContent":["import type { IQuadDestination } from '@comunica/bus-rdf-update-quads';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { promisifyEventEmitter } from 'event-emitter-promisify';\nimport { DataFactory } from 'rdf-data-factory';\nimport { stringToTerm, termToString } from 'rdf-string';\n\nconst DF = new DataFactory();\n\n/**\n * A quad destination that wraps around an {@link RDF.Store}.\n */\nexport class RdfJsQuadDestination implements IQuadDestination {\n  private readonly store: RDF.Store;\n\n  public constructor(store: RDF.Store) {\n    this.store = store;\n  }\n\n  public delete(quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    return promisifyEventEmitter(this.store.remove(quads));\n  }\n\n  public insert(quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    return promisifyEventEmitter(this.store.import(quads));\n  }\n\n  public async deleteGraphs(\n    graphs: RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode[],\n    _requireExistence: boolean,\n    _dropGraphs: boolean,\n  ): Promise<void> {\n    switch (graphs) {\n      case 'ALL':\n        /* eslint-disable no-fallthrough */\n        // Remove the default graph\n        await promisifyEventEmitter(this.store.deleteGraph(DF.defaultGraph()));\n        // Drop through to remove all named graphs\n      case 'NAMED':\n        /* eslint-enable no-fallthrough */\n        // Warning: this is sub-optimal!\n        // Query ALL quads to determine all named graphs\n        // eslint-disable-next-line no-case-declarations\n        const allQuads = this.store.match();\n        // eslint-disable-next-line no-case-declarations\n        const namedGraphs: Record<string, boolean> = {};\n        allQuads.on('data', (quad: RDF.Quad) => {\n          if (quad.graph.termType !== 'DefaultGraph') {\n            namedGraphs[termToString(quad.graph)] = true;\n          }\n        });\n        await promisifyEventEmitter(allQuads);\n\n        // Delete all named graphs\n        await Promise.all(Object.keys(namedGraphs)\n          .map(namedGraph => promisifyEventEmitter(this.store\n            .deleteGraph(<RDF.NamedNode> stringToTerm(namedGraph)))));\n        break;\n      default:\n        // Delete the default graph or a named graph\n        for (const graph of Array.isArray(graphs) ? graphs : [ graphs ]) {\n          await promisifyEventEmitter(this.store.deleteGraph(graph));\n        }\n    }\n  }\n\n  public async createGraphs(graphs: RDF.NamedNode[], requireNonExistence: boolean): Promise<void> {\n    // We don't have to create anything, since RDF/JS stores don't record empty graphs.\n\n    // The only check we have to do is error on existence\n    if (requireNonExistence) {\n      for (const graph of graphs) {\n        const eventEmitter = this.store.match(undefined, undefined, undefined, graph);\n        await new Promise<void>((resolve, reject) => {\n          eventEmitter.once('data', () => {\n            reject(new Error(`Unable to create graph ${graph.value} as it already exists`));\n          });\n          eventEmitter.on('end', resolve);\n          eventEmitter.on('error', reject);\n        });\n      }\n    }\n  }\n}\n"]}