{"version":3,"file":"ActorExtractLinksHeaders.js","sourceRoot":"","sources":["ActorExtractLinksHeaders.ts"],"names":[],"mappings":";;;AACA,mEAAgE;AAIhE;;GAEG;AACH,MAAa,wBAAyB,SAAQ,qCAAiB;IAI7D,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,CAAC,CAAC;QAHG,cAAS,GAAG,SAAS,CAAC;QAIrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;IACtF,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAA4B;QAC5C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;YACtC,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC/B,MAAM,KAAK,GAAY,EAAE,CAAC;YAE1B,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjC,MAAM,WAAW,GAAG,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;gBACrD,IAAI,WAAW,EAAE,CAAC;oBAChB,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;wBACjC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;4BACvB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;4BAC1C,IAAI,KAAK,EAAE,CAAC;gCACV,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;4BAC1D,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;YACD,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAlCD,4DAkCC","sourcesContent":["import type { IActionExtractLinks, IActorExtractLinksOutput } from '@comunica/bus-extract-links';\nimport { ActorExtractLinks } from '@comunica/bus-extract-links';\nimport type { ILink } from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\n\n/**\n * A comunica Traverse Predicates RDF Link Header Actor.\n */\nexport class ActorExtractLinksHeaders extends ActorExtractLinks {\n  private readonly headers: RegExp[];\n  private readonly linkRegEx = /<(.*)>/u;\n\n  public constructor(args: IActorExtractLinksTraverseHeadersArgs) {\n    super(args);\n    this.headers = args.headersRegexes.map(stringRegex => new RegExp(stringRegex, 'u'));\n  }\n\n  public async test(_action: IActionExtractLinks): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionExtractLinks): Promise<IActorExtractLinksOutput> {\n    return new Promise((resolve, _reject) => {\n      const headers = action.headers;\n      const links: ILink[] = [];\n\n      for (const regex of this.headers) {\n        const linkHeaders = headers?.get('link')?.split(',');\n        if (linkHeaders) {\n          for (const header of linkHeaders) {\n            if (regex.test(header)) {\n              const match = this.linkRegEx.exec(header);\n              if (match) {\n                links.push({ url: new URL(match[1], action.url).href });\n              }\n            }\n          }\n        }\n      }\n      resolve({ links });\n    });\n  }\n}\n\nexport interface IActorExtractLinksTraverseHeadersArgs\n  extends IActorArgs<IActionExtractLinks, IActorTest, IActorExtractLinksOutput> {\n  headersRegexes: string[];\n}\n"]}