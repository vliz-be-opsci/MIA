{"version":3,"file":"QuadDestinationPatchSparqlUpdate.js","sourceRoot":"","sources":["QuadDestinationPatchSparqlUpdate.ts"],"names":[],"mappings":";;;AACA,iDAA6E;AAK7E,6CAAsC;AACtC,mDAA8C;AAC9C,qDAA2C;AAE3C;;GAEG;AACH,MAAa,gCAAgC;IAM3C,YACE,GAAW,EACX,OAAuB,EACvB,YAA0B;QAE1B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,MAAM,CAAC,KAA8B;QAC1C,OAAO,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA8B;QAChD,OAAO,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC;IAEM,KAAK,CAAC,uBAAuB,CAAC,IAAyB,EAAE,KAA8B;QAC5F,6BAA6B;QAC7B,MAAM,WAAW,GAAG,KAAK;aACtB,GAAG,CAAC,CAAC,IAAc,EAAE,EAAE;YACtB,IAAI,UAAU,GAAG,GAAG,IAAA,6BAAY,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAA,6BAAY,EAAC,IAAI,CAAC,SAAS,CAAC,IAAI,IAAA,6BAAY,EAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YAChH,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,cAAc,EAAE,CAAC;gBAC3C,UAAU,GAAG,KAAK,UAAU,IAAI,CAAC;YACnC,CAAC;iBAAM,CAAC;gBACN,UAAU,GAAG,WAAW,IAAA,6BAAY,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,UAAU,MAAM,CAAC;YACzE,CAAC;YACD,OAAO,UAAU,CAAC;QACpB,CAAC,CAAC;aACD,OAAO,CAAC,CAAE,GAAG,IAAI,WAAW,CAAE,CAAC;aAC/B,MAAM,CAAC,CAAE,GAAG,CAAE,CAAC,CAAC;QACnB,MAAM,QAAQ,GAAG,IAAI,0BAAQ,EAAE,CAAC;QAChC,QAAQ,CAAC,IAAI,CAAO,WAAW,CAAC,CAAC;QAEjC,2BAA2B;QAC3B,MAAM,OAAO,GAAY,IAAI,qBAAO,CAAC,EAAE,cAAc,EAAE,2BAA2B,EAAE,CAAC,CAAC;QACtF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YACnD,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE;gBACJ,OAAO;gBACP,MAAM,EAAE,OAAO;gBACf,IAAI,EAAE,oBAAS,CAAC,mBAAmB,CAAC,QAAQ,CAAC;aAC9C;YACD,KAAK,EAAE,IAAI,CAAC,GAAG;SAChB,CAAC,CAAC;QAEH,MAAM,IAAA,uCAA4B,EAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAC7D,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,OAA6D,EAC7D,iBAA0B,EAC1B,WAAoB;QAEpB,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;IACvF,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAwB,EAAE,oBAA6B;QAC/E,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;IACvF,CAAC;CACF;AAnED,4EAmEC","sourcesContent":["import type { MediatorHttp } from '@comunica/bus-http';\nimport { validateAndCloseHttpResponse, ActorHttp } from '@comunica/bus-http';\nimport type { IQuadDestination } from '@comunica/bus-rdf-update-quads';\nimport type { IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { Headers } from 'cross-fetch';\nimport { termToString } from 'rdf-string-ttl';\nimport { Readable } from 'readable-stream';\n\n/**\n * A quad destination that represents a resource that is patchable via SPARQL Update.\n */\nexport class QuadDestinationPatchSparqlUpdate implements IQuadDestination {\n  private readonly url: string;\n  private readonly context: IActionContext;\n\n  private readonly mediatorHttp: MediatorHttp;\n\n  public constructor(\n    url: string,\n    context: IActionContext,\n    mediatorHttp: MediatorHttp,\n  ) {\n    this.url = url;\n    this.context = context;\n    this.mediatorHttp = mediatorHttp;\n  }\n\n  public insert(quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    return this.wrapSparqlUpdateRequest('INSERT', quads);\n  }\n\n  public async delete(quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    return this.wrapSparqlUpdateRequest('DELETE', quads);\n  }\n\n  public async wrapSparqlUpdateRequest(type: 'INSERT' | 'DELETE', quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    // Wrap triples in DATA block\n    const dataWrapped = quads\n      .map((quad: RDF.Quad) => {\n        let stringQuad = `${termToString(quad.subject)} ${termToString(quad.predicate)} ${termToString(quad.object)} .`;\n        if (quad.graph.termType === 'DefaultGraph') {\n          stringQuad = `  ${stringQuad}\\n`;\n        } else {\n          stringQuad = `  GRAPH ${termToString(quad.graph)} { ${stringQuad} }\\n`;\n        }\n        return stringQuad;\n      })\n      .prepend([ `${type} DATA {\\n` ])\n      .append([ '}' ]);\n    const readable = new Readable();\n    readable.wrap(<any> dataWrapped);\n\n    // Send data in PUT request\n    const headers: Headers = new Headers({ 'content-type': 'application/sparql-update' });\n    const httpResponse = await this.mediatorHttp.mediate({\n      context: this.context,\n      init: {\n        headers,\n        method: 'PATCH',\n        body: ActorHttp.toWebReadableStream(readable),\n      },\n      input: this.url,\n    });\n\n    await validateAndCloseHttpResponse(this.url, httpResponse);\n  }\n\n  public async deleteGraphs(\n    _graphs: RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode[],\n    _requireExistence: boolean,\n    _dropGraphs: boolean,\n  ): Promise<void> {\n    throw new Error(`Patch-based SPARQL Update destinations don't support named graphs`);\n  }\n\n  public async createGraphs(_graphs: RDF.NamedNode[], _requireNonExistence: boolean): Promise<void> {\n    throw new Error(`Patch-based SPARQL Update destinations don't support named graphs`);\n  }\n}\n"]}