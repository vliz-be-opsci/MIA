{"version":3,"file":"LoggerPretty.js","sourceRoot":"","sources":["LoggerPretty.ts"],"names":[],"mappings":";;;AAAA,2CAAyC;AAEzC,oHAAoH;AACpH,iDAAiD;AACjD,gDAAiD;AAEjD,MAAM,OAAO,GAAmB,OAAO,CAAC,UAAU,CAAC,CAAC;AAEpD;;GAEG;AACH,MAAa,YAAa,SAAQ,cAAM;IAatC,YAAmB,IAAuB;QACxC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,cAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,IAAU;QACrC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,IAAU;QACrC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,YAAY,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC7D,CAAC;IAES,GAAG,CAAC,KAAa,EAAE,KAAa,EAAE,OAAe,EAAE,IAAU;QACrE,IAAI,cAAM,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY;YACpD,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YAC3E,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,MAAM,KAAK,CAAC,WAAW,EAAE,KAAK,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QACpJ,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,SAAS,CAAC,GAAQ,EAAE,KAAa;QAC7C,OAAO,GAAG,KAAK,GAAG,GAAG,GAAG,YAAY,CAAC,WAAW,EAAE,CAAC;IACrD,CAAC;;AA1DH,oCA2DC;AA1DwB,wBAAW,GAAW,WAAW,CAAC;AAClC,sBAAS,GAAW,YAAY,CAAC;AACjC,wBAAW,GAAW,YAAY,CAAC;AACnC,yBAAY,GAAW,YAAY,CAAC;AACpC,uBAAU,GAAW,YAAY,CAAC;AAClC,0BAAa,GAAW,YAAY,CAAC;AACrC,uBAAU,GAAW,YAAY,CAAC;AAClC,uBAAU,GAAW,YAAY,CAAC","sourcesContent":["import { Logger } from '@comunica/types';\n\n// Use require instead of import for default exports, to be compatible with variants of esModuleInterop in tsconfig.\n// eslint-disable-next-line ts/no-require-imports\nimport objectInspect = require('object-inspect');\n\nconst process: NodeJS.Process = require('process/');\n\n/**\n * A logger that pretty-prints everything.\n */\nexport class LoggerPretty extends Logger {\n  public static readonly COLOR_RESET: string = '\\u001B[0m';\n  public static readonly COLOR_RED: string = '\\u001B[31m';\n  public static readonly COLOR_GREEN: string = '\\u001B[32m';\n  public static readonly COLOR_YELLOW: string = '\\u001B[33m';\n  public static readonly COLOR_BLUE: string = '\\u001B[34m';\n  public static readonly COLOR_MAGENTA: string = '\\u001B[35m';\n  public static readonly COLOR_CYAN: string = '\\u001B[36m';\n  public static readonly COLOR_GRAY: string = '\\u001B[90m';\n\n  private readonly level: string;\n  private readonly levelOrdinal: number;\n  private readonly actors?: Record<string, boolean>;\n  public constructor(args: ILoggerPrettyArgs) {\n    super();\n    this.level = args.level;\n    this.levelOrdinal = Logger.getLevelOrdinal(this.level);\n    this.actors = args.actors;\n  }\n\n  public debug(message: string, data?: any): void {\n    this.log('debug', LoggerPretty.COLOR_GRAY, message, data);\n  }\n\n  public error(message: string, data?: any): void {\n    this.log('error', LoggerPretty.COLOR_RED, message, data);\n  }\n\n  public fatal(message: string, data?: any): void {\n    this.log('fatal', LoggerPretty.COLOR_CYAN, message, data);\n  }\n\n  public info(message: string, data?: any): void {\n    this.log('info', LoggerPretty.COLOR_GREEN, message, data);\n  }\n\n  public trace(message: string, data?: any): void {\n    this.log('trace', LoggerPretty.COLOR_BLUE, message, data);\n  }\n\n  public warn(message: string, data?: any): void {\n    this.log('warn', LoggerPretty.COLOR_YELLOW, message, data);\n  }\n\n  protected log(level: string, color: string, message: string, data?: any): void {\n    if (Logger.getLevelOrdinal(level) >= this.levelOrdinal &&\n      (!data || !('actor' in data) || !this.actors || this.actors[data.actor])) {\n      process.stderr.write(LoggerPretty.withColor(`[${new Date().toISOString()}]  ${level.toUpperCase()}: ${message} ${objectInspect(data)}\\n`, color));\n    }\n  }\n\n  /**\n   * Return a string in a given color\n   * @param str The string that should be printed in\n   * @param color A given color\n   */\n  public static withColor(str: any, color: string): string {\n    return `${color}${str}${LoggerPretty.COLOR_RESET}`;\n  }\n}\n\nexport interface ILoggerPrettyArgs {\n  /**\n   * The minimum logging level.\n   */\n  level: string;\n  /**\n   * A whitelist of actor IRIs to log for.\n   */\n  actors?: Record<string, boolean>;\n}\n"]}