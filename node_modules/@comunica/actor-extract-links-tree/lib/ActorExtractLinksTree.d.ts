import type { IActionExtractLinks, IActorExtractLinksOutput, IActorExtractLinksArgs } from '@comunica/bus-extract-links';
import { ActorExtractLinks } from '@comunica/bus-extract-links';
import type { IActorTest } from '@comunica/core';
/**
 * A comunica Extract Links Tree Extract Links Actor.
 */
export declare class ActorExtractLinksTree extends ActorExtractLinks {
    static readonly aNodeType: import("rdf-data-factory").NamedNode<"https://w3id.org/tree#node">;
    static readonly aRelation: import("rdf-data-factory").NamedNode<"https://w3id.org/tree#relation">;
    static readonly aView: import("rdf-data-factory").NamedNode<"https://w3id.org/tree#view">;
    static readonly aSubset: import("rdf-data-factory").NamedNode<"http://rdfs.org/ns/void#subset">;
    static readonly isPartOf: import("rdf-data-factory").NamedNode<"http://purl.org/dc/terms/isPartOf">;
    constructor(args: IActorExtractLinksArgs);
    test(_action: IActionExtractLinks): Promise<IActorTest>;
    run(action: IActionExtractLinks): Promise<IActorExtractLinksOutput>;
    /**
     * A helper function to find all the relations of a TREE document and the possible next nodes to visit.
     * The next nodes are not guaranteed to have as subject the URL of the current page,
     * so filtering is necessary afterward.
     * @param quad the current quad.
     * @param url url of the page
     * @param pageRelationNodes the url of the relation node of the page that have as subject the URL of the page
     * @param nodeLinks the url of the next potential page that has to be visited,
     *  regardless if the implicit subject is the node of the page
     */
    private getTreeQuadsRawRelations;
}
