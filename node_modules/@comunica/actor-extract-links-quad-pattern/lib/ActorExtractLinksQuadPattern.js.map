{"version":3,"file":"ActorExtractLinksQuadPattern.js","sourceRoot":"","sources":["ActorExtractLinksQuadPattern.ts"],"names":[],"mappings":";;;AACA,mEAAgE;AAChE,+DAA+D;AAG/D,yCAA+F;AAG/F;;GAEG;AACH,MAAa,4BAA6B,SAAQ,qCAAiB;IAGjE,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,qBAAqB,CAAC,OAAuB;QACzD,MAAM,qBAAqB,GAAkC,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,SAAS,CAAC,CAAC;QACvG,IAAI,CAAC,qBAAqB,IAAI,qBAAqB,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YACvE,OAAO;QACT,CAAC;QACD,OAAO,qBAAqB,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA2B;QAC3C,IAAI,CAAC,4BAA4B,CAAC,qBAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;YACxE,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,kDAAkD,CAAC,CAAC;QACxF,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,MAAM,WAAW,GAAoB,4BAA4B;aAC9D,qBAAqB,CAAC,MAAM,CAAC,OAAO,CAAE,CAAC;QAE1C,OAAO;YACL,KAAK,EAAE,MAAM,qCAAiB,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBAC5E,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;oBACvB,6EAA6E;oBAC7E,IAAI,IAAA,gCAAoB,EAAC,IAAI,EAAE,WAAW,CAAC,EAAE,CAAC;wBAC5C,KAAK,MAAM,YAAY,IAAI,IAAA,+BAAmB,EAAC,WAAW,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,KAAK,UAAU,CAAC,EAAE,CAAC;4BACpG,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,KAAK,WAAW,EAAE,CAAC;gCAChD,KAAK,CAAC,IAAI,CAAC;oCACT,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK;oCAC7B,QAAQ,EAAE,EAAE,eAAe,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,EAAC;iCACvE,CAAC,CAAC;4BACL,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,yFAAyF;oBACzF,wCAAwC;oBACxC,IAAI,IAAA,gCAAoB,EAAC,IAAI,EAAE,WAAW,CAAC,EAAE,CAAC;wBAC5C,KAAK,MAAM,IAAI,IAAI,IAAA,yBAAa,EAAC,IAAA,oBAAQ,EAAC,IAAI,CAAC,CAAC,EAAE,CAAC;4BACjD,KAAK,CAAC,IAAI,CAAC;gCACT,GAAG,EAAE,IAAI,CAAC,KAAK;gCACf,QAAQ,EAAE,EAAE,eAAe,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,EAAC;6BACxE,CAAC,CAAC;wBACL,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC,CAAC;SACH,CAAC;IACJ,CAAC;CACF;AAvDD,oEAuDC","sourcesContent":["import type { IActionExtractLinks, IActorExtractLinksOutput } from '@comunica/bus-extract-links';\nimport { ActorExtractLinks } from '@comunica/bus-extract-links';\nimport { KeysQueryOperation } from '@comunica/context-entries';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport type { IActionContext } from '@comunica/types';\nimport { filterQuadTermNames, getNamedNodes, getTerms, matchPatternComplete } from 'rdf-terms';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Traverse Quad Pattern RDF Metadata Extract Actor.\n */\nexport class ActorExtractLinksQuadPattern extends ActorExtractLinks {\n  private readonly onlyVariables: boolean;\n\n  public constructor(args: IActorExtractLinksQuadPatternArgs) {\n    super(args);\n  }\n\n  public static getCurrentQuadPattern(context: IActionContext): Algebra.Pattern | undefined {\n    const currentQueryOperation: Algebra.Operation | undefined = context.get(KeysQueryOperation.operation);\n    if (!currentQueryOperation || currentQueryOperation.type !== 'pattern') {\n      return;\n    }\n    return currentQueryOperation;\n  }\n\n  public async test(action: IActionExtractLinks): Promise<IActorTest> {\n    if (!ActorExtractLinksQuadPattern.getCurrentQuadPattern(action.context)) {\n      throw new Error(`Actor ${this.name} can only work in the context of a quad pattern.`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionExtractLinks): Promise<IActorExtractLinksOutput> {\n    const quadPattern: Algebra.Pattern = ActorExtractLinksQuadPattern\n      .getCurrentQuadPattern(action.context)!;\n\n    return {\n      links: await ActorExtractLinks.collectStream(action.metadata, (quad, links) => {\n        if (this.onlyVariables) {\n          // --- If we only want to follow links matching with a variable component ---\n          if (matchPatternComplete(quad, quadPattern)) {\n            for (const quadTermName of filterQuadTermNames(quadPattern, value => value.termType === 'Variable')) {\n              if (quad[quadTermName].termType === 'NamedNode') {\n                links.push({\n                  url: quad[quadTermName].value,\n                  metadata: { producedByActor: { name: this.name, onlyVariables: true }},\n                });\n              }\n            }\n          }\n        } else {\n          // --- If we want to follow links, irrespective of matching with a variable component ---\n          // eslint-disable-next-line no-lonely-if\n          if (matchPatternComplete(quad, quadPattern)) {\n            for (const link of getNamedNodes(getTerms(quad))) {\n              links.push({\n                url: link.value,\n                metadata: { producedByActor: { name: this.name, onlyVariables: false }},\n              });\n            }\n          }\n        }\n      }),\n    };\n  }\n}\n\nexport interface IActorExtractLinksQuadPatternArgs\n  extends IActorArgs<IActionExtractLinks, IActorTest, IActorExtractLinksOutput> {\n  /**\n   * @default {true}\n   */\n  onlyVariables: boolean;\n}\n"]}