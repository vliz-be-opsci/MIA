{"version":3,"file":"ActorExtractLinks.js","sourceRoot":"","sources":["ActorExtractLinks.ts"],"names":[],"mappings":";;;AAEA,yCAAuC;AAGvC;;;;;;;;;;GAUG;AACH,MAAsB,iBAAkB,SAAQ,YAAgE;IAC9G;;OAEG;IACH,YAAmB,IAA4B;QAC7C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,aAAa,CACzB,QAAoB,EACpB,MAAgD;QAEhD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,KAAK,GAAY,EAAE,CAAC;YAE1B,iBAAiB;YACjB,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAE7B,wCAAwC;YACxC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAc,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;YAE7D,8BAA8B;YAC9B,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBACtB,OAAO,CAAC,KAAK,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAjCD,8CAiCC","sourcesContent":["import type { ILink } from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport type { IActorArgs, IActorOutput, IActorTest, Mediate, IAction } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type * as RDF from '@rdfjs/types';\n\n/**\n * A comunica actor for extract-links events.\n *\n * Actor types:\n * * Input:  IActionExtractLinks:      Metdata from which links can be extracted.\n * * Test:   <none>\n * * Output: IActorExtractLinksOutput: The extracted links.\n *\n * @see IActionExtractLinks\n * @see IActorExtractLinksOutput\n */\nexport abstract class ActorExtractLinks extends Actor<IActionExtractLinks, IActorTest, IActorExtractLinksOutput> {\n  /**\n   * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   */\n  public constructor(args: IActorExtractLinksArgs) {\n    super(args);\n  }\n\n  /**\n   * A helper function to append links based on incoming quads.\n   * @param metadata A metadata stream of quads.\n   * @param onQuad A callback that will be invoked for each quad in the metadata stream.\n   *               The second argument is the array of links that can be appended to.\n   */\n  public static collectStream(\n    metadata: RDF.Stream,\n    onQuad: (quad: RDF.Quad, links: ILink[]) => void,\n  ): Promise<ILink[]> {\n    return new Promise((resolve, reject) => {\n      const links: ILink[] = [];\n\n      // Forward errors\n      metadata.on('error', reject);\n\n      // Invoke callback on each metadata quad\n      metadata.on('data', (quad: RDF.Quad) => onQuad(quad, links));\n\n      // Resolve to discovered links\n      metadata.on('end', () => {\n        resolve(links);\n      });\n    });\n  }\n}\n\nexport interface IActionExtractLinks extends IAction {\n  /**\n   * The page URL from which the quads were retrieved.\n   */\n  url: string;\n  /**\n   * The stream of quads to extract links from.\n   */\n  metadata: RDF.Stream;\n  /**\n   * The time it took to request the page in milliseconds.\n   * This is the time until the first byte arrives.\n   */\n  requestTime: number;\n  /**\n   * The headers of the page.\n   */\n  headers?: Headers;\n}\n\nexport interface IActorExtractLinksOutput extends IActorOutput {\n  /**\n   * The links to follow.\n   */\n  links: ILink[];\n  /**\n   * The conditional links.\n   */\n  linksConditional?: ILink[];\n}\n\nexport type IActorExtractLinksArgs = IActorArgs<\nIActionExtractLinks,\nIActorTest,\nIActorExtractLinksOutput\n>;\n\nexport type MediatorExtractLinks = Mediate<\nIActionExtractLinks,\nIActorExtractLinksOutput\n>;\n"]}