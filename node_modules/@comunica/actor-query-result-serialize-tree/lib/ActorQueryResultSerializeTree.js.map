{"version":3,"file":"ActorQueryResultSerializeTree.js","sourceRoot":"","sources":["ActorQueryResultSerializeTree.ts"],"names":[],"mappings":";;;AAKA,qFAAgG;AAChG,+DAA0D;AAC1D,yCAA+C;AAG/C,qDAA2C;AAE3C,2DAA+C;AAE/C;;GAEG;AACH,MAAa,6BAA8B,SAAQ,qEAAwC;IAEzF;;;;OAIG;IACH,YAAmB,IAAmD;QACpE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,KAAK,CAAC,uBAAuB,CACzC,cAA8B,EAC9B,OAAyD,EACzD,iBAAsC;QAEtC,MAAM,aAAa,GAAmB,oBAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACjF,MAAM,SAAS,GAAc,IAAI,8BAAS,CAAC,iBAAiB,CAAC,CAAC;QAC9D,MAAM,MAAM,GAAY;YACtB,oBAAoB,EAAE,aAAa,CAAC,GAAG,CAAC,+BAAa,CAAC,2BAA2B,CAAC,IAAI,EAAE;SACzF,CAAC;QAEF,OAAO,SAAS,CAAC,cAAc,CAAC,MAAM,cAAc,CAAC,GAAG,CAAC,CAAC,QAAsB,EAAE,EAAE,CAClF,MAAM,CAAC,WAAW,CAAC,CAAE,GAAG,QAAQ,CAAE;aAC/B,GAAG,CAAC,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAAE,EAAE,CAAC,CAAE,GAAG,CAAC,KAAK,EAAE,KAAK,CAAE,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,CAAC;IAC1E,CAAC;IAEe,KAAK,CAAC,iBAAiB,CAAC,MAA8B;QACpE,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAClE,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CACpB,MAA8B,EAC9B,UAAkB;QAElB,MAAM,IAAI,GAAG,IAAI,0BAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE,GAAoB,CAAC,CAAC;YACxC,6BAA6B,CAAC,uBAAuB,CAClB,MAAO,CAAC,cAAc,EACvD,MAAM,CAAC,OAAO,EACd,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAChC;iBACE,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;gBACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC;iBACD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC;QAEF,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AA9DD,sEA8DC","sourcesContent":["import type {\n  IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput,\n} from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport { ActionContext } from '@comunica/core';\nimport type { IQueryOperationResultBindings, BindingsStream, IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Readable } from 'readable-stream';\nimport type { IConverterSettings, ISchema } from 'sparqljson-to-tree';\nimport { Converter } from 'sparqljson-to-tree';\n\n/**\n * A comunica Tree Query Result Serialize Actor.\n */\nexport class ActorQueryResultSerializeTree extends ActorQueryResultSerializeFixedMediaTypes\n  implements IActorQueryResultSerializeFixedMediaTypesArgs {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{ \"tree\": 0.5 }} mediaTypePriorities\n   *   \\ @defaultNested {{ \"tree\": \"https://comunica.linkeddatafragments.org/#results_tree\" }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  /**\n   *\n   * @param {BindingsStream} bindingsStream\n   * @param context\n   * @param {IConverterSettings} converterSettings\n   * @return {Promise<string>}\n   */\n  public static async bindingsStreamToGraphQl(\n    bindingsStream: BindingsStream,\n    context: IActionContext | Record<string, any> | undefined,\n    converterSettings?: IConverterSettings,\n  ): Promise<any> {\n    const actionContext: IActionContext = ActionContext.ensureActionContext(context);\n    const converter: Converter = new Converter(converterSettings);\n    const schema: ISchema = {\n      singularizeVariables: actionContext.get(KeysInitQuery.graphqlSingularizeVariables) ?? {},\n    };\n\n    return converter.bindingsToTree(await bindingsStream.map((bindings: RDF.Bindings) =>\n      Object.fromEntries([ ...bindings ]\n        .map(([ key, value ]) => [ key.value, value ]))).toArray(), schema);\n  }\n\n  public override async testHandleChecked(action: IActionSparqlSerialize): Promise<boolean> {\n    if (action.type !== 'bindings') {\n      throw new Error('This actor can only handle bindings streams.');\n    }\n    return true;\n  }\n\n  public async runHandle(\n    action: IActionSparqlSerialize,\n    _mediaType: string,\n  ): Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      data._read = () => { /* Do nothing */ };\n      ActorQueryResultSerializeTree.bindingsStreamToGraphQl(\n        (<IQueryOperationResultBindings> action).bindingsStream,\n        action.context,\n        { materializeRdfJsTerms: true },\n      )\n        .then((result: any) => {\n          data.push(JSON.stringify(result, null, '  '));\n          data.push(null);\n        })\n        .catch(error => data.emit('error', error));\n    };\n\n    return { data };\n  }\n}\n"]}