{"version":3,"file":"ChunkedIterator.js","sourceRoot":"","sources":["ChunkedIterator.ts"],"names":[],"mappings":";;;AACA,iDAAiE;AAEjE;;GAEG;AACH,MAAa,eAAmB,SAAQ,iCAAsC;IAI5E,YAAmB,MAAwB,EAAE,SAAiB,EAAE,OAAqC;QACnG,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAHf,UAAK,GAAQ,EAAE,CAAC;QAIxB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAES,sBAAsB;QAC9B,MAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAC/D,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,OAAO,EAAE,CAAC;IACZ,CAAC;IAEkB,UAAU,CAAC,IAAO,EAAE,IAAgB,EAAE,IAAmC;QAC1F,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;QACtC,CAAC;QACD,IAAI,EAAE,CAAC;IACT,CAAC;IAEkB,MAAM,CAAC,IAAgB;QACxC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;QAC5C,CAAC;QACD,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC;CACF;AA7BD,0CA6BC","sourcesContent":["import type { AsyncIterator, TransformIteratorOptions } from 'asynciterator';\nimport { ArrayIterator, TransformIterator } from 'asynciterator';\n\n/**\n * Splits an iterator into chunks based on a given block size.\n */\nexport class ChunkedIterator<T> extends TransformIterator<T, AsyncIterator<T>> {\n  protected readonly blockSize: number;\n  protected chunk: T[] = [];\n\n  public constructor(source: AsyncIterator<T>, blockSize: number, options?: TransformIteratorOptions<T>) {\n    super(source, options);\n    this.blockSize = blockSize;\n  }\n\n  protected consumeChunkAsIterator(): AsyncIterator<T> {\n    const it = new ArrayIterator(this.chunk, { autoStart: false });\n    this.chunk = [];\n    return it;\n  }\n\n  protected override _transform(item: T, done: () => void, push: (i: AsyncIterator<T>) => void): void {\n    this.chunk.push(item);\n    if (this.chunk.length >= this.blockSize) {\n      push(this.consumeChunkAsIterator());\n    }\n    done();\n  }\n\n  protected override _flush(done: () => void): void {\n    if (this.chunk.length > 0) {\n      this._push(this.consumeChunkAsIterator());\n    }\n    super._flush(done);\n  }\n}\n"]}