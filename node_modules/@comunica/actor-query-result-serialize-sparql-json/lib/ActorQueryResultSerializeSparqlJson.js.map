{"version":3,"file":"ActorQueryResultSerializeSparqlJson.js","sourceRoot":"","sources":["ActorQueryResultSerializeSparqlJson.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput,\n} from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type {\n  IActionContext,\n  IQueryOperationResultBindings,\n  IQueryOperationResultBoolean,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { wrap } from 'asynciterator';\nimport { Readable } from 'readable-stream';\nimport type { ActionObserverHttp } from './ActionObserverHttp';\n\n/**\n * A comunica sparql-results+xml Serialize Actor.\n */\nexport class ActorQueryResultSerializeSparqlJson extends ActorQueryResultSerializeFixedMediaTypes {\n  private readonly emitMetadata: boolean;\n  public readonly httpObserver: ActionObserverHttp;\n\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/sparql-results+json\": 0.8\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/sparql-results+json\": \"http://www.w3.org/ns/formats/SPARQL_Results_JSON\"\n   *     }} mediaTypeFormats\n   *   \\ @defaultNested {true} emitMetadata\n   *   \\ @defaultNested {<default_observer> a <caqrssj:components/ActionObserverHttp.jsonld#ActionObserverHttp>} httpObserver\n   */\n  public constructor(args: IActorQueryResultSerializeSparqlJsonArgs) {\n    super(args);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Converts an RDF term to its JSON representation.\n   * @param {RDF.Term} value An RDF term.\n   * @return {any} A JSON object.\n   */\n  public static bindingToJsonBindings(value: RDF.Term): any {\n    if (value.termType === 'Literal') {\n      const literal: RDF.Literal = value;\n      const jsonValue: any = { value: literal.value, type: 'literal' };\n      const { language, datatype } = literal;\n      if (language) {\n        jsonValue['xml:lang'] = language;\n      } else if (datatype && datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n        jsonValue.datatype = datatype.value;\n      }\n      return jsonValue;\n    }\n    if (value.termType === 'BlankNode') {\n      return { value: value.value, type: 'bnode' };\n    }\n    if (value.termType === 'Quad') {\n      return {\n        value: {\n          subject: ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value.subject),\n          predicate: ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value.predicate),\n          object: ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value.object),\n        },\n        type: 'triple',\n      };\n    }\n    return { value: value.value, type: 'uri' };\n  }\n\n  public override async testHandleChecked(action: IActionSparqlSerialize, _context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'boolean' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or booleans.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, _mediaType: string | undefined, _context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    // Write head\n    const head: any = {};\n    if (action.type === 'bindings') {\n      const metadata = await (<IQueryOperationResultBindings> action).metadata();\n      if (metadata.variables.length > 0) {\n        head.vars = metadata.variables.map(variable => variable.value);\n      }\n    }\n    data.push(`{\"head\": ${JSON.stringify(head)},\\n`);\n\n    if (action.type === 'bindings') {\n      const resultStream = (<IQueryOperationResultBindings> action).bindingsStream;\n      data.push('\"results\": { \"bindings\": [\\n');\n\n      let first = true;\n\n      function* end(cb: () => string): Generator<string> {\n        yield cb();\n      }\n\n      // Write bindings\n      data.wrap(\n        // JSON SPARQL results spec does not allow unbound variables and blank node bindings\n        <any> wrap(resultStream).map((bindings) => {\n          const res = `${first ? '' : ',\\n'}${JSON.stringify(Object.fromEntries([ ...bindings ]\n          .map(([ key, value ]) => [ key.value, ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value) ])))}`;\n          first = false;\n          return res;\n        }).append(wrap(end(() => `\\n]}${this.emitMetadata ? `,\\n\"metadata\": { \"httpRequests\": ${this.httpObserver.requests} }` : ''}}\\n`))),\n      );\n    } else {\n      data.wrap(<any> wrap((<IQueryOperationResultBoolean> action).execute().then(value => [ `\"boolean\":${value}\\n}\\n` ])));\n    }\n\n    return { data };\n  }\n}\n\nexport interface IActorQueryResultSerializeSparqlJsonArgs extends IActorQueryResultSerializeFixedMediaTypesArgs {\n  emitMetadata: boolean;\n  httpObserver: ActionObserverHttp;\n}\n"]}