{"version":3,"file":"ActorRdfMetadataExtractHydraCount.js","sourceRoot":"","sources":["ActorRdfMetadataExtractHydraCount.ts"],"names":[],"mappings":";;;AAKA,iFAA6E;AAG7E;;GAEG;AACH,MAAa,iCAAkC,SAAQ,kDAAuB;IAI5E,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAAkC;QAClD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,GAAG,CAAC,MAAiC;QAC1C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,iBAAiB;YACjB,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAEpC,mDAAmD;YACnD,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBAClC,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;oBACnD,OAAO,CAAC;wBACN,QAAQ,EAAE;4BACR,WAAW,EAAE;gCACX,IAAI,EAAE,UAAU;gCAChB,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC;gCAC7C,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;6BAC5B;yBACF;qBACF,CAAC,CAAC;gBACL,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,+CAA+C;YAC/C,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC7B,OAAO,CAAC,EAAE,QAAQ,EAAE,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,EAAE,EAAC,EAAC,CAAC,CAAC;YACvE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAtCD,8EAsCC","sourcesContent":["import type {\n  IActionRdfMetadataExtract,\n  IActorRdfMetadataExtractOutput,\n  IActorRdfMetadataExtractArgs,\n} from '@comunica/bus-rdf-metadata-extract';\nimport { ActorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';\nimport type { IActorTest } from '@comunica/core';\n\n/**\n * An RDF Metadata Extract Actor that extracts total items counts from a metadata stream based on the given predicates.\n */\nexport class ActorRdfMetadataExtractHydraCount extends ActorRdfMetadataExtract\n  implements IActorRdfParseFixedMediaTypesArgs {\n  public readonly predicates: string[];\n\n  public constructor(args: IActorRdfParseFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async test(_action: IActionRdfMetadataExtract): Promise<IActorTest> {\n    return true;\n  }\n\n  public run(action: IActionRdfMetadataExtract): Promise<IActorRdfMetadataExtractOutput> {\n    return new Promise((resolve, reject) => {\n      // Forward errors\n      action.metadata.on('error', reject);\n\n      // Immediately resolve when a value has been found.\n      action.metadata.on('data', (quad) => {\n        if (this.predicates.includes(quad.predicate.value)) {\n          resolve({\n            metadata: {\n              cardinality: {\n                type: 'estimate',\n                value: Number.parseInt(quad.object.value, 10),\n                dataset: quad.subject.value,\n              },\n            },\n          });\n        }\n      });\n\n      // If no value has been found, assume infinity.\n      action.metadata.on('end', () => {\n        resolve({ metadata: { cardinality: { type: 'estimate', value: 0 }}});\n      });\n    });\n  }\n}\n\nexport interface IActorRdfParseFixedMediaTypesArgs extends IActorRdfMetadataExtractArgs {\n  /**\n   * A predicate that provides a count estimate\n   * @default {http://www.w3.org/ns/hydra/core#totalItems}\n   * @default {http://rdfs.org/ns/void#triples}\n   */\n  predicates: string[];\n}\n"]}