{"version":3,"file":"OrderUtils.js","sourceRoot":"","sources":["OrderUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { QuadTermName } from 'rdf-terms';\nimport { QUAD_TERM_NAMES } from 'rdf-terms';\nimport type { ITermDictionary } from './dictionary/ITermDictionary';\nimport type { QuadPatternTerms } from './PatternTerm';\n\nexport const QUAD_TERM_NAMES_INVERSE: Record<QuadTermName, number> =\n  <any>Object.fromEntries(QUAD_TERM_NAMES.map((value, key) => [ value, key ]));\n\n/**\n * Determine the best suitable order's index among the given orders for the given quad pattern.\n * @param componentOrders Possible orders of quad components.\n * @param quadPattern A quad pattern.\n */\nexport function getBestIndex(\n  componentOrders: QuadTermName[][],\n  quadPattern: QuadPatternTerms,\n): number {\n  if (componentOrders.length === 1 || quadPattern.every(term => term !== undefined)) {\n    return 0;\n  }\n\n  // Determine the quad component names for which we require a defined lookup\n  const definedQuadComponentNames: QuadTermName[] = [];\n  for (let quadComponentId = 0; quadComponentId < QUAD_TERM_NAMES.length; quadComponentId++) {\n    if (quadPattern[quadComponentId]) {\n      definedQuadComponentNames.push(QUAD_TERM_NAMES[quadComponentId]);\n    }\n  }\n\n  // Score indexes by how well they match to the index\n  const scoredIndexes = componentOrders.map((componentOrder, index) => {\n    const score = getComponentOrderScore(componentOrder, definedQuadComponentNames);\n    return { score, index };\n  });\n\n  // Sort the indexes, and pick the first one\n  return scoredIndexes.sort((scoredLeft, scoredRight) => scoredRight.score - scoredLeft.score)[0].index;\n}\n\n/**\n * Determine the score of the given partial component order in the given component order.\n * @param componentOrder A quad component order.\n * @param partialComponentOrder A partial quad component order that originates from a quad pattern.\n */\nexport function getComponentOrderScore(\n  componentOrder: QuadTermName[],\n  partialComponentOrder: QuadTermName[],\n): number {\n  return componentOrder\n    .map((order, i) => partialComponentOrder.includes(order) ? componentOrder.length - i : 0)\n    .reduce<number>((acc, add) => acc + add, 0);\n}\n\n/**\n * Order a quad pattern's terms based on the given component order.\n * @param desiredComponentOrder The desired order of components.\n * @param quadPattern A quad pattern.\n */\nexport function orderQuadComponents<T>(\n  desiredComponentOrder: QuadTermName[],\n  quadPattern: T[],\n): T[] {\n  return desiredComponentOrder.map(desiredComponent => {\n    const desiredComponentIndex = QUAD_TERM_NAMES_INVERSE[desiredComponent];\n    return quadPattern[desiredComponentIndex];\n  });\n}\n\n/**\n * Encode the given array of quad terms.\n * @param terms Non-encoded quad terms.\n * @param dictionary A dictionary\n * @return array An array of encoded terms.\n * The array will be undefined if at least one of the patterns does not occur within the dictionary.\n */\nexport function encodeOptionalTerms<E>(\n  terms: QuadPatternTerms,\n  dictionary: ITermDictionary<E>,\n): (E | undefined)[] | undefined {\n  const encodedTerms = terms.map(term => {\n    if (term) {\n      if (term.termType === 'Quad' && quadHasVariables(term)) {\n        return;\n      }\n      const encodedTerm = dictionary.encodeOptional(term);\n      if (encodedTerm === undefined) {\n        return 'none';\n      }\n      return encodedTerm;\n    }\n    return term;\n  });\n\n  if (encodedTerms.includes('none')) {\n    return undefined;\n  }\n\n  return <(E | undefined)[]> encodedTerms;\n}\n\n/**\n * Convert a quad patter to a `QuadPatternTerms` type.\n * @param subject The subject.\n * @param predicate The predicate.\n * @param object The object.\n * @param graph The graph.\n * @param quotedPatterns If the index supports quoted triple filtering.\n * @return Tuple A tuple of QuadPatternTerms\n *               and a boolean indicating if post-filtering will be needed on quoted triples.\n *               This boolean can only be true if `quotedPatterns` is false, and a quoted triple pattern was present.\n */\nexport function quadToPattern(\n  subject: RDF.Term | null | undefined,\n  predicate: RDF.Term | null | undefined,\n  object: RDF.Term | null | undefined,\n  graph: RDF.Term | null | undefined,\n  quotedPatterns: boolean,\n): [ QuadPatternTerms, boolean ] {\n  let requireQuotedTripleFiltering = false;\n  const quadPatternTerms = <QuadPatternTerms>\n    [ subject || undefined, predicate || undefined, object || undefined, graph || undefined ]\n      .map(term => {\n        if (term) {\n          if (term.termType === 'Variable') {\n            return;\n          }\n          if (term.termType === 'Quad') {\n            if (quotedPatterns) {\n              return term;\n            }\n            requireQuotedTripleFiltering = true;\n            return;\n          }\n        }\n        return term;\n      });\n\n  return [ quadPatternTerms, requireQuotedTripleFiltering ];\n}\n\n/**\n * Check if the given quad contains variables, even in deeply nested quoted triples.\n * @param currentTerm The quad pattern term.\n */\nexport function quadHasVariables(currentTerm: RDF.Quad): boolean {\n  for (const component of QUAD_TERM_NAMES) {\n    const subTerm = currentTerm[component];\n    if (subTerm.termType === 'Variable' || (subTerm.termType === 'Quad' && quadHasVariables(subTerm))) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Create a boolean array indicating which terms are quoted triple patterns.\n * @param terms An array of terms.\n */\nexport function arePatternsQuoted(terms: QuadPatternTerms): boolean[] {\n  return terms.map(term => term?.termType === 'Quad' && quadHasVariables(term));\n}\n"]}