import type { IRdfStoreOptions } from '../IRdfStoreOptions';
import type { EncodedQuadTerms, PatternTerm, QuadPatternTerms } from '../PatternTerm';
import type { NestedMapActual } from './RdfStoreIndexNestedMap';
import { RdfStoreIndexNestedMapRecursive } from './RdfStoreIndexNestedMapRecursive';
/**
 * An RDF store index that is implemented using nested Maps,
 * and finds quads components via recursive methods calls
 * with optimized quoted triple support.
 */
export declare class RdfStoreIndexNestedMapRecursiveQuoted<E, V> extends RdfStoreIndexNestedMapRecursive<E, V> {
    readonly features: {
        quotedTripleFiltering: boolean;
    };
    constructor(options: IRdfStoreOptions<E>);
    findEncoded(ids: EncodedQuadTerms<E | undefined>, terms: QuadPatternTerms): IterableIterator<EncodedQuadTerms<E>>;
    protected findEncodedInnerQuoted(index: number, ids: (E | undefined)[], terms: QuadPatternTerms, isQuotedPattern: boolean[], map: NestedMapActual<E, V>, partialQuad: E[]): IterableIterator<E[]>;
    protected countInner(index: number, terms: PatternTerm[], map: NestedMapActual<E, V>): number;
}
