{"version":3,"file":"IRdfStoreIndex.js","sourceRoot":"","sources":["IRdfStoreIndex.ts"],"names":[],"mappings":"","sourcesContent":["import type { EncodedQuadTerms, QuadPatternTerms, QuadTerms } from '../PatternTerm';\n\n/**\n * An RDF store index is a low-level index that can be used inside an RDF store.\n * It maps quads to values of a certain type V.\n */\nexport interface IRdfStoreIndex<E, V> {\n  /**\n   * A record indicating supported features of this index.\n   */\n  features: {\n    /**\n     * If true, this index supports passing quad patterns with quoted quad patterns in the `find` method.\n     * If false, such quoted quad patterns can not be passed, and must be replaced by `undefined`\n     * and filtered by the upper store afterwards.\n     */\n    quotedTripleFiltering?: boolean;\n  };\n  /**\n   * Set the value for a key (an encoded quad) in the index.\n   * @param key An array of encoded terms, ordered in the component order of this index.\n   * @param value The value to set for the given key.\n   * @return boolean If the mapping was not yet present in the index.\n   */\n  set: (key: EncodedQuadTerms<E>, value: V) => boolean;\n  /**\n   * Remove a key from the index.\n   * @param key An array of encoded terms, ordered in the component order of this index.\n   * @return boolean If the quad was present in the index.\n   */\n  remove: (key: EncodedQuadTerms<E>) => boolean;\n  /**\n   * Get the value for the given key (a non-encoded quad).\n   * @param key The non-encoded quad terms.\n   * @return V The stored value, or undefined if no mapping is present.\n   */\n  get: (key: QuadTerms) => V | undefined;\n  /**\n   * Get the value for the given key (an encoded quad).\n   * @param key An array of encoded terms, ordered in the component order of this index.\n   * @return V The stored value, or undefined if no mapping is present.\n   */\n  getEncoded: (key: EncodedQuadTerms<E>) => V | undefined;\n  /**\n   * Find all keys matching the given key terms.\n   * Quads are represented as an array of terms, in the component order of this index.\n   * @param terms An iterable of pattern terms, ordered in the component order of this index.\n   */\n  find: (terms: QuadPatternTerms) => IterableIterator<QuadTerms>;\n  /**\n   * Find all encoded keys matching the given key terms.\n   * Quads are represented as an array of terms, in the component order of this index.\n   * @param ids An iterable of encoded pattern terms, ordered in the component order of this index.\n   * @param terms An iterable of pattern terms, ordered in the component order of this index.\n   */\n  findEncoded: (ids: EncodedQuadTerms<E | undefined>, terms: QuadPatternTerms) => IterableIterator<EncodedQuadTerms<E>>;\n  /**\n   * Count the keys matching the given terms.\n   * Quads are represented as an array of terms, in the component order of this index.\n   * @param terms An iterable of pattern terms, ordered in the component order of this index.\n   */\n  count: (terms: QuadPatternTerms) => number;\n}\n"]}