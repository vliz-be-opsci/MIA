import type { ITermDictionary } from '../dictionary/ITermDictionary';
import type { IRdfStoreOptions } from '../IRdfStoreOptions';
import type { EncodedQuadTerms, QuadPatternTerms, QuadTerms } from '../PatternTerm';
import type { IRdfStoreIndex } from './IRdfStoreIndex';
/**
 * An RDF store index that is implemented using nested Maps.
 */
export declare class RdfStoreIndexNestedMap<E, V> implements IRdfStoreIndex<E, V> {
    protected readonly dictionary: ITermDictionary<E>;
    protected readonly nestedMap: NestedMapActual<E, V>;
    readonly features: {
        quotedTripleFiltering: boolean;
    };
    constructor(options: IRdfStoreOptions<E>);
    set(terms: EncodedQuadTerms<E>, value: V): boolean;
    remove(terms: EncodedQuadTerms<E>): boolean;
    get(key: QuadTerms): V | undefined;
    getEncoded(ids: EncodedQuadTerms<E>): V | undefined;
    find(terms: QuadPatternTerms): IterableIterator<QuadTerms>;
    findEncoded(ids: EncodedQuadTerms<E | undefined>, terms: QuadPatternTerms): IterableIterator<EncodedQuadTerms<E>>;
    count(terms: QuadPatternTerms): number;
}
export type NestedMap<E, V> = NestedMapActual<E, V> | V;
export type NestedMapActual<E, V> = Map<E, NestedMap<E, V>>;
