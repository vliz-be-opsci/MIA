{"version":3,"file":"RdfStoreIndexNestedMapRecursiveQuoted.js","sourceRoot":"","sources":["RdfStoreIndexNestedMapRecursiveQuoted.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { IRdfStoreOptions } from '../IRdfStoreOptions';\nimport { arePatternsQuoted, quadHasVariables } from '../OrderUtils';\nimport type { EncodedQuadTerms, PatternTerm, QuadPatternTerms } from '../PatternTerm';\nimport type { NestedMapActual } from './RdfStoreIndexNestedMap';\nimport { RdfStoreIndexNestedMapRecursive } from './RdfStoreIndexNestedMapRecursive';\n\n/**\n * An RDF store index that is implemented using nested Maps,\n * and finds quads components via recursive methods calls\n * with optimized quoted triple support.\n */\nexport class RdfStoreIndexNestedMapRecursiveQuoted<E, V> extends RdfStoreIndexNestedMapRecursive<E, V> {\n  public readonly features = {\n    quotedTripleFiltering: true,\n  };\n\n  public constructor(options: IRdfStoreOptions<E>) {\n    super(options);\n  }\n\n  public * findEncoded(\n    ids: EncodedQuadTerms<E | undefined>,\n    terms: QuadPatternTerms,\n  ): IterableIterator<EncodedQuadTerms<E>> {\n    return yield * <IterableIterator<EncodedQuadTerms<E>>> this\n      .findEncodedInnerQuoted(0, ids, terms, arePatternsQuoted(terms), this.nestedMap, []);\n  }\n\n  protected * findEncodedInnerQuoted(\n    index: number,\n    ids: (E | undefined)[],\n    terms: QuadPatternTerms,\n    isQuotedPattern: boolean[],\n    map: NestedMapActual<E, V>,\n    partialQuad: E[],\n  ): IterableIterator<E[]> {\n    if (index === ids.length) {\n      yield [ ...partialQuad ];\n    } else {\n      const id = ids[index];\n      const currentTerm = terms[index];\n\n      // If current term is undefined, iterate over all terms at this level.\n      if (!currentTerm) {\n        for (const [ key, subMap ] of map.entries()) {\n          partialQuad[index] = key;\n          yield * this\n            .findEncodedInnerQuoted(index + 1, ids, terms, isQuotedPattern, <NestedMapActual<E, V>>subMap, partialQuad);\n        }\n      } else if (isQuotedPattern[index]) {\n        const quotedTriplesEncoded: IterableIterator<E> = this\n          .dictionary.findQuotedTriplesEncoded(<RDF.Quad>currentTerm);\n        // Below, we perform a type of inner (hash) join between quotedTriplesEncoded and map (with hash on map)\n        for (const quotedTripleEncoded of quotedTriplesEncoded) {\n          const subMap = map.get(quotedTripleEncoded);\n          if (subMap) {\n            partialQuad[index] = quotedTripleEncoded;\n            yield * this.findEncodedInnerQuoted(\n              index + 1, ids, terms, isQuotedPattern, <NestedMapActual<E, V>>subMap, partialQuad,\n            );\n          }\n        }\n      } else {\n        // If the current term is defined, find one matching map for the current term.\n        const encodedTerm = id;\n        if (encodedTerm !== undefined) {\n          const subMap = map.get(encodedTerm);\n          if (subMap) {\n            partialQuad[index] = <E> id;\n            yield * this.findEncodedInnerQuoted(\n              index + 1, ids, terms, isQuotedPattern, <NestedMapActual<E, V>>subMap, partialQuad,\n            );\n          }\n        }\n      }\n    }\n  }\n\n  protected countInner(\n    index: number,\n    terms: PatternTerm[],\n    map: NestedMapActual<E, V>,\n  ): number {\n    const currentTerm = terms[index];\n    let count = 0;\n\n    // If current term is undefined, iterate over all terms at this level.\n    if (!currentTerm) {\n      if (index === terms.length - 1) {\n        return map.size;\n      }\n\n      for (const subMap of map.values()) {\n        count += this.countInner(index + 1, terms, <NestedMapActual<E, V>>subMap);\n      }\n    } else if (currentTerm.termType === 'Quad' && quadHasVariables(currentTerm)) {\n      const quotedTriplesEncoded: IterableIterator<E> = this.dictionary.findQuotedTriplesEncoded(currentTerm);\n      // Below, we perform a type of inner (hash) join between quotedTriplesEncoded and map (with hash on map)\n      for (const quotedTripleEncoded of quotedTriplesEncoded) {\n        if (index === terms.length - 1) {\n          if (map.has(quotedTripleEncoded)) {\n            count++;\n          }\n        } else {\n          const subMap = map.get(quotedTripleEncoded);\n          if (subMap) {\n            count += this.countInner(index + 1, terms, <NestedMapActual<E, V>>subMap);\n          }\n        }\n      }\n    } else {\n      // If the current term is defined, find one matching map for the current term.\n      const encodedTerm = this.dictionary.encodeOptional(currentTerm);\n      if (encodedTerm !== undefined) {\n        if (index === terms.length - 1) {\n          if (map.has(encodedTerm)) {\n            return 1;\n          }\n          return 0;\n        }\n\n        const subMap = map.get(encodedTerm);\n        if (subMap) {\n          count += this.countInner(index + 1, terms, <NestedMapActual<E, V>>subMap);\n        }\n      }\n    }\n\n    return count;\n  }\n}\n"]}