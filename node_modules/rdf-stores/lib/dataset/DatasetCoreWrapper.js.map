{"version":3,"file":"DatasetCoreWrapper.js","sourceRoot":"","sources":["DatasetCoreWrapper.ts"],"names":[],"mappings":";;;AACA,0CAAuC;AAEvC;;GAEG;AACH,MAAa,kBAAkB;IAC7B,YACkB,KAAqB;QAArB,UAAK,GAAL,KAAK,CAAgB;IACpC,CAAC;IAEJ,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;IAEM,GAAG,CAAC,IAAO;QAChB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,IAAO;QACnB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,GAAG,CAAC,IAAO;QAChB,+CAA+C;QAC/C,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;YAChG,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,KAAK,CACV,OAAyB,EACzB,SAA2B,EAC3B,MAAwB,EACxB,KAAuB;QAEvB,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACxD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE;YAC1E,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACxB;QACD,OAAO,IAAI,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,CAAC,MAAM,CAAC,QAAQ,CAAC;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;IAChC,CAAC;CACF;AA3CD,gDA2CC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { RdfStore } from '../RdfStore';\n\n/**\n * A DatasetCoreWrapper exposes an RdfStore inside an RDF.DatasetCore.\n */\nexport class DatasetCoreWrapper<E = any, Q extends RDF.BaseQuad = RDF.Quad> implements RDF.DatasetCore<Q> {\n  public constructor(\n    public readonly store: RdfStore<E, Q>,\n  ) {}\n\n  public get size(): number {\n    return this.store.size;\n  }\n\n  public add(quad: Q): this {\n    this.store.addQuad(quad);\n    return this;\n  }\n\n  public delete(quad: Q): this {\n    this.store.removeQuad(quad);\n    return this;\n  }\n\n  public has(quad: Q): boolean {\n    // eslint-disable-next-line no-unreachable-loop\n    for (const result of this.store.readQuads(quad.subject, quad.predicate, quad.object, quad.graph)) {\n      return true;\n    }\n    return false;\n  }\n\n  public match(\n    subject?: RDF.Term | null,\n    predicate?: RDF.Term | null,\n    object?: RDF.Term | null,\n    graph?: RDF.Term | null,\n  ): DatasetCoreWrapper<E, Q> {\n    const newStore = new RdfStore<E, Q>(this.store.options);\n    for (const quad of this.store.readQuads(subject, predicate, object, graph)) {\n      newStore.addQuad(quad);\n    }\n    return new DatasetCoreWrapper(newStore);\n  }\n\n  public [Symbol.iterator](): Iterator<Q> {\n    return this.store.readQuads();\n  }\n}\n"]}