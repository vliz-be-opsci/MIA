{"version":3,"file":"TermDictionarySymbol.js","sourceRoot":"","sources":["TermDictionarySymbol.ts"],"names":[],"mappings":";;;AACA,uDAA+C;AAC/C,2CAAwD;AAGxD;;GAEG;AACH,MAAa,oBAAoB;IAI/B,YAAmB,cAA+B,IAAI,8BAAW,EAAE;QAFnD,aAAQ,GAAG,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;QAGlD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,MAAM,CAAC,IAAc;QAC1B,OAAO,MAAM,CAAC,GAAG,CAAC,QAAQ,IAAA,yBAAY,EAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAClD,CAAC;IAEM,cAAc,CAAC,IAAc;QAClC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,QAAgB;QAC5B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,aAAa,MAAM,CAAC,QAAQ,CAAC,oCAAoC,CAAC,CAAC;SACpF;QACD,OAAO,IAAA,yBAAY,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACzD,CAAC;IAEM,SAAS;QACd,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IAEM,iBAAiB,CAAC,mBAA6B;QACpD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACxD,CAAC;IAEM,wBAAwB,CAAC,mBAA6B;QAC3D,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;CACF;AAnCD,oDAmCC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { stringToTerm, termToString } from 'rdf-string';\nimport type { ITermDictionary } from './ITermDictionary';\n\n/**\n * A term dictionary that encodes and decodes using symbols.\n */\nexport class TermDictionarySymbol implements ITermDictionary<symbol> {\n  private readonly dataFactory: RDF.DataFactory;\n  public readonly features = { quotedTriples: false };\n\n  public constructor(dataFactory: RDF.DataFactory = new DataFactory()) {\n    this.dataFactory = dataFactory;\n  }\n\n  public encode(term: RDF.Term): symbol {\n    return Symbol.for(`rdf::${termToString(term)}`);\n  }\n\n  public encodeOptional(term: RDF.Term): symbol {\n    return this.encode(term);\n  }\n\n  public decode(encoding: symbol): RDF.Term {\n    const string = Symbol.keyFor(encoding);\n    if (string === undefined) {\n      throw new Error(`The value ${String(encoding)} is not present in this dictionary`);\n    }\n    return stringToTerm(string.slice(5), this.dataFactory);\n  }\n\n  public encodings(): IterableIterator<symbol> {\n    throw new Error('encodings is not supported');\n  }\n\n  public findQuotedTriples(quotedTriplePattern: RDF.Quad): IterableIterator<RDF.Term> {\n    throw new Error('findQuotedTriples is not supported');\n  }\n\n  public findQuotedTriplesEncoded(quotedTriplePattern: RDF.Quad): IterableIterator<symbol> {\n    throw new Error('findQuotedTriplesEncoded is not supported');\n  }\n}\n"]}