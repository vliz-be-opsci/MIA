{"version":3,"file":"ITermDictionary.js","sourceRoot":"","sources":["ITermDictionary.ts"],"names":[],"mappings":"","sourcesContent":["import type * as RDF from '@rdfjs/types';\n\n/**\n * A term dictionary is able to encode RDF terms into values of type E,\n * and decode values of type E into RDF terms.\n */\nexport interface ITermDictionary<E> {\n  /**\n   * A record indicating supported features of this index.\n   */\n  features: {\n    /**\n     * If true, this dictionary implements the `findQuotedTriples` method.\n     */\n    quotedTriples?: boolean;\n  };\n  /**\n   * Encode the given RDF term.\n   * Multiple invocations of this method with the same term MUST return the same value.\n   * @param term An RDF term.\n   */\n  encode: (term: RDF.Term) => E;\n  /**\n   * Return the encoding of the given RDF term, but do not create a new encoding if it doesn't exist,\n   * but return undefined.\n   * @param term An RDF term.\n   */\n  encodeOptional: (term: RDF.Term) => E | undefined;\n  /**\n   * Decode the given encoded value into an RDF term.\n   * Multiple invocations of this method with the same term MUST return the same value.\n   * @param encoding An encoded RDF term.\n   */\n  decode: (encoding: E) => RDF.Term;\n  /**\n   * Return all encoded terms.\n   */\n  encodings: () => IterableIterator<E>;\n  /**\n   * Find all quoted triples in this dictionary that match with the given triple pattern.\n   * @param quotedTriplePattern A triple pattern to match with quoted triples.\n   */\n  findQuotedTriples: (quotedTriplePattern: RDF.Quad) => IterableIterator<RDF.Term>;\n  /**\n   * Find all encoded quoted triples in this dictionary that match with the given triple pattern.\n   * @param quotedTriplePattern A triple pattern to match with quoted triples.\n   */\n  findQuotedTriplesEncoded: (quotedTriplePattern: RDF.Quad) => IterableIterator<E>;\n}\n"]}