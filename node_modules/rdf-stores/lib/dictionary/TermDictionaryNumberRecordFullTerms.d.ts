import type * as RDF from '@rdfjs/types';
import type { ITermDictionary } from './ITermDictionary';
/**
 * A term dictionary that encodes to numbers, and stores the dictionary in memory in a Record.
 * The reverse dictionary will store full RDF term objects,
 * resulting in slightly better query performance at the cost of slightly higher memory usage.
 */
export declare class TermDictionaryNumberRecordFullTerms implements ITermDictionary<number> {
    private lastId;
    private readonly dictionary;
    private readonly reverseDictionary;
    private readonly dataFactory;
    readonly features: {
        quotedTriples: boolean;
    };
    constructor(dataFactory?: RDF.DataFactory);
    encode(term: RDF.Term): number;
    encodeOptional(term: RDF.Term): number | undefined;
    decode(encoding: number): RDF.Term;
    encodings(): IterableIterator<number>;
    findQuotedTriples(quotedTriplePattern: RDF.Quad): IterableIterator<RDF.Term>;
    findQuotedTriplesEncoded(quotedTriplePattern: RDF.Quad): IterableIterator<number>;
}
