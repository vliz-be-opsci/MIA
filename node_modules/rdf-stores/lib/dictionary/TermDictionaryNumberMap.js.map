{"version":3,"file":"TermDictionaryNumberMap.js","sourceRoot":"","sources":["TermDictionaryNumberMap.ts"],"names":[],"mappings":";;;AACA,uDAA+C;AAC/C,2CAAwD;AAGxD;;GAEG;AACH,MAAa,uBAAuB;IAOlC,YAAmB,cAA+B,IAAI,8BAAW,EAAE;QAN3D,WAAM,GAAG,CAAC,CAAC;QACF,eAAU,GAAwB,IAAI,GAAG,EAAE,CAAC;QAC5C,sBAAiB,GAAwB,IAAI,GAAG,EAAE,CAAC;QAEpD,aAAQ,GAAG,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;QAGlD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,MAAM,CAAC,IAAc;QAC1B,MAAM,GAAG,GAAG,IAAA,yBAAY,EAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YACxB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAClC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;SAC1C;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,cAAc,CAAC,IAAc;QAClC,MAAM,GAAG,GAAG,IAAA,yBAAY,EAAC,IAAI,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAEM,MAAM,CAAC,QAAgB;QAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACpD,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,aAAa,QAAQ,oCAAoC,CAAC,CAAC;SAC5E;QACD,OAAO,IAAA,yBAAY,EAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAChD,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IACvC,CAAC;IAEM,iBAAiB,CAAC,mBAA6B;QACpD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACxD,CAAC;IAEM,wBAAwB,CAAC,mBAA6B;QAC3D,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;CACF;AA9CD,0DA8CC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { stringToTerm, termToString } from 'rdf-string';\nimport type { ITermDictionary } from './ITermDictionary';\n\n/**\n * A term dictionary that encodes to numbers, and stores the dictionary in memory in a Map.\n */\nexport class TermDictionaryNumberMap implements ITermDictionary<number> {\n  private lastId = 0;\n  private readonly dictionary: Map<string, number> = new Map();\n  private readonly reverseDictionary: Map<number, string> = new Map();\n  private readonly dataFactory: RDF.DataFactory;\n  public readonly features = { quotedTriples: false };\n\n  public constructor(dataFactory: RDF.DataFactory = new DataFactory()) {\n    this.dataFactory = dataFactory;\n  }\n\n  public encode(term: RDF.Term): number {\n    const key = termToString(term);\n    let encoded = this.dictionary.get(key);\n    if (encoded === undefined) {\n      encoded = this.lastId++;\n      this.dictionary.set(key, encoded);\n      this.reverseDictionary.set(encoded, key);\n    }\n    return encoded;\n  }\n\n  public encodeOptional(term: RDF.Term): number | undefined {\n    const key = termToString(term);\n    return this.dictionary.get(key);\n  }\n\n  public decode(encoding: number): RDF.Term {\n    const string = this.reverseDictionary.get(encoding);\n    if (string === undefined) {\n      throw new Error(`The value ${encoding} is not present in this dictionary`);\n    }\n    return stringToTerm(string, this.dataFactory);\n  }\n\n  public encodings(): IterableIterator<number> {\n    return this.reverseDictionary.keys();\n  }\n\n  public findQuotedTriples(quotedTriplePattern: RDF.Quad): IterableIterator<RDF.Term> {\n    throw new Error('findQuotedTriples is not supported');\n  }\n\n  public findQuotedTriplesEncoded(quotedTriplePattern: RDF.Quad): IterableIterator<number> {\n    throw new Error('findQuotedTriplesEncoded is not supported');\n  }\n}\n"]}