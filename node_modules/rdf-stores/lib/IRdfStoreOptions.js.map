{"version":3,"file":"IRdfStoreOptions.js","sourceRoot":"","sources":["IRdfStoreOptions.ts"],"names":[],"mappings":"","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { QuadTermName } from 'rdf-terms';\nimport type { ITermDictionary } from './dictionary/ITermDictionary';\nimport type { IRdfStoreIndex } from './index/IRdfStoreIndex';\n\n/**\n * Options for constructing an RDF store.\n */\nexport interface IRdfStoreOptions<E, Q extends RDF.BaseQuad = RDF.Quad> {\n  /**\n   * The quad component order combinations of indexes that must be created.\n   * For example, creating a store with only an SPOG index requires passing:\n   * [[ 'subject', 'predicate', 'object', 'graph' ]]\n   * For example, creating a store with SPOG and GOPS index requires passing:\n   * [[ 'subject', 'predicate', 'object', 'graph' ], [ 'graph', 'object', 'predicate', 'subject' ]]\n   */\n  indexCombinations: QuadTermName[][];\n  /**\n   * Callback for creating an index.\n   * @param options The store options.\n   */\n  indexConstructor: (options: IRdfStoreOptions<E, Q>) => IRdfStoreIndex<E, boolean>;\n  /**\n   * The dictionary for encoding and decoding RDF terms.\n   */\n  dictionary: ITermDictionary<E>;\n  /**\n   * The data factory for constructing terms and quads.\n   */\n  dataFactory: RDF.DataFactory<Q>;\n}\n"]}