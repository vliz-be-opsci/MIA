"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrefetchedDocumentLoader = void 0;
const jsonld_context_parser_1 = require("jsonld-context-parser");
const semverMajor = require("semver/functions/major");
/**
 * A document loader that first loads from a precomputed set of contexts,
 * and only then does an HTTP(S) lookup for the context.
 */
class PrefetchedDocumentLoader extends jsonld_context_parser_1.FetchDocumentLoader {
    constructor(options) {
        super();
        this.contexts = Object.assign(Object.assign({}, options.contexts), PrefetchedDocumentLoader.DEFAULT_CONTEXTS);
        this.logger = options.logger;
        this.path = options.path;
        this.remoteContextLookups = options.remoteContextLookups;
    }
    async load(url) {
        // Load prefetched contexts
        if (url in this.contexts) {
            return this.contexts[url];
        }
        // Warn before doing a remote context lookup
        const errorMessage = `Detected remote context lookup for '${url}'${this.path ? ` in ${this.path}` : ''}. This may indicate a missing or invalid dependency, incorrect version number, or an invalid context URL.`;
        if (!this.remoteContextLookups) {
            throw new Error(errorMessage);
        }
        if (this.logger) {
            this.logger.warn(errorMessage);
        }
        return super.load(url);
    }
}
PrefetchedDocumentLoader.CJS_MAJOR_VERSION = semverMajor(require('../../package.json').version);
PrefetchedDocumentLoader.CONTEXT_URL = `https://linkedsoftwaredependencies.org/bundles/npm/componentsjs/^${PrefetchedDocumentLoader.CJS_MAJOR_VERSION}.0.0/components/context.jsonld`;
PrefetchedDocumentLoader.CONTEXT_PATTERN = /https:\/\/linkedsoftwaredependencies.org\/bundles\/npm\/componentsjs\/\^([0-9]+).0.0\/components\/context.jsonld/u;
PrefetchedDocumentLoader.DEFAULT_CONTEXT = require('../../components/context.json');
PrefetchedDocumentLoader.DEFAULT_CONTEXTS = {
    [PrefetchedDocumentLoader.CONTEXT_URL]: PrefetchedDocumentLoader.DEFAULT_CONTEXT,
};
(() => {
    // TODO: temporarily also set old context versions for backwards-compatible.
    for (let i = 3; i < PrefetchedDocumentLoader.CJS_MAJOR_VERSION; i++) {
        PrefetchedDocumentLoader.DEFAULT_CONTEXTS[`https://linkedsoftwaredependencies.org/bundles/npm/componentsjs/^${i}.0.0/components/context.jsonld`] = PrefetchedDocumentLoader.DEFAULT_CONTEXT;
    }
})();
exports.PrefetchedDocumentLoader = PrefetchedDocumentLoader;
//# sourceMappingURL=PrefetchedDocumentLoader.js.map