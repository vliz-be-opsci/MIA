"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OverrideListInsertAt = void 0;
const Iris_1 = require("../../rdf/Iris");
const ErrorResourcesContext_1 = require("../../util/ErrorResourcesContext");
const OverrideUtil_1 = require("./OverrideUtil");
/**
 * Override step that inserts elements in a list at a specific index.
 * A negative index can be used to count from the back of the list.
 * An index of `-0` can be used to insert at the end of the list.
 *
 * Uses the following override step fields:
 *  - `overrideParameter`: Parameter of the original object that contains the list.
 *  - `overrideTarget`: A literal containing the index.
 *  - `overrideValue`: Element(s) to insert at the chosen index.
 */
class OverrideListInsertAt {
    canHandle(config, step) {
        return step.property.type.value === (0, Iris_1.PREFIX_OO)('OverrideListInsertAt');
    }
    handle(config, step) {
        const { parameters, targets, values } = (0, OverrideUtil_1.extractOverrideStepFields)(step, { parameters: 1, targets: 1 });
        const list = (0, OverrideUtil_1.getPropertyResourceList)(config, parameters[0]);
        const val = targets[0].value;
        if (!/^-?\d+$/u.test(val)) {
            throw new ErrorResourcesContext_1.ErrorResourcesContext(`Invalid index in Override step OverrideListInsertAt for parameter ${parameters[0].value}: ${val}`, {
                config,
                step,
            });
        }
        // Support adding elements at the end using -0
        if (val === '-0') {
            list.push(...values);
        }
        else {
            const index = Number.parseInt(val, 10);
            list.splice(index, 0, ...values);
        }
        return config;
    }
}
exports.OverrideListInsertAt = OverrideListInsertAt;
//# sourceMappingURL=OverrideListInsertAt.js.map