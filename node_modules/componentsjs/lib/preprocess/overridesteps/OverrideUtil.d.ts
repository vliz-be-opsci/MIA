import type { Resource } from 'rdf-object';
export declare const OVERRIDE_STEP_FIELD_NAMES: readonly ["parameter", "target", "value"];
export type OverrideStepFieldName = `${typeof OVERRIDE_STEP_FIELD_NAMES[number]}s`;
/**
 * Extracts the fields from an override step and checks if the correct amount is present.
 * Will throw an error if the amount doesn't match what is expected.
 *
 * @param step - Override step to get the fields from.
 * @param expected - For each field, how many are expected. The value can be undefined if there is no fixed amount.
 */
export declare function extractOverrideStepFields(step: Resource, expected?: {
    [key in OverrideStepFieldName]?: number;
}): Record<OverrideStepFieldName, Resource[]>;
/**
 * Returns a list containing all values for the given resource found with the given property.
 * In case there are multiple matches, the lists will be merged.
 * The parameter of the resource will be updated to have a single value which is the returned list,
 * so the returned list can be updated to modify the resource directly.
 *
 * @param config
 * @param parameter
 */
export declare function getPropertyResourceList(config: Resource, parameter: Resource): Resource[];
/**
 * Finds the index of the given resource in the given list.
 * Will throw an error if the resource is not found.
 *
 * @param list - The list to find the resource in.
 * @param target - The resource to find.
 */
export declare function findResourceIndex(list: Resource[], target: Resource): number;
