"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readableFromWeb = exports.ReadableFromWeb = void 0;
const readable_stream_1 = require("readable-stream");
class ReadableFromWeb extends readable_stream_1.Readable {
    constructor(stream, options) {
        super(options);
        this.reader = stream.getReader();
        this.readerClosed = false;
        this.reader.closed.then(() => {
            this.readerClosed = true;
        }).catch((error) => {
            this.readerClosed = true;
            this.destroy(error);
        });
    }
    // eslint-disable-next-line ts/naming-convention
    _read() {
        this.reader.read()
            .then(chunk => this.push(chunk.done ? null : chunk.value))
            .catch((error) => this.destroy(error));
    }
    destroy(error) {
        if (!this.readerClosed) {
            this.reader.cancel(error).then().catch(() => {
                // Ideally, the error from cancel should be handled here.
                // However, an error thrown in cancel does not seem to reach this callback.
                // Therefore, the error is simply not handled here.
            });
        }
        return super.destroy(error);
    }
}
exports.ReadableFromWeb = ReadableFromWeb;
function readableFromWeb(stream, options) {
    return new ReadableFromWeb(stream, options);
}
exports.readableFromWeb = readableFromWeb;
//# sourceMappingURL=ReadableFromWeb.js.map